<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:SpriteBase.Awake">
            <summary>
                Unity Awake method that initializes the sprite's mesh components and texture. Gets
                MeshFilter and MeshRenderer components, destroys any existing shared mesh, extracts
                texture from material, starts the animation pump if needed, and creates normals
                array if requested.
            </summary>
        </member>
        <member name="M:SpriteBase.Clear">
            <summary>
                Resets the sprite to default state. Disables billboarding, sets color to white,
                resets offset to zero, and clears the animation complete delegate.
            </summary>
        </member>
        <member name="M:SpriteBase.Init">
            <summary>
                Initializes the sprite mesh with vertices, UVs, colors, and triangles. Creates a new
                dynamic mesh if needed, sets up winding order, calculates UVs with bleed
                compensation, configures pixel-perfect rendering if enabled, and applies initial
                size and color.
            </summary>
        </member>
        <member name="M:SpriteBase.OnDisable">
            <summary>
                Unity OnDisable callback that temporarily removes the sprite from the animation
                system when disabled. Preserves the animating state so it can be restored when
                re-enabled.
            </summary>
        </member>
        <member name="M:SpriteBase.OnEnable">
            <summary>
                Unity OnEnable callback that re-adds the sprite to the animation system if it was
                animating when disabled. Only operates in play mode to avoid editor issues.
            </summary>
        </member>
        <member name="M:SpriteBase.Start">
            <summary>
                Unity Start method that completes sprite initialization. Stores the initial UV
                rectangle, calculates pixels per UV unit from texture dimensions, and sets up the
                camera reference for pixel-perfect rendering calculations.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:SpriteBase.AddToAnimatedList">
            <summary>
                Adds this sprite to the global animation pump for frame updates. Starts the
                animation pump if not already running and marks the sprite as animating.
            </summary>
        </member>
        <member name="M:SpriteBase.Copy(SpriteBase)">
            <summary>
                Copies configuration from another sprite including material, texture, plane
                orientation, winding order, offset, anchor method, resize settings, pixel perfect
                flag, and color. Updates texture dimensions for UV calculations.
            </summary>
            <param name="s">Source sprite to copy settings from</param>
        </member>
        <member name="M:SpriteBase.IsAnimating">
            <summary>
                Checks whether this sprite is currently animating.
            </summary>
            <returns>True if the sprite is in the animation update list, false otherwise.</returns>
        </member>
        <member name="M:SpriteBase.PauseAnim">
            <summary>
                Pauses the sprite animation by removing it from the animation update list. The
                animation state is preserved and can be resumed later.
            </summary>
        </member>
        <member name="M:SpriteBase.RecalcTexture">
            <summary>
                Refreshes texture reference from the current material's main texture. Updates pixel
                dimensions used for UV coordinate calculations. Called when material or texture
                changes.
            </summary>
        </member>
        <member name="M:SpriteBase.RemoveFromAnimatedList">
            <summary>
                Removes this sprite from the global animation pump, stopping frame updates. Marks
                the sprite as no longer animating.
            </summary>
        </member>
        <member name="M:SpriteBase.RevertToStatic">
            <summary>
                Reverts the sprite to its static (non-animated) state. Stops any active animation,
                recalculates UVs, applies bleed compensation, and optionally resizes based on
                pixel-perfect or auto-resize settings.
            </summary>
        </member>
        <member name="M:SpriteBase.SetAnimCompleteDelegate(SpriteBase.AnimCompleteDelegate)">
            <summary>
                Sets a delegate to be called when the current animation completes. Used for
                triggering events or transitioning to other animations when an animation cycle
                finishes.
            </summary>
            <param name="del">Delegate to invoke when animation completes, or null to clear</param>
        </member>
        <member name="M:SpriteBase.SetColor(UnityEngine.Color)">
            <summary>
                Sets the vertex color for all four vertices of the sprite. Color is multiplied with
                texture in the shader for tinting effects.
            </summary>
            <param name="c">Color to apply to all vertices</param>
        </member>
        <member name="M:SpriteBase.SetSpriteResizedDelegate(SpriteBase.SpriteResizedDelegate)">
            <summary>
                Sets a delegate to be called whenever the sprite is resized. Useful for updating
                dependent systems when sprite dimensions change due to UV updates or manual
                resizing.
            </summary>
            <param name="del">Delegate to invoke when sprite is resized, receives new width, height, and sprite reference</param>
        </member>
        <member name="M:SpriteBase.StepAnim(System.Single)">
            <summary>
                Virtual method for advancing sprite animation by the specified time delta. Base
                implementation returns false. Derived classes override this to implement actual
                animation logic.
            </summary>
            <param name="time">Time elapsed since last animation step in seconds</param>
            <returns>Always returns false in base implementation. Derived classes return true if animation continues, false if complete</returns>
        </member>
        <member name="M:SpriteBase.StopAnim">
            <summary>
                Virtual method that stops the sprite animation. Base implementation is empty -
                override in derived classes to implement custom animation stopping behavior.
            </summary>
        </member>
        <member name="M:SpriteBase.TransformBillboarded(UnityEngine.Transform)">
            <summary>
                Transforms the sprite to face a specific transform (billboard effect). Currently
                empty in base class, likely implemented in derived classes for camera-facing
                sprites.
            </summary>
            <param name="t">Transform to face towards</param>
        </member>
        <!-- Animation & Sprite Systems Properties -->
        <member name="P:SpriteBase.MeshRenderer">
            <summary>
                Gets or sets the MeshRenderer component used to render this sprite. Provides direct
                access to rendering properties like materials and shadows.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:SpriteBase.animCompleteDelegate">
            <summary>
                Delegate invoked when an animation completes playback. Set via
                SetAnimCompleteDelegate method and called by derived classes (PackedSprite,
                SpriteSM) when they finish playing an animation sequence. Allows external code to
                respond to animation completion events for state transitions or chaining animations.
            </summary>
        </member>
        <member name="F:SpriteBase.animating">
            <summary>
                Indicates whether the sprite is currently playing an animation. When true, the
                sprite is registered with the SpriteAnimationPump for regular StepAnim updates.
                Managed by AddToAnimatedList/RemoveFromAnimatedList methods and preserved across
                OnDisable/OnEnable cycles.
            </summary>
        </member>
        <member name="F:SpriteBase.defaultAnim">
            <summary>
                The index of the animation to play by default. Used in conjunction with
                playAnimOnStart to automatically begin animation playback when the sprite
                initializes. Also used as the fallback animation when an animation completes with
                the Play_Default_Anim end action. Must be a valid index within the animations array.
            </summary>
        </member>
        <member name="F:SpriteBase.framesToAdvance">
            <summary>
                The number of animation frames to advance in the current update, calculated as
                timeSinceLastFrame / timeBetweenAnimFrames. Allows animations to catch up if
                multiple frames worth of time have elapsed since the last update, ensuring smooth
                playback even with variable frame rates.
            </summary>
        </member>
        <member name="F:SpriteBase.playAnimOnStart">
            <summary>
                When true, automatically plays the default animation when the sprite starts. Used by
                derived classes like PackedSprite and SpriteSM to trigger initial animation playback
                during their Start method if a valid defaultAnim index is specified and the
                application is playing.
            </summary>
        </member>
        <member name="F:SpriteBase.resizedDelegate">
            <summary>
                Delegate invoked when the sprite is resized via SetSize method. Receives the new
                width, height, and a reference to the sprite being resized. Allows external code to
                respond to size changes for layout updates or dependent object adjustments. Set via
                SetSpriteResizedDelegate method.
            </summary>
        </member>
        <member name="F:SpriteBase.timeBetweenAnimFrames">
            <summary>
                The duration in seconds between animation frames, calculated as 1/framerate. Used
                with timeSinceLastFrame to determine when to advance the animation. Set by derived
                classes when playing animations to control playback speed.
            </summary>
        </member>
        <member name="F:SpriteBase.timeSinceLastFrame">
            <summary>
                Accumulates elapsed time since the last animation frame change. Used by derived
                animation classes to determine when to advance to the next frame based on the
                animation framerate. Reset to zero (minus overflow) each time a frame advances.
            </summary>
        </member>
        <!-- Mesh Management Methods -->
        <member name="M:SpriteBase.CalcEdges">
            <summary>
                Calculates the top-left and bottom-right corner positions based on the current
                anchor method. Supports nine anchor points (corners, edges, and center) for flexible
                sprite positioning.
            </summary>
        </member>
        <member name="M:SpriteBase.CalcSize">
            <summary>
                Calculates sprite dimensions based on rendering mode. In pixel-perfect mode,
                calculates size from screen pixels and orthographic camera size. In auto-resize
                mode, scales proportionally with UV changes. Updates sprite size after calculation.
            </summary>
        </member>
        <member name="M:SpriteBase.RefreshVertices">
            <summary>
                Recalculates and updates all vertex positions with shear and skew effects applied.
                Used for creating slanted or distorted sprites while maintaining proper UV mapping.
            </summary>
        </member>
        <member name="M:SpriteBase.SetSize(System.Single,System.Single)">
            <summary>
                Sets the sprite size and updates vertex positions based on the current plane
                orientation. Routes to appropriate size setting method (SetSizeXY, SetSizeXZ, or
                SetSizeYZ) and invokes resize delegate if set.
            </summary>
            <param name="width">New width of the sprite in world units</param>
            <param name="height">New height of the sprite in world units</param>
        </member>
        <member name="M:SpriteBase.SetSizeXY(System.Single,System.Single)">
            <summary>
                Updates sprite vertices for XY plane orientation (standard 2D sprite facing camera).
                Calculates edge positions based on anchor point and updates all four vertices with
                proper offset application.
            </summary>
            <param name="w">Width of the sprite in world units</param>
            <param name="h">Height of the sprite in world units</param>
        </member>
        <member name="M:SpriteBase.SetSizeXZ(System.Single,System.Single)">
            <summary>
                Updates sprite vertices for XZ plane orientation (ground/ceiling sprite). Positions
                vertices in the horizontal plane with Y as the up axis.
            </summary>
            <param name="w">Width of the sprite in world units</param>
            <param name="h">Height (depth) of the sprite in world units</param>
        </member>
        <member name="M:SpriteBase.SetSizeYZ(System.Single,System.Single)">
            <summary>
                Updates sprite vertices for YZ plane orientation (wall sprite facing sideways).
                Positions vertices in the YZ plane with X as the normal direction.
            </summary>
            <param name="w">Width of the sprite in world units</param>
            <param name="h">Height of the sprite in world units</param>
        </member>
        <!-- Mesh Management Fields -->
        <member name="F:SpriteBase.colors">
            <summary>
                Array of 4 vertex colors for the sprite quad. All elements set to same color value
                by SetColor(). Allows per-vertex tinting if needed. Applied to mesh.colors for
                rendering.
            </summary>
        </member>
        <member name="F:SpriteBase.faces">
            <summary>
                Triangle indices array defining two triangles (6 indices) that form the sprite quad.
                Order determined by SetWindingOrder() - CCW uses [0,1,3,3,1,2] and CW uses
                [0,3,1,3,2,1].
            </summary>
        </member>
        <member name="F:SpriteBase.mesh">
            <summary>
                The dynamically created Mesh object for this sprite. Created in Init() with
                MarkDynamic() for frequent updates. Stores vertices, UVs, colors, and triangle data
                for rendering the sprite quad.
            </summary>
        </member>
        <member name="F:SpriteBase.meshFilter">
            <summary>
                Reference to the MeshFilter component attached to this GameObject. Initialized in
                Awake() and used to assign the dynamically created mesh. Required component for
                sprite rendering.
            </summary>
        </member>
        <member name="F:SpriteBase.meshRenderer">
            <summary>
                Reference to the MeshRenderer component attached to this GameObject. Initialized in
                Awake() and exposed via MeshRenderer property. Used to access material and texture
                information.
            </summary>
        </member>
        <member name="F:SpriteBase.normals">
            <summary>
                Optional array of vertex normals for lighting calculations. Only created when
                createNormals is true. All normals face backward (Vector3.back) for typical 2D
                sprite lighting.
            </summary>
        </member>
        <member name="F:SpriteBase.texture">
            <summary>
                Reference to the main texture used by this sprite. Retrieved from material's
                _MainTex property in Awake() and RecalcTexture(). Used for pixel-to-UV calculations
                and dimension calculations.
            </summary>
        </member>
        <member name="F:SpriteBase.uvs">
            <summary>
                Primary UV coordinates array for the 4 sprite vertices. Updated by UpdateUVs() based
                on uvRect and winding order. Defines which part of the texture maps to each vertex.
            </summary>
        </member>
        <member name="F:SpriteBase.uvs2">
            <summary>
                Secondary UV coordinates array for special effects. Set by SetUV2() to standard 0-1
                quad values regardless of primary UVs. Can be used by shaders for effects
                independent of texture mapping.
            </summary>
        </member>
        <member name="F:SpriteBase.vertices">
            <summary>
                Array of 4 vertices defining the sprite quad corners. Updated by SetSizeXY/XZ/YZ and
                RefreshVertices() methods. Order depends on winding setting. Applied to mesh for
                rendering.
            </summary>
        </member>
        <!-- UV Coordinate System Methods -->
        <member name="M:SpriteBase.CalcUVs">
            <summary>
                Virtual method for calculating UV coordinates. Base implementation is empty. Derived
                classes override this to implement specific UV calculation logic for different
                sprite types.
            </summary>
        </member>
        <member name="M:SpriteBase.PixelCoordToUVCoord(UnityEngine.Vector2)">
            <summary>
                Converts pixel coordinates to UV coordinates with Y-axis flipping for Unity's UV
                system. Unity UVs have origin at bottom-left while textures have origin at top-left.
            </summary>
            <param name="xy">Pixel coordinates to convert.</param>
            <returns>UV coordinates with flipped Y axis.</returns>
        </member>
        <member name="M:SpriteBase.PixelCoordToUVCoord(System.Int32,System.Int32)">
            <summary>
                Converts integer pixel coordinates to UV coordinates with Y-axis flipping for
                Unity's UV system.
            </summary>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>UV coordinates with flipped Y axis.</returns>
        </member>
        <member name="M:SpriteBase.PixelSpaceToUVSpace(UnityEngine.Vector2)">
            <summary>
                Converts pixel coordinates to UV space (0-1 range) based on texture dimensions.
            </summary>
            <param name="xy">Pixel coordinates to convert.</param>
            <returns>UV coordinates in 0-1 range, or Vector2.zero if no texture is assigned.</returns>
        </member>
        <member name="M:SpriteBase.PixelSpaceToUVSpace(System.Int32,System.Int32)">
            <summary>
                Converts integer pixel coordinates to UV space (0-1 range) based on texture
                dimensions.
            </summary>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>UV coordinates in 0-1 range.</returns>
        </member>
        <member name="M:SpriteBase.SetBleedCompensation">
            <summary>
                Applies the current bleed compensation values to adjust UV coordinates. Bleed
                compensation prevents texture bleeding by inset the UV rectangle.
            </summary>
        </member>
        <member name="M:SpriteBase.SetBleedCompensation(System.Single,System.Single)">
            <summary>
                Sets and applies bleed compensation with specified pixel values. Bleed compensation
                prevents texture bleeding at sprite edges.
            </summary>
            <param name="x">Horizontal bleed compensation in pixels.</param>
            <param name="y">Vertical bleed compensation in pixels.</param>
        </member>
        <member name="M:SpriteBase.SetBleedCompensation(UnityEngine.Vector2)">
            <summary>
                Sets and applies bleed compensation from a Vector2. Converts pixel values to UV
                space and insets the UV rectangle to prevent texture bleeding.
            </summary>
            <param name="xy">Bleed compensation values in pixels (x and y).</param>
        </member>
        <member name="M:SpriteBase.SetUV2">
            <summary>
                Sets secondary UV coordinates (UV2) for shader effects. Always uses normalized 0-1
                coordinates regardless of primary UV settings, useful for effects that need full
                texture coverage.
            </summary>
        </member>
        <member name="M:SpriteBase.SetUVs(UnityEngine.Rect)">
            <summary>
                Sets the UV rectangle for texture mapping. Applies bleed compensation and optionally
                recalculates size for pixel-perfect or auto-resize sprites.
            </summary>
            <param name="uv">The UV coordinate rectangle (0-1 range).</param>
        </member>
        <member name="M:SpriteBase.SetUVsFromPixelCoords(UnityEngine.Rect)">
            <summary>
                Sets UV coordinates from pixel coordinates on the texture. Converts pixel
                coordinates to UV space (0-1 range) and applies settings.
            </summary>
            <param name="pxCoords">Rectangle defining the sprite area in texture pixels.</param>
        </member>
        <member name="M:SpriteBase.UpdateUVs">
            <summary>
                Updates the UV coordinates of all four vertices based on current UV rectangle and
                winding order. Handles both clockwise and counter-clockwise winding to ensure proper
                texture display.
            </summary>
        </member>
        <!-- UV Coordinate System Fields -->
        <member name="F:SpriteBase.bleedCompensationUV">
            <summary>
                UV space inset calculated from bleedCompensation pixel values. Used internally by
                SetBleedCompensation() to adjust uvRect boundaries, preventing texture bleeding by
                moving UV coordinates inward from texture edges.
            </summary>
        </member>
        <member name="F:SpriteBase.bottomRight">
            <summary>
                Calculated bottom-right corner position of sprite in local space. Set by CalcEdges()
                based on sprite dimensions and anchor method. Used as reference point for vertex
                calculations in SetSize methods.
            </summary>
        </member>
        <member name="F:SpriteBase.pixelsPerUV">
            <summary>
                Stores the texture dimensions as pixels per UV unit. The x component contains the
                texture width in pixels and the y component contains the texture height. This value
                is automatically updated whenever the texture changes and is used to convert between
                pixel coordinates and UV coordinates during sprite rendering calculations.
            </summary>
        </member>
        <member name="F:SpriteBase.prevUVRect">
            <summary>
                Previous frame's UV rectangle used for auto-resize calculations. When autoResize is
                enabled, CalcSize() compares current uvRect to this value to proportionally scale
                sprite dimensions when UV region changes.
            </summary>
        </member>
        <member name="F:SpriteBase.topLeft">
            <summary>
                Calculated top-left corner position of sprite in local space. Set by CalcEdges()
                based on sprite dimensions and anchor method. Used as reference point for vertex
                calculations in SetSize methods.
            </summary>
        </member>
        <member name="F:SpriteBase.uvRect">
            <summary>
                Rectangle defining the texture coordinates for this sprite in UV space (0-1 range).
                Modified by SetUVs(), SetUVsFromPixelCoords(), and SetBleedCompensation(). Used by
                UpdateUVs() to set mesh UV coordinates.
            </summary>
        </member>
        <!-- Sprite Configuration Methods -->
        <member name="M:SpriteBase.SetAnchor(SpriteBase.ANCHOR_METHOD)">
            <summary>
                Sets the anchor point for sprite positioning. Determines which part of the sprite
                aligns with its transform position.
            </summary>
            <param name="a">The anchor method defining the alignment point.</param>
        </member>
        <member name="M:SpriteBase.SetCamera(UnityEngine.Camera)">
            <summary>
                Sets the camera reference for pixel-perfect calculations. Updates screen size from
                camera's pixel dimensions and recalculates sprite size to maintain pixel-perfect
                appearance.
            </summary>
            <param name="c">Camera to use for pixel-perfect calculations, returns immediately if null</param>
        </member>
        <member name="M:SpriteBase.SetOffset(UnityEngine.Vector3)">
            <summary>
                Sets an additional position offset applied to the sprite vertices. Useful for
                fine-tuning sprite positioning.
            </summary>
            <param name="o">The 3D offset to apply to sprite vertices.</param>
        </member>
        <member name="M:SpriteBase.SetPlane(SpriteBase.SPRITE_PLANE)">
            <summary>
                Sets the orientation plane for the sprite mesh (XY, XZ, or YZ). Rebuilds the mesh
                vertices for the new plane orientation.
            </summary>
            <param name="p">The sprite plane orientation to use.</param>
        </member>
        <member name="M:SpriteBase.SetWindingOrder(SpriteBase.WINDING_ORDER)">
            <summary>
                Sets the triangle winding order for the mesh faces. Clockwise (CW) renders the front
                face, counter-clockwise (CCW) renders the back face.
            </summary>
            <param name="order">The winding order to apply (CW or CCW).</param>
        </member>
        <!-- Sprite Configuration Fields -->
        <member name="F:SpriteBase.anchor">
            <summary>
                The anchor point determining sprite alignment with its transform position. Default
                is MIDDLE_CENTER for centered sprites.
            </summary>
        </member>
        <member name="F:SpriteBase.autoResize">
            <summary>
                Enables automatic sprite resizing when UV coordinates change. When true and UV rect
                changes, sprite dimensions are scaled proportionally to maintain the same aspect
                ratio as the texture region. Checked in CalcSize(), Copy(), and UV update methods.
            </summary>
        </member>
        <member name="F:SpriteBase.billboarded">
            <summary>
                Flag indicating if sprite should face the camera (billboard mode). Currently only
                set/cleared but not actively used in base implementation - likely utilized by
                derived classes or external systems.
            </summary>
        </member>
        <member name="F:SpriteBase.bleedCompensation">
            <summary>
                Pixel-based inset values to prevent texture bleeding at sprite edges. Applied to UV
                coordinates to slightly shrink the sampled area.
            </summary>
        </member>
        <member name="F:SpriteBase.color">
            <summary>
                Vertex color applied to all four sprite vertices for tinting. Defaults to white (no
                tint). Updated via SetColor() which applies this color to the colors array and mesh.
            </summary>
        </member>
        <member name="F:SpriteBase.createNormals">
            <summary>
                Controls whether mesh normals are generated. When true, creates a normals array with
                all vertices facing backward (Vector3.back) during Awake() and applies them during
                Init(). Used for sprites that need proper lighting.
            </summary>
        </member>
        <member name="F:SpriteBase.curCamera">
            <summary>
                Reference to the current camera used for pixel-perfect calculations. Set by
                SetCamera() method. Used to get orthographic size for converting between world units
                and screen pixels.
            </summary>
        </member>
        <member name="F:SpriteBase.height">
            <summary>
                The height of the sprite in world units. Used for mesh vertex calculation and
                size-based operations.
            </summary>
        </member>
        <member name="F:SpriteBase.offset">
            <summary>
                3D position offset applied to all sprite vertices. Added to calculated vertex
                positions in SetSizeXY/XZ/YZ methods to shift the entire sprite mesh. Can be updated
                via SetOffset() method.
            </summary>
        </member>
        <member name="F:SpriteBase.pixelPerfect">
            <summary>
                Enables pixel-perfect sprite rendering mode. When true, sprite dimensions are
                automatically calculated based on camera orthographic size and screen dimensions to
                ensure 1:1 pixel mapping. Used in Init(), CalcSize(), and throughout rendering
                pipeline.
            </summary>
        </member>
        <member name="F:SpriteBase.plane">
            <summary>
                The orientation plane for the sprite mesh. Determines whether the sprite is rendered
                on the XY (default 2D), XZ (ground), or YZ plane.
            </summary>
        </member>
        <member name="F:SpriteBase.screenSize">
            <summary>
                Static screen dimensions in pixels shared across all sprites. Updated by SetCamera()
                with camera's pixel width/height. Used in CalcSize() for pixel-perfect calculations
                with orthographic camera size.
            </summary>
        </member>
        <member name="F:SpriteBase.shearAmount">
            <summary>
                Horizontal shear factor for skewing sprite vertices. Applied to top vertices when
                RefreshVertices() is called, creating a parallelogram effect by offsetting the top
                edge horizontally by this amount multiplied by sprite width.
            </summary>
        </member>
        <member name="F:SpriteBase.skewAmount">
            <summary>
                Vertical skew factor for tilting sprite vertices. Applied when RefreshVertices() is
                called - subtracts from top-left vertex Y and adds to top-right vertex Y, creating a
                tilted appearance.
            </summary>
        </member>
        <member name="F:SpriteBase.width">
            <summary>
                The width of the sprite in world units. Used for mesh vertex calculation and
                size-based operations.
            </summary>
        </member>
        <member name="F:SpriteBase.winding">
            <summary>
                The triangle winding order for mesh faces. CW (clockwise) shows the front face, CCW
                (counter-clockwise) shows the back face. Default is CW.
            </summary>
        </member>
        <member name="F:SpriteBase.worldUnitsPerScreenPixel">
            <summary>
                The conversion factor between world units and screen pixels for pixel-perfect
                rendering. Calculated as (camera orthographic size * 2) / screen height when
                pixelPerfect is enabled. This value ensures sprites are rendered at exact pixel
                boundaries without filtering artifacts, maintaining the crisp pixel art aesthetic.
            </summary>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:SpriteBase.i">
            <summary>
                General purpose loop iterator variable. Used by derived classes as a temporary
                variable during various operations. Not used directly in SpriteBase but provided as
                a protected member for subclass convenience.
            </summary>
        </member>
        <member name="F:SpriteBase.tempUV">
            <summary>
                Temporary UV coordinate storage used during calculations. Used in CalcSize for
                auto-resize UV ratio calculations and in SetUVsFromPixelCoords for pixel-to-UV
                conversions. Avoids allocation of new Vector2 objects during frequent operations.
            </summary>
        </member>
    </members>
</doc>