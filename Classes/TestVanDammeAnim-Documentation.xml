<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:TestVanDammeAnim.AddBoxCollider">
            <summary>
                Adds or configures a BoxCollider component with character-specific collision
                dimensions. Sets different box sizes and centers for various enemy types (Xenomorph,
                FaceHugger, etc.) with default humanoid dimensions as fallback.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AddRigidbody">
            <summary>
                Adds or configures a Rigidbody component for physics simulation. Sets the rigidbody
                to kinematic mode with gravity disabled for manual physics control.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Awake">
            <summary>
                Unity lifecycle method that initializes TestVanDammeAnim. Sets up sprite systems,
                parachute functionality, collision layers, materials, and core physics components
                required for character operation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.FixedUpdate">
            <summary>
                Unity fixed update method that checks if the unit has exited oil areas at fixed
                intervals.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.LateUpdate">
            <summary>
                Unity lifecycle method for post-frame updates. Handles input bit preservation,
                inseminator unit synchronization, map disable area extension, and quicksand
                checking.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.OnDestroy">
            <summary>
                Unity lifecycle callback when the GameObject is destroyed. Calls base implementation
                for cleanup.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.OnDisable">
            <summary>
                Unity lifecycle callback when the component is disabled. Empty implementation for
                potential override.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.OnEnable">
            <summary>
                Unity lifecycle callback when the component is enabled. Empty implementation for
                potential override.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RegisterUnit">
            <summary>
                Registers this unit with the Map system for game tracking and management.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunSync">
            <summary>
                Network synchronization method that updates the unit's position. Calls base
                synchronization and updates the transform position based on current X/Y coordinates.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetDefaultGroundLayer">
            <summary>
                Sets up the default ground collision layer mask including Ground, LargeObjects, and
                IndestructibleGround layers for ground detection and collision checking.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetDeltaTime">
            <summary>
                Updates the frame delta time with clamping to prevent large time steps. Stores
                previous frame time and clamps current time to maximum of 0.0334 seconds.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetHighFiveBoostDeltaTime">
            <summary>
                Sets modified delta time during high-five boost effects. Applies different time
                multipliers based on time scale and special boost conditions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetStrictGroundLayer">
            <summary>
                Sets up a strict ground collision layer mask including only Ground and
                IndestructibleGround layers, excluding LargeObjects for more restrictive ground
                detection.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Start">
            <summary>
                Unity lifecycle method that handles game mode-specific initialization. Configures
                special ammo based on game mode (deathmatch, procedural generation, campaign), sets
                up sound system, avatar states, and initial invulnerability.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Update">
            <summary>
                Core Unity lifecycle method that executes the main update loop for TestVanDammeAnim
                each frame. Processes essential character systems in this execution order: 1. **Acid
                coverage effects** - Visual and damage processing for acid-covered characters 2.
                **Delta time management** - Frame timing with high-five boost support 3. **Input
                processing** - Handle player input or trigger action control 4. **Status effect
                timers** - Stun, freeze, zombie revival, and death counters 5. **Animation frame
                management** - Sprite frame advancement and timing 6. **Movement calculation and
                execution** - Core physics and movement processing 7. **Special movement states** -
                Impaled, strung-up, or platform movement 8. **Combat systems** - Weapon management,
                firing, and melee processing 9. **Hero-specific systems** - Checkpoints, rescues,
                enemy alerting, item pickup 10. **Invulnerability management** - Temporary
                invincibility and revival timing 11. **Alien infection system** - Insemination
                mechanics and chest-bursting 12. **Environmental effects** - Ducking, grass
                interaction, boundary checks 13. **Audio and visual effects** - Wall dragging
                sounds, trails, freeze shaders 14. **Player management** - Kick system and recall
                mechanics 15. **Parachute system** - Deployment timing and physics modification This
                method coordinates all core character functionality and represents the main
                execution loop for character behavior.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:TestVanDammeAnim.CancelMelee">
            <summary>
                Cleanly exits melee state and resets all melee-related variables. Clears all melee
                flags, removes target reference, and intelligently determines next action state
                based on current conditions (preserves ladder climbing, sets jumping if airborne,
                running if moving, or idle).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckBustCage">
            <summary>
                Checks if there's a cage in front of the player that can be broken. Performs a
                raycast within 16 units to detect cage components.
            </summary>
            <returns>True if a cage is found that can be busted, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CheckPlasmaDeath(System.Single@,System.Single@)">
            <summary>
                Handles special plasma/vaporization death effects when plasma damage is 1 or
                greater. Creates white flash effects and for explosion damage types, generates area
                damage and smoke effects while shaking the camera and disturbing nearby wildlife.
                Returns true if plasma death occurred.
            </summary>
            <param name="xGibI">Reference to horizontal gib velocity, modified for plasma deaths</param>
            <param name="yGibI">Reference to vertical gib velocity, modified for plasma deaths</param>
            <returns>True if plasma death effects were triggered, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CreateGibEffects(DamageType,System.Single,System.Single)">
            <summary>
                Creates appropriate visual effects when the character is gibbed based on damage
                type. Crush damage creates a spread pattern, OutOfBounds uses larger spread, and
                BittenBySandworm creates directional effects. Generates frozen particles if the
                character was frozen, plays gib sounds, and sprays blood effects.
            </summary>
            <param name="damageType">Type of damage determining the gib effect pattern</param>
            <param name="xI">Base horizontal velocity for effects</param>
            <param name="yI">Base vertical velocity for effects</param>
        </member>
        <member name="M:TestVanDammeAnim.CreateGibs(System.Single,System.Single)">
            <summary>
                Default gib creation method that generates standard gib pieces with velocity. Uses
                the character's material for gib textures and applies an upward bias to gib velocity
                for more dramatic effect.
            </summary>
            <param name="xI">Horizontal velocity for gib pieces</param>
            <param name="yI">Vertical velocity for gib pieces</param>
        </member>
        <member name="M:TestVanDammeAnim.Damage(System.Int32,DamageType,System.Single,System.Single,System.Int32,UnityEngine.MonoBehaviour,System.Single,System.Single)">
            <summary>
                Core damage handling method that processes all incoming damage to the character.
                Handles special cases like inseminator unit redirection, parachute destruction
                (grants 1.33s invulnerability), instant-gib damage types, acid coverage, skeleton
                creation, and damage reduction based on game mode. Creates appropriate visual
                effects (blood, impact effects) and manages death state including revival mechanics.
                Triggers death sequence if health drops below zero.
            </summary>
            <param name="damage">Amount of damage to apply</param>
            <param name="damageType">Type of damage being applied (affects reactions and effects)</param>
            <param name="xI">Horizontal impulse force from damage</param>
            <param name="yI">Vertical impulse force from damage</param>
            <param name="direction">Direction of incoming damage (-1 left, 1 right)</param>
            <param name="damageSender">The MonoBehaviour that caused the damage (for kill tracking)</param>
            <param name="hitX">X coordinate where damage was applied</param>
            <param name="hitY">Y coordinate where damage was applied</param>
        </member>
        <member name="M:TestVanDammeAnim.DealWithBounce(DamageType@,System.Int32@)">
            <summary>
                Handles bounce damage differently based on whether the unit is a player or enemy.
                For players in non-competitive modes, nullifies all damage and applies a 0.25 second
                blind effect instead. For enemies or players in DeathMatch/BroDown modes, changes
                the damage type to Crush.
            </summary>
            <param name="damageType">Reference to the damage type, may be changed to Crush</param>
            <param name="damage">Reference to the damage amount, set to 0 for players in non-competitive modes</param>
        </member>
        <member name="M:TestVanDammeAnim.Death(System.Single,System.Single,DamageObject)">
            <summary>
                Handles the complete character death sequence. Cancels active melee attacks,
                deactivates parachute, stops network syncing, clears revival sources, stops player
                UI bubbles, reports kills for scoring, reduces lives if applicable, applies death
                velocity modifications, deactivates weapons, creates blood effects, releases held
                objects, disables collision, and saves death GIFs for player characters. This is the
                main death orchestration method.
            </summary>
            <param name="xI">Horizontal velocity to apply on death</param>
            <param name="yI">Vertical velocity to apply on death</param>
            <param name="damage">DamageObject containing information about what killed the character</param>
        </member>
        <member name="M:TestVanDammeAnim.DestroyRemoteProjectile">
            <summary>
                Destroys a remotely controlled projectile. Clears controlling flag and calls Death()
                on the projectile.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.FallDamage(System.Single)">
            <summary>
                Virtual method for handling fall damage based on fall velocity. Empty implementation
                for subclasses to calculate and apply fall damage.
            </summary>
            <param name="yI">The vertical velocity at impact</param>
        </member>
        <member name="M:TestVanDammeAnim.FindNearbyMook">
            <summary>
                Searches for a nearby mook that can be interacted with. Prioritizes skinned mook on
                the player's back, otherwise searches for mooks within 30 unit radius behind the
                player.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.FireWeapon(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Fires weapon projectile at specified position and velocity. Sets gun animation
                frame, creates muzzle flash, spawns projectile, and triggers fire events.
            </summary>
            <param name="x">X position for projectile spawn</param>
            <param name="y">Y position for projectile spawn</param>
            <param name="xSpeed">X velocity for projectile</param>
            <param name="ySpeed">Y velocity for projectile</param>
        </member>
        <member name="M:TestVanDammeAnim.Gib(DamageType,System.Single,System.Single)">
            <summary>
                Destroys the character into gibs (gore pieces) if gibbing is allowed. Releases held
                objects, sets appropriate death type, creates gib visual effects, sends network RPC
                to synchronize gibbing, saves death GIFs for heroes, handles special plasma death
                effects, and disconnects any attached face huggers.
            </summary>
            <param name="damageType">Type of damage that caused the gibbing</param>
            <param name="xI">Horizontal velocity for gib pieces</param>
            <param name="yI">Vertical velocity for gib pieces</param>
        </member>
        <member name="M:TestVanDammeAnim.GibRPC(DamageType,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Network RPC handler for synchronizing gibbing across all connected players. Updates
                the character position for out-of-bounds deaths and calls the local Gib method to
                ensure consistent visual effects across the network.
            </summary>
            <param name="damageType">Type of damage that caused the gibbing</param>
            <param name="xI">Horizontal velocity for gib pieces</param>
            <param name="yI">Vertical velocity for gib pieces</param>
            <param name="_x">X position for out-of-bounds gibbing</param>
            <param name="_y">Y position for out-of-bounds gibbing</param>
        </member>
        <member name="M:TestVanDammeAnim.IsLockedInMelee">
            <summary>
                Checks if character is locked in melee animation. Used to prevent other actions
                during melee attacks.
            </summary>
            <returns>True if doing melee and cannot do independent animations, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.Knock(DamageType,System.Single,System.Single,System.Boolean)">
            <summary>
                Applies knockback force to the character from damage or explosions. Clears any
                impalement state and ignores knockback if frozen. Applies half the horizontal
                knockback force and uses different vertical limits for heroes (300) versus enemies
                (400). Automatically deactivates parachute if knocked upward.
            </summary>
            <param name="damageType">Type of damage causing the knockback</param>
            <param name="xI">Horizontal knockback force (half is applied)</param>
            <param name="yI">Vertical knockback force</param>
            <param name="forceTumble">Whether to force the character into a tumbling state (currently unused)</param>
        </member>
        <member name="M:TestVanDammeAnim.KnockSimple(DamageObject)">
            <summary>
                Simplified knockback method using a DamageObject for consistent force application.
                Ignores knockback if frozen and applies blast forces with the same velocity clamping
                as SetVelocity method.
            </summary>
            <param name="damageObject">DamageObject containing knockback force information</param>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseAlien(Mook,System.Single,System.Single,System.Boolean,System.Int32)">
            <summary>
                RPC method that handles alien release from chest bursting. Applies fire damage to
                spawned alien if specified.
            </summary>
            <param name="newAlien">The alien unit being released</param>
            <param name="xI">X velocity for alien spawn</param>
            <param name="yI">Y velocity for alien spawn</param>
            <param name="onFire">Whether the alien should be set on fire</param>
            <param name="seenPlayer">Index of player that witnessed the spawn</param>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseGrenadeRPC(Grenade,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                RPC method for releasing grenades across network. Handles grenade physics and
                positioning.
            </summary>
            <param name="GrenadeToRelease">Grenade object to release</param>
            <param name="XI">X velocity for grenade</param>
            <param name="YI">Y velocity for grenade</param>
            <param name="X">X position for grenade release</param>
            <param name="Y">Y position for grenade release</param>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseHeldObject(System.Boolean)">
            <summary>
                Releases currently held object (grenade or mook) with appropriate physics and
                networking. Handles both throwing and dropping scenarios.
            </summary>
            <param name="thrown">Whether object is being thrown (true) or dropped (false)</param>
        </member>
        <member name="M:TestVanDammeAnim.RunFiring">
            <summary>
                Main firing logic update that manages fire rate, delays, and weapon usage. Stops
                rolling when firing, handles fire counter and rate modifications, triggers the
                UseFire method, applies avatar effects, and clears gesture animations during combat.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunIndependentMeleeFrames">
            <summary>
                Virtual method for handling melee animation frames independently from main
                animation. Allows subclasses to implement custom melee animation logic.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunKnifeMeleeMovement">
            <summary>
                Handles movement physics during knife melee attacks with three distinct patterns.
                Old system applies simple gravity. Jumping melee applies falling gravity with speed
                clamping. Dashing melee uses frame-based movement: frames 0-1 stop movement, frames
                2-3 dash horizontally (with target tracking if available), frames 4-5 reduce speed,
                frames 6+ apply only gravity. Quicksand disables horizontal movement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunMelee">
            <summary>
                Executes melee attack behavior by delegating to RunKnifeMeleeMovement. Acts as the
                entry point for melee execution.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetMeleeType">
            <summary>
                Determines the type of melee attack (standing, jumping, or dashing) based on current
                character state. When using new knifing frames, checks if jumping, moving
                horizontally, or on ladder to set appropriate melee type.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetVelocity(DamageType,System.Single,System.Single,System.Single)">
            <summary>
                Sets character velocity from damage or explosion forces, adding to existing velocity
                rather than replacing it. Clamps horizontal velocity to ±200 and vertical velocity
                between -20000 and 300 to prevent excessive speeds.
            </summary>
            <param name="damageType">Type of damage causing the velocity change</param>
            <param name="xI">Horizontal velocity to add</param>
            <param name="xIBlast">Additional horizontal blast force (currently same as xI)</param>
            <param name="yIBlast">Vertical blast force to add</param>
        </member>
        <member name="M:TestVanDammeAnim.SetupThrownMookVelocity(System.Single@,System.Single@)">
            <summary>
                Calculates output velocity for thrown mook objects. Sets X velocity to 210 units in
                facing direction plus 20% of current momentum, and Y velocity to 120 units upward
                plus 30% of current vertical momentum.
            </summary>
            <param name="XI">Output X velocity for thrown mook</param>
            <param name="YI">Output Y velocity for thrown mook</param>
        </member>
        <member name="M:TestVanDammeAnim.SpawnPrimaryProjectile(Projectile,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Spawns primary weapon projectile using the ProjectileController system with
                specified parameters.
            </summary>
            <param name="projectilePrefab">Projectile prefab to spawn</param>
            <param name="x">X position for projectile spawn</param>
            <param name="y">Y position for projectile spawn</param>
            <param name="xSpeed">X velocity for projectile</param>
            <param name="ySpeed">Y velocity for projectile</param>
            <returns>Spawned Projectile instance</returns>
        </member>
        <member name="M:TestVanDammeAnim.StartFiring">
            <summary>
                Initiates firing with rate control. Sets the fire counter based on fire rate: uses
                fireRate value for fast firing (rate &lt; 0.3f) or 0 for slower rates.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StartMelee">
            <summary>
                Virtual method for initiating melee attacks. Empty implementation serves as an
                override point for subclasses to implement melee attack logic.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopFiring">
            <summary>
                Virtual method placeholder for stopping fire action. Empty in base class, allows
                subclasses to implement fire stopping behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ThrowBackGrenade(Grenade)">
            <summary>
                Picks up and prepares to throw a grenade. Disables the grenade, parents it to the
                player, handles achievement tracking for player-thrown grenades, plays throw sound,
                and initiates throwing animation.
            </summary>
            <param name="grenade">The grenade object to pick up and throw</param>
        </member>
        <member name="M:TestVanDammeAnim.ThrowBackMook(Mook)">
            <summary>
                Picks up and prepares to throw a mook enemy. Sets the mook as being thrown, parents
                it to the player, plays heavy throw sound, and starts throwing animation with
                appropriate frame.
            </summary>
            <param name="mook">The mook object to pick up and throw</param>
        </member>
        <member name="M:TestVanDammeAnim.ThrowGrenade(Grenade,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Executes grenade throwing mechanics with specified position and velocity parameters.
            </summary>
            <param name="GrenadeToThrow">Grenade object to throw</param>
            <param name="XI">X velocity for grenade trajectory</param>
            <param name="YI">Y velocity for grenade trajectory</param>
            <param name="X">X position for grenade release</param>
            <param name="Y">Y position for grenade release</param>
        </member>
        <member name="M:TestVanDammeAnim.TriggerBroFireEvent">
            <summary>
                Triggers perk system fire event for hero characters to activate fire-related perks
                and bonuses.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TriggerBroMeleeEvent">
            <summary>
                Triggers perk system melee event for hero characters to activate melee-related perks
                and bonuses.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TriggerBroSpecialEvent">
            <summary>
                Triggers perk system special ability event for hero characters to activate
                special-related perks and bonuses.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseFire">
            <summary>
                Executes primary weapon firing sequence. Cancels melee if active, calculates
                projectile trajectory, spawns projectile, plays attack sound, and disturbs wildlife.
            </summary>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:TestVanDammeAnim._invulnerableTime">
            <summary>
                Remaining duration of invulnerability in seconds. Decremented each frame, providing
                temporary damage immunity. Commonly set after spawning (3 seconds) or parachute
                destruction (1.33 seconds). Visual feedback provided through flashing effect.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.addedDeathMatchScore">
            <summary>
                Flag preventing duplicate score additions in deathmatch game modes. Set to true
                after death score is recorded to ensure each death only counts once. Reset when the
                unit respawns for the next life.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canDoIndependentMeleeAnimation">
            <summary>
                Allows melee animations to play independently from movement animations. When true,
                melee attacks don't interrupt movement animations. Used by characters like
                IndianaBrones.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canGib">
            <summary>
                Determines if this character can be gibbed (exploded into pieces) when killed.
                Default true allows normal gibbing on death. Set to false for characters that should
                have death animations instead of exploding. Checked during death processing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.cancelMeleeOnChangeDirection">
            <summary>
                Stops melee attack when the character changes facing direction. Used by characters
                with directional melee attacks to ensure attacks match the intended direction.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dashingMelee">
            <summary>
                Indicates the character is performing a melee attack while dashing. Set by
                SetMeleeType() when dashing, triggers special dash-melee animations and damage
                values.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.deadTimeCounter">
            <summary>
                Timer tracking how long the unit has been dead. Incremented each frame after death.
                Used for delayed effects like late gibbing, corpse removal, or preventing revival
                after extended death duration.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.disembowelHoldFrames">
            <summary>
                Frame counter for chainsaw disembowelment death animation. When greater than zero,
                holds the death animation at the current frame to show prolonged chainsaw damage.
                Creates dramatic pause during brutal chainsaw deaths.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.doingMelee">
            <summary>
                Indicates the character is currently performing a melee attack. Affects animation
                states and prevents certain other actions while active. Cleared when the melee
                attack completes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.fireCounter">
            <summary>
                Accumulates time to control automatic firing rate. When this counter exceeds
                fireRate, a shot is fired and the counter is decremented by fireRate. Initialized to
                0.0667 to ensure immediate first shot capability.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.fireDelay">
            <summary>
                Delay in seconds before firing can begin. Prevents immediate firing in certain
                situations such as after spawning or switching weapons.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.fireRate">
            <summary>
                Time interval between automatic weapon shots in seconds. Default value of 0.0334
                provides approximately 30 shots per second. Can be modified by power-ups through
                ValueOrchestrator.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.firedWhileInvulnerable">
            <summary>
                Tracks if the player fired weapons during invulnerability period. When true,
                immediately cancels invulnerability as a penalty for aggressive play during spawn
                protection. Encourages defensive play after respawning.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gibThreshold">
            <summary>
                Health threshold below which the unit will gib instead of playing death animation
                (default -10). When health drops below this value from damage, the unit explodes
                into pieces. More negative values require more overkill damage to trigger gibbing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gibs">
            <summary>
                Reference to the GibHolder containing gore particle prefabs for this character. Used
                when the unit is gibbed to spawn appropriate blood and body part effects. Each
                character can have unique gib sets for visual variety.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hasPlayedMissSound">
            <summary>
                Prevents multiple miss sound effects from playing for a single melee attack. Reset
                when canceling melee or starting a new attack.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heroThatKilledMeIndex">
            <summary>
                Player index of the hero that killed this unit (default -1 for no killer). Used for
                respawn positioning to place the unit near their killer. Also used for kill
                attribution in statistics and scoring systems.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.iDiedAtPosition">
            <summary>
                World position where this unit died (default Vector3.zero). Stored for respawn
                calculations and death statistics. Used with heroThatKilledMeIndex to determine
                optimal respawn location near the action.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledByChainSaw">
            <summary>
                Indicates if character is impaled by a chainsaw. Field is declared but not used in
                TestVanDammeAnim.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impalementCollider">
            <summary>
                GameObject reference to the collider used for impalement mechanics. Destroyed when
                cleanup is needed to prevent physics conflicts. Handles collision detection for
                impalement death scenarios.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.jumpingMelee">
            <summary>
                Indicates the character is performing a melee attack while jumping or airborne. Set
                by SetMeleeType() based on action state, determines aerial melee animations and
                physics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastAlertTime">
            <summary>
                Tracks when the character last alerted nearby enemies. Prevents alert spam with
                minimum 0.07 seconds between alerts. Only alerts when character is alive and not in
                stealth mode.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meleeChosenUnit">
            <summary>
                Stores the target unit for melee attacks. Set when a valid melee target is found
                nearby and used to calculate movement toward the target during the melee animation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meleeFollowUp">
            <summary>
                Indicates whether a melee combo or follow-up attack is allowed. Set to false in
                CancelMelee(), checked with dashingMelee to control combo behavior.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meleeHasHit">
            <summary>
                Tracks whether the current melee attack has successfully connected with a target.
                Prevents multiple damage applications from a single melee attack.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.projectileTime">
            <summary>
                Timestamp preventing immediate detonation of remote projectiles after firing. Set to
                Time.time when firing remote explosives. Prevents accidental self-destruction by
                requiring 0.56 seconds to elapse before detonation is allowed.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.remoteCar">
            <summary>
                Reference to a remote control car currently being controlled by this character. When
                set, player input controls the car instead of the character. Provides reference for
                remote vehicle mechanics. Cleared when car is destroyed or control ends.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.remoteProjectile">
            <summary>
                Reference to a projectile currently under remote control by this character. When
                set, character can detonate or guide the projectile. Cleared when projectile is
                destroyed or control is released. Used for remote-controlled explosives gameplay.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.skinnedMookOnMyBack">
            <summary>
                Reference to a skinned mook attached to the character's back. When set (not null),
                reduces horizontal movement speed by 5% (multiplies by 0.95).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.specialCounter">
            <summary>
                Controls timing for special ability usage. Similar to fireCounter but for special
                attacks. Initialized to 0.0667 seconds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.standingMelee">
            <summary>
                Indicates the character is performing a melee attack while standing or grounded. Set
                by SetMeleeType() based on action state, determines ground melee animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.willComeBackToLife">
            <summary>
                Indicates this unit will resurrect after death. When true, displays a halo effect
                above the corpse and prevents certain death cleanup operations. The resurrection
                occurs after willComebackToLifeTime expires.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.willComebackToLifeTime">
            <summary>
                Countdown timer in seconds until resurrection occurs. Set when unit dies with
                willComeBackToLife active. Decremented each frame while dead, triggering
                resurrection and full health restoration when reaching zero.
            </summary>
        </member>
        <!-- Special Abilities Methods -->
        <member name="M:TestVanDammeAnim.AddSpecialAmmo">
            <summary>
                Increases special ammunition by 1 if below maximum capacity and updates the
                HeroController with the new value.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AirDashDown">
            <summary>
                Initiates a downward slam air dash with an extended duration (5x normal), starting
                with a slight upward movement before transitioning to a powerful downward motion.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AirDashLeft">
            <summary>
                Initiates a leftward air dash with a two-phase execution: a charge-up delay followed
                by the actual dash. The dash grants brief invulnerability and enables downward
                dashing afterwards.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AirDashRight">
            <summary>
                Initiates a rightward air dash with a two-phase execution: a charge-up delay
                followed by the actual dash. The dash grants brief invulnerability and enables
                downward dashing afterwards.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AirDashUp">
            <summary>
                Performs an instant upward air dash without charge-up delay, launching the character
                upward with 150% jump force for a shorter duration than horizontal dashes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Airdash(System.Boolean)">
            <summary>
                Main air dash input handler that checks directional inputs and availability, then
                calls the appropriate directional dash method. Processes dashes in priority order:
                Right, Left, Down, Up.
            </summary>
            <param name="highFived">If true, allows horizontal dashes without requiring fresh directional input.</param>
        </member>
        <member name="M:TestVanDammeAnim.CanUseJetpack">
            <summary>
                Checks if the hero can use jetpack abilities. Base implementation returns false,
                override for jetpack-enabled heroes.
            </summary>
            <returns>True if jetpack can be used</returns>
        </member>
        <member name="M:TestVanDammeAnim.GetRemoteControlCar">
            <summary>
                Creates and assigns a remote control car to this unit. Only executes for the owning
                player, sets up networking RPCs for control. Applies initial knockback and sets fire
                delay to prevent immediate use.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.GetSpecialAmmo">
            <summary>
                Gets the current special ammunition count for this character.
            </summary>
            <returns>Current special ammunition amount</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsAmmoFull">
            <summary>
                Checks if special ammunition is at maximum capacity compared to the original special
                ammo limit.
            </summary>
            <returns>True if ammunition is at maximum, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.MustUsePockettedSpecialAmmo">
            <summary>
                Checks if pocketed special ammo must be used. Base implementation returns false,
                designed for override by characters with special ammo requirements.
            </summary>
            <returns>False in base implementation, can be overridden to return true when special ammo must be used</returns>
        </member>
        <member name="M:TestVanDammeAnim.PickupPockettableAmmo(PockettedSpecialAmmoType)">
            <summary>
                Handles picking up pocketable special ammunition. Virtual method intended for
                override by specific character implementations.
            </summary>
            <param name="ammoType">Type of pocketable ammo being picked up</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayAidDashSound">
            <summary>
                Virtual method for playing the air dash execution sound effect. Empty in base class,
                intended for override in derived classes. Note: Method name contains typo ("Aid"
                instead of "Air").
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayAirDashChargeUpSound">
            <summary>
                Virtual method for playing the air dash charge-up sound effect. Empty in base class,
                intended for override in derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ResetSpecialAmmo">
            <summary>
                Resets special ammunition to the original maximum amount and updates the
                HeroController with the new value.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunAirDashing">
            <summary>
                Central air dash controller that manages dash execution based on direction.
                Delegates to specific directional dash methods, counts down dash timer, and clamps
                velocities to normal ranges when dash completes. Special handling for upward dashes
                limits velocity to 80% jump force.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunDownwardDash">
            <summary>
                Executes downward slam dash with accelerating descent. Uses complex velocity
                calculation that accelerates downward movement, triggers sound and visual effects
                when reaching -50 velocity threshold, and clamps final velocity between 1.25x max
                fall speed and 300 units.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunLeftAirDash">
            <summary>
                Executes leftward air dash with two-phase implementation. Delay phase: stops
                vertical movement and adds slight rightward anticipation movement. Dash phase:
                triggers animation change, plays dash sound, creates rightward poof effect, and
                calls SetAirDashLeftSpeed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunRightAirDash">
            <summary>
                Executes rightward air dash with two-phase implementation. Delay phase: stops
                vertical movement and adds slight leftward anticipation movement. Dash phase:
                triggers animation change, plays dash sound, creates rightward poof effect, and
                calls SetAirDashRightSpeed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunUpwardDash">
            <summary>
                Executes upward air dash immediately without delay phase. Resets jump timer, applies
                150% jump force for strong upward boost, and zeroes horizontal movement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetAirDashLeftSpeed">
            <summary>
                Sets velocity for leftward air dash execution. Zeroes vertical movement and sets
                horizontal velocity to -2.3x normal speed for fast leftward movement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetAirDashRightSpeed">
            <summary>
                Sets velocity for rightward air dash execution. Zeroes vertical movement and sets
                horizontal velocity to 2.3x normal speed for fast rightward movement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetAirdashAvailable">
            <summary>
                Resets all directional air dash availability flags to true, allowing the character
                to perform air dashes in all directions again.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetHeldObjectPos(System.Single,System.Single)">
            <summary>
                Positions held objects (grenades/mooks) relative to character with specified offset
                coordinates.
            </summary>
            <param name="xOffset">X offset from character position</param>
            <param name="yOffset">Y offset from character position</param>
        </member>
        <member name="M:TestVanDammeAnim.SetRemoteProjectile(Projectile)">
            <summary>
                Associates a remote-controlled projectile with this unit. Updates projectile time
                tracking and stores the projectile reference.
            </summary>
            <param name="p">The projectile to be remotely controlled</param>
        </member>
        <member name="M:TestVanDammeAnim.SetSpecialAmmoRPC(System.Int32)">
            <summary>
                Sets special ammunition amount via RPC for network synchronization and updates the
                HeroController.
            </summary>
            <param name="ammo">Amount of special ammunition to set</param>
        </member>
        <member name="M:TestVanDammeAnim.StartPockettedSpecial">
            <summary>
                Virtual method for initiating pocketed special ability. Empty in base class,
                designed for character-specific overrides to implement special weapon usage.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseJetpack">
            <summary>
                Activates jetpack thrust for vertical movement. Virtual method intended for override
                by jetpack-equipped heroes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UsePockettedSpecial">
            <summary>
                Virtual method for using pocketed special abilities. Resets facing direction and can
                be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseSpecial">
            <summary>
                Uses special ability (grenade throwing). Consumes special ammo, spawns grenade
                projectile with position-based trajectory, or flashes ammo indicator if depleted.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseSteroidsNetworked">
            <summary>
                Activates steroid power-up effects across the network. Virtual method intended for
                override by heroes with steroid abilities.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseSteroidsNetworkedForDuration(System.Single)">
            <summary>
                Activates steroid power-up effects for a specific duration across the network.
                Virtual method intended for override by heroes with timed steroid abilities.
            </summary>
            <param name="duration">Duration of the steroid effect in seconds</param>
        </member>
        <!-- Special Abilities Properties -->
        <member name="P:TestVanDammeAnim.SpecialAmmo">
            <summary>
                Gets or sets the current special ammunition count. Setting this property
                synchronizes the value across all clients when the unit is owned by the local
                player.
            </summary>
        </member>
        <!-- Special Abilities Fields -->
        <member name="F:TestVanDammeAnim._specialAmmo">
            <summary>
                Current special ammunition count (backing field for SpecialAmmo property). Changes
                to this value are synchronized across the network via RPC calls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.originalSpecialAmmo">
            <summary>
                Default and maximum special ammunition capacity. Typically set to 3 but can be
                overridden (e.g., 6 for certain game modes). Used to initialize special ammo on
                spawn and check if ammo is full.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pressSpecialFacingDirection">
            <summary>
                Stores the character's facing direction when a special ability is activated. Used to
                lock facing direction during special abilities when turnAroundWhhileUsingSpecials is
                false. Reset when actions complete.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.specialGrenade">
            <summary>
                Reference to the grenade prefab spawned when using special abilities. Different
                throwing trajectories are used based on whether the character is ducking or
                standing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.turnAroundWhhileUsingSpecials">
            <summary>
                Controls whether the character can change facing direction while using special
                abilities. When false, the character's facing is locked to the direction they were
                facing when the special was activated. Defaults to true.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usingPockettedSpecial">
            <summary>
                Indicates the character is using a stored or pocketed special ability. Often set and
                cleared together with the main usingSpecial flag and affects animation states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usingSpecial">
            <summary>
                Indicates the character is currently performing a special ability animation. Set
                true when special is pressed, false when animation completes or is interrupted by
                acid/remote control. Takes priority in animation selection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usingSpecial2">
            <summary>
                Secondary special ability input state, primarily used by AI enemies. Checked as part
                of the IsUsingSpecial condition for determining if any special ability is active.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usingSpecial3">
            <summary>
                Tertiary special ability input state, primarily used by AI enemies. Part of the
                multi-special ability system that allows AI to have different special attacks.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usingSpecial4">
            <summary>
                Quaternary special ability input state, primarily used by AI enemies. Provides a
                fourth special ability option for complex AI behavior patterns.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasUsingSpecial">
            <summary>
                Previous frame's primary special ability state. Used for edge detection to determine
                when special abilities are first activated.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasUsingSpecial2">
            <summary>
                Previous frame's secondary special ability state. Used for edge detection of AI
                special ability inputs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasUsingSpecial3">
            <summary>
                Previous frame's tertiary special ability state. Used for edge detection of AI
                special ability inputs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasUsingSpecial4">
            <summary>
                Previous frame's quaternary special ability state. Used for edge detection to
                trigger AI special abilities on button press.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:TestVanDammeAnim.AddParentedDiff(System.Single,System.Single)">
            <summary>
                Adds positional differences to the character's coordinates. Only applies differences
                if the unit is owned locally or synchronization is disabled.
            </summary>
            <param name="xDiff">The horizontal position difference to apply.</param>
            <param name="yDiff">The vertical position difference to apply.</param>
        </member>
        <member name="M:TestVanDammeAnim.AddSpeedLeft">
            <summary>
                Accelerates the character leftward with speed limits and multipliers based on
                movement state. Base acceleration is 2x, dashing provides 4x, and parachute reduces
                speed by 50%. Includes an extra 2.6x boost when below maximum speed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AddSpeedRight">
            <summary>
                Accelerates the character rightward with speed limits and multipliers based on
                movement state. Base acceleration is 2x, dashing provides 4x, and parachute reduces
                speed by 50%. Includes an extra 2.6x boost when below maximum speed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AirJump">
            <summary>
                Virtual method placeholder for air jump/double jump mechanics. Empty in base class,
                allows subclasses to implement air jumping behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ApplyFallingGravity">
            <summary>
                Applies gravity based on character state. Skips gravity during chimney flips when
                constrained or while climbing ladders. Applies specialized gravity for parachute
                (17% when falling, 33% when rising, plus horizontal damping), quicksand, or normal
                conditions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ApplyNormalGravity">
            <summary>
                Applies standard gravity with modifiers for fluid submersion and high-five boost
                effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ApplyQuicksandGravity">
            <summary>
                Applies special gravity behavior in quicksand. Clamps Y velocity between -80 and 50,
                then smoothly transitions velocity toward -2 units/sec for alive characters or -1
                unit/sec for dead characters.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AssignGroundTransform(UnityEngine.Transform)">
            <summary>
                Assigns and tracks the transform of the ground or platform the character is standing
                on. Stores local position offset for proper movement synchronization with moving
                platforms. Handles special notifications for blocks when being stood on.
            </summary>
            <param name="gTransform">The ground transform to assign as the current standing surface</param>
        </member>
        <member name="M:TestVanDammeAnim.AssignParentedPos">
            <summary>
                Stores the current position relative to the parent transform for tracking movement
                between frames.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AssignWallTransform(UnityEngine.Transform)">
            <summary>
                Assigns the wall transform for wall climbing mechanics. Stores the wall reference
                and calculates the character's local position relative to the wall for proper
                climbing movement.
            </summary>
            <param name="wTransform">The wall transform to assign for climbing</param>
        </member>
        <member name="M:TestVanDammeAnim.AttachToZipline(ZipLine)">
            <summary>
                Attaches character to zipline for transportation. Sets zipline state and disables
                normal movement controls.
            </summary>
            <param name="zipLine">ZipLine object to attach to</param>
        </member>
        <member name="M:TestVanDammeAnim.CalculateCollumnRowFromTransform">
            <summary>
                Updates the unit's grid position based on its transform position. Sets X and Y from
                transform and recalculates grid coordinates.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateGridPosition">
            <summary>
                Converts world position to grid coordinates for tile-based game mechanics. Updates
                the character's row and column values based on 16-unit grid size.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateGroundHeight">
            <summary>
                Updates the ground height for the character by calling GetGroundHeightGround to
                perform ground detection calculations.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateMovement">
            <summary>
                Core movement calculation method that processes all character input and physics.
                Handles wind effects, sandstorm damage, firing input, dash detection, directional
                movement with double-tap dash triggers, air dashes during high-five holds, action
                state transitions, edge slip prevention, down input processing with parachute
                deactivation, and comprehensive jump mechanics including wall jumps, quicksand
                jumps, wall climbing initiation, and air jump grace periods.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CanAirDash(DirectionEnum)">
            <summary>
                Determines if character can perform air dash in specified direction based on
                character state and directional availability. Returns true if character can air dash
                or is on ground, false if dead, acid-covered, or direction unavailable.
            </summary>
            <param name="direction">Direction to check for air dash availability (Up, Down, Left, Right)</param>
            <returns>True if air dash is possible in the specified direction, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanBeAffectedByWind">
            <summary>
                Determines if character can be affected by wind effects. Returns false during
                chimney flip to prevent wind interference with the maneuver.
            </summary>
            <returns>True if character can be affected by wind, false during chimney flip</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanJumpOffGround">
            <summary>
                Determines if character can jump from current ground position by checking for solid
                ground contact with wall collision considerations. Accounts for directional movement
                restrictions and quicksand movement penalties.
            </summary>
            <returns>True if character can jump from current position, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanTouchGround(System.Single)">
            <summary>
                Checks if the character can touch ground using multiple raycasts at different
                positions. Performs up to 4 raycasts for regular ground and 4 additional raycasts
                for ladders if applicable.
            </summary>
            <param name="xOffset">Horizontal offset for additional raycast checks.</param>
            <returns>True if any raycast hits ground or ladder, false otherwise.</returns>
        </member>
        <member name="M:TestVanDammeAnim.CheckDucking">
            <summary>
                Advanced ducking logic that handles auto-ducking in tight spaces. Checks for ceiling
                and floor constraints, auto-ducks when running into low passages, and stops ducking
                when space becomes available.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ClampSpeedPressingLeft">
            <summary>
                Clamps horizontal velocity to -10 when pressing left without simultaneous right
                input to ensure responsive leftward movement initiation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ClampSpeedPressingRight">
            <summary>
                Clamps horizontal velocity to 10 when pressing right without simultaneous left input
                to ensure responsive rightward movement initiation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ClampWallDragYI(System.Single@)">
            <summary>
                Limits vertical velocity during wall dragging to control sliding speed. Prevents
                upward movement and clamps minimum falling speed to -40 units.
            </summary>
            <param name="yIT">Reference to vertical velocity to be clamped</param>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainSpeedToSidesOfScreen">
            <summary>
                Enforces screen boundaries to prevent the character from moving outside the playable
                area, with special handling for repositioning fallen players.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.DontSlipOverEdges">
            <summary>
                Prevents heroes from accidentally falling off edges by detecting ground ahead and
                stopping movement. Uses raycast detection based on facing direction to check for
                ground at feet width distance, stopping rolling and zeroing velocity when edge
                detected.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.EvaluateIsJumping">
            <summary>
                Determines if the character should be in a jumping state by checking if they are
                more than 0.1 units above the ground. Only evaluates when ground height is valid
                (not -100000).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.GetFollowPosition">
            <summary>
                Returns the position for the camera to follow, accounting for parachute state.
                During parachute deployment, returns a position with temporary Y value to smooth
                camera movement.
            </summary>
            <returns>The world position the camera should follow</returns>
        </member>
        <member name="M:TestVanDammeAnim.GetGroundHeightGround">
            <summary>
                Calculates the ground height below the character using box casts and raycasts.
                Checks for both regular ground and ladders, updating ground references and footstep
                sound types based on what is detected.
            </summary>
            <returns>The highest ground point found, or -200f if no ground is detected.</returns>
        </member>
        <member name="M:TestVanDammeAnim.GetGroundLayer">
            <summary>
                Returns the appropriate layer mask for ground detection based on whether the player
                is holding down. When not holding down, includes platforms; when holding down,
                excludes platforms to allow dropping through.
            </summary>
            <returns>LayerMask combining ground, fragile, and optionally platform layers.</returns>
        </member>
        <member name="M:TestVanDammeAnim.GetParentedToPos">
            <summary>
                Calculates the character's position relative to their parent transform, used for
                maintaining relative positioning on moving platforms.
            </summary>
            <returns>The character's position in parent transform space, or world position if not parented.</returns>
        </member>
        <member name="M:TestVanDammeAnim.GetParentedToTransform">
            <summary>
                Returns the current parent transform in order of priority: impaled transform, wall
                climb transform, or ground transform.
            </summary>
            <returns>The active parent transform, or null if not parented to anything.</returns>
        </member>
        <member name="M:TestVanDammeAnim.HitLeftWall">
            <summary>
                Virtual method called when character collides with left wall. Empty implementation
                that can be overridden by derived classes for wall collision handling.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.HitRightWall">
            <summary>
                Virtual method called when character collides with right wall. Empty implementation
                that can be overridden by derived classes for wall collision handling.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.IsGroundBelow">
            <summary>
                Simple ground detection with fixed 5-unit range using two raycasts from left and
                right foot positions.
            </summary>
            <returns>True if either foot detects ground within 5 units below.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsGroundBelow(System.Single)">
            <summary>
                Parameterized ground detection with variable range using two raycasts from foot
                positions.
            </summary>
            <param name="maxDistance">Maximum distance to check for ground below the character.</param>
            <returns>True if either foot detects ground within the specified distance.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsGroundBelowAtXOffset(System.Single,System.Boolean)">
            <summary>
                Ground detection at a specific horizontal offset from the character position, useful
                for checking ground ahead or behind.
            </summary>
            <param name="xOffset">Horizontal offset from character position to check.</param>
            <param name="includeLadders">Whether to include ladder detection in addition to ground.</param>
            <returns>True if ground (and optionally ladders) detected at the offset position.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsNearGround(System.Single)">
            <summary>
                Checks if the character is within a specified distance from the ground.
            </summary>
            <param name="maxOffset">Maximum distance above ground to consider "near".</param>
            <returns>True if the character's Y position is below ground height plus the offset.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsOilyBelow">
            <summary>
                Detects if there are oily surfaces beneath the character using two raycasts from
                foot positions. Checks 9 units down from Y+4 position with foot spread of 4 units.
            </summary>
            <returns>True if either foot position detects an oily block below.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsOnGround">
            <summary>
                Determines if the character is standing on ground by checking if Y position is
                within 0.5 units above ground height and vertical velocity is not positive.
            </summary>
            <returns>True if the character is on ground, false otherwise.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsWallInFront(System.Single)">
            <summary>
                Detects if there's a wall in front of the character at waist height using
                raycasting. Used for wall detection in movement and climbing systems.
            </summary>
            <param name="distance">The distance to check for walls</param>
            <returns>True if a wall is detected within the specified distance</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsWallInFrontOfHead(System.Single)">
            <summary>
                Detects if there's a wall at head height (Y position + 17 units) using raycasting.
                Used to prevent movement into walls at head level.
            </summary>
            <param name="distance">The distance to check for walls</param>
            <returns>True if a wall is detected at head height within the specified distance</returns>
        </member>
        <member name="M:TestVanDammeAnim.Jump(System.Boolean)">
            <summary>
                Handles all jump mechanics including wall jumps and special surface interactions.
                Sets jump force to 80% when surrounded by barbed wire, 190% for bouncy blocks during
                grace period, or normal jump force otherwise. Inherits velocity from moving
                platforms. Wall jumps reset horizontal velocity and trigger climb animations.
            </summary>
            <param name="wallJump">If true, performs a wall jump with horizontal velocity reset and climb sound/animation.</param>
        </member>
        <member name="M:TestVanDammeAnim.NotPressingJump">
            <summary>
                Processes jump button release by disabling wall climbing state when jump is not
                being pressed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.OpenParachute">
            <summary>
                Activates the parachute if not already active. Sets the IsParachuteActive flag to
                true.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ParachuteLandedOn">
            <summary>
                Called when another object lands on this unit's parachute. Virtual method intended
                for override by specific implementations.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PressDown">
            <summary>
                Handles down button press input by recording the tap time for potential down-based
                actions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RaycastGroundSingleSquare(UnityEngine.Vector3)">
            <summary>
                Helper method that performs a single raycast for ground detection. Casts from 8
                units above character position with 12 unit ray length.
            </summary>
            <param name="direction">The direction to cast the ray (typically Vector3.down)</param>
            <returns>True if ground is detected within range, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.ResetToOriginalJumpForce">
            <summary>
                Restores the original jump force and clears the attack jump force timer if
                previously modified.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunAirFriction">
            <summary>
                Virtual method placeholder for air friction. Empty in base class, allows subclasses
                to implement air resistance.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunCheckHanging">
            <summary>
                Detects if character can hang from ceiling using upward raycasts. Requires 0.8
                seconds after jump, appropriate directional conditions, and ceiling detection within
                range. Sets vertical velocity based on ceiling distance and tracks interactive
                ceiling objects.
            </summary>
            <returns>True if hanging conditions are met and ceiling is detected.</returns>
        </member>
        <member name="M:TestVanDammeAnim.RunDeadGravity">
            <summary>
                Applies physics when character is dead. In air: applies gravity or quicksand gravity
                unless impaled, triggers falling animation at -50 velocity. On ground: applies
                friction using 10x friction multiplier.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunFallen">
            <summary>
                Virtual method placeholder for post-fall state behavior. Empty in base class, allows
                subclasses to implement custom fallen state logic.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunFalling">
            <summary>
                Virtual method placeholder for falling state behavior. Empty in base class, allows
                subclasses to implement custom falling logic.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunGroundFriction">
            <summary>
                Applies friction when character is on ground and idle. Normal friction rapidly
                decelerates at 25x rate, while rolling friction is slower at 5x rate.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunHanging">
            <summary>
                Manages movement and physics while hanging from ceiling. Provides slight upward
                movement with up/jump input, applies horizontal speed clamping based on animation
                frame, increases friction when not moving, and continuously checks for ceiling
                presence. Automatically stops hanging when ceiling is lost or down is pressed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunImpaledMovement">
            <summary>
                Handles movement constraints when the character is impaled by an object. Checks if
                the impaling object still exists, manages blood effects, and evaluates if the
                character should remain in the impaled state.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunMovement">
            <summary>
                Central movement processing hub that orchestrates all character movement based on
                action state. Handles dead state physics with quicksand damping, ladder and zipline
                mechanics, jump timing and gravity application, water physics damping, comprehensive
                collision detection for walls/ceilings/floors, out-of-bounds death triggers, and
                frame-based movement calculations. This is the core method that drives all character
                physics and movement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunStrungByPredabroMovement">
            <summary>
                Handles special movement when the character is caught by a Predabro enemy. Positions
                the character below the predabro with a -24 Y offset (additional -5 for MookBigGuy)
                and zeros out velocity while caught.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetActionStateToJumping(System.Boolean)">
            <summary>
                Changes the character's action state to jumping. Requires health &gt; 0 and not
                already jumping, OR forced parameter is true. Updates animation frame unless using
                special ability.
            </summary>
            <param name="forced">If true, bypasses the check for already being in jump state.</param>
        </member>
        <member name="M:TestVanDammeAnim.SetActionstateToIdle">
            <summary>
                Sets the character's action state to idle. Simple state transition method that can
                be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetCanParachute(System.Boolean)">
            <summary>
                Enables or disables parachute capability with appropriate delay setup. When
                enabling, stores camera Y position and sets delay (0.15s for players, 0.6s for
                NPCs). When disabling, deactivates the parachute.
            </summary>
            <param name="canParachute">Whether parachute use is allowed</param>
        </member>
        <member name="M:TestVanDammeAnim.SetParachuteDelay(System.Single)">
            <summary>
                Sets the delay before the parachute can be deployed. Used to prevent immediate
                parachute use after certain actions.
            </summary>
            <param name="time">Delay in seconds before parachute can be used</param>
        </member>
        <member name="M:TestVanDammeAnim.SetPositionAndVelocity(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the position and velocity of TestVanDammeAnim with teleportation handling. If
                the distance change exceeds 6 units, directly sets position to prevent large jumps.
            </summary>
            <param name="newX">New X coordinate position</param>
            <param name="newY">New Y coordinate position</param>
            <param name="xi">X velocity component</param>
            <param name="yi">Y velocity component</param>
        </member>
        <member name="M:TestVanDammeAnim.ShiftUnitWithParent">
            <summary>
                Updates the character's position based on parent transform movement, applying the
                difference between frames.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StartDucking">
            <summary>
                Initiates ducking state and adjusts collision heights. Sets ducking flag, updates
                height values, cancels hanging state, and triggers animation update.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopAirDashing">
            <summary>
                Cancels air dash state and resets related variables. Clears chimney flip animation
                frames and air dash timers.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopDashing">
            <summary>
                Manages dash speed multiplier cleanup when ending dash sequences. Resets dash speed
                to 1.0 for grounded characters while preserving last dash speed for airborne
                characters to maintain momentum.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopDucking">
            <summary>
                Exits ducking state if conditions allow. Checks if player is still holding down
                while standing still and restores standing height values.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TeleportOnScreenCounter(System.Int32)">
            <summary>
                Sets a delay counter for teleporting the hero back on screen when they fall below
                the visible area. Used to give a grace period before forcibly bringing off-screen
                players back into play.
            </summary>
            <param name="delay">Number of frames to wait before teleporting back on screen</param>
        </member>
        <member name="M:TestVanDammeAnim.Tumble">
            <summary>
                Virtual method placeholder for tumble mechanics. Empty in base class, allows
                subclasses to implement tumbling behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.UseAttackJumpForceForSeconds(System.Single)">
            <summary>
                Temporarily increases jump force to attack jump force for a specified duration.
                Stores original jump force for restoration.
            </summary>
            <param name="seconds">Duration in seconds to use the enhanced jump force</param>
        </member>
        <!-- Position & Physics Properties -->
        <member name="P:TestVanDammeAnim.GetSpeed">
            <summary>
                Gets the effective movement speed considering all active modifiers and environmental
                effects. Speed is reduced by 50% when surrounded by barbed wire.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.IsStandingStill">
            <summary>
                Gets a value indicating whether the character is completely stationary. Returns true
                when the character is on the ground and both X and Y velocities are below 0.5.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.XY">
            <summary>
                Gets or sets the character's position as a Vector2. This override provides network
                synchronization hooks for the base class position property.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.jumpForce">
            <summary>
                Gets or sets the force applied when the character jumps. This value can be
                temporarily modified for special attack jumps.
            </summary>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:TestVanDammeAnim.GRAVITY">
            <summary>
                Standard gravity constant of 1100 units/second² used for character physics. Note:
                While defined as a constant, the codebase often uses the literal value 1100f instead
                of referencing this constant. Represents downward acceleration for all characters.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.JUMP_TIME">
            <summary>
                Duration in seconds that jump force is applied when the jump button is held. Default
                0.123 seconds allows for variable jump heights. Used to calculate upward velocity
                during jumps. Can be modified per-character for different jump behaviors.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._jumpForce">
            <summary>
                Private backing field for the jumpForce property. Stores the base jump force value
                in units per second. Default value is 260.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airDashDelay">
            <summary>
                Controls the delay/charge-up time before an air dash executes. Set to
                defaultAirdashDelay when initiating a dash and counts down during the charge phase.
                Provides invulnerability during the delay period.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashDirection">
            <summary>
                Tracks which direction the current air dash is going. Can be Right, Left, Up, Down,
                or Any. Affects movement physics during the dash execution.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashDownAvailable">
            <summary>
                Tracks if downward air dash is available. Set to true by SetAirdashAvailable and
                disabled after use. Downward dashes use a 5x duration multiplier for extended
                effect.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashLeftAvailable">
            <summary>
                Tracks if leftward air dash is available. Set to true by SetAirdashAvailable and
                disabled after use to prevent repeated air dashes until landing or wall climbing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashMaxTime">
            <summary>
                Maximum duration of an air dash in seconds. Base value of 0.5 seconds is multiplied
                by 0.8x for upward dashes (shorter) and 5x for downward dashes (longer slam).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashRightAvailable">
            <summary>
                Tracks if rightward air dash is available. Set to true by SetAirdashAvailable and
                disabled after use to create a one-dash-per-direction aerial movement system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashTime">
            <summary>
                Timer controlling air dash duration and availability. Set to airdashMaxTime when
                initiating dash and decrements each frame. Different dash types use different
                multipliers (up=0.8x, down=5x).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.airdashUpAvailable">
            <summary>
                Tracks if upward air dash is available. Set to true by SetAirdashAvailable and
                disabled after use to prevent repeated air dashes in the same direction until reset.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.attackJumpForce">
            <summary>
                Alternative jump force used during attack moves. Applied temporarily via
                UseAttackJumpForceForSeconds method to create special attack jump mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.attackJumpForceSecondsRemaining">
            <summary>
                Timer for temporary jump force modifications during special attacks. While greater
                than or equal to 0, overrides normal jump force with attackJumpForce. Counts down
                each frame and resets to -1 when expired.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.belowScreenCounter">
            <summary>
                Timer tracking how long unit has been below screen bottom. Incremented when Y
                position is 30 units below screenMinY. Triggers repositioning when exceeding 2
                seconds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.bouncyJumpMultiplyer">
            <summary>
                Multiplier constant (1.9x) intended for bouncy/spring jump mechanics. Currently
                defined but not actively used in TestVanDammeAnim. May be utilized by derived
                classes for special jump behaviors on trampolines or springs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canAirdash">
            <summary>
                Master toggle for air dash ability. When true, allows the character to perform
                directional air dashes. Used by characters like Nebro, BroLee, and TheBrocketeer.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canCeilingHang">
            <summary>
                Allows the character to hang from ceilings. When true, enables hanging when near
                ceiling with up/jump input. Used by special characters like ScorpionBro.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canDash">
            <summary>
                Master toggle for dashing ability. Default is true. When false, prevents all dash
                moves and affects ladder climbing behavior (cannot climb ladders while dashing).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canPushBlocks">
            <summary>
                Controls whether the character can push moveable blocks. Default is true. Only
                allows pushing when running or climbing ladders. Triggers Map.PushBlock when
                conditions are met.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canTouchCeiling">
            <summary>
                Controls whether unit can collide with ceilings. Set by ConstrainToCeiling method
                and affects wall drag behavior. Protected field for internal collision state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canTouchLeftWalls">
            <summary>
                Allows or blocks collision with left walls. Public field for external collision
                control. Referenced in barbed wire collision checks.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canTouchRightWalls">
            <summary>
                Allows or blocks collision with right walls. Public field for external collision
                control. Works with canTouchLeftWalls for directional collision management.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canWallClimb">
            <summary>
                Determines if the character can climb walls. Default is true but can be disabled for
                certain character types. Also used by the AI pathfinding system to determine
                movement options.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ceilingHeight">
            <summary>
                Height of ceiling above character. Updated by upward raycast checks from center and
                both sides. Default value of 1000 indicates no ceiling. Used for vertical space
                calculations and movement constraints.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.chimneyFlip">
            <summary>
                Indicates whether the player is currently performing a chimney flip wall-jump
                maneuver. Set to true when initiating the flip, false when animation completes or
                air dash stops.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.chimneyFlipConstrained">
            <summary>
                Determines whether horizontal movement is restricted during a chimney flip. When
                true, horizontal movement is limited unless up/jump is held.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.chimneyFlipDirection">
            <summary>
                Horizontal direction of chimney flip (-1 for left, 1 for right). Multiplied by 100
                to set horizontal velocity during the flip maneuver.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.chimneyFlipFrames">
            <summary>
                Animation frame counter for chimney flip, starting at 11 and counting down to 0.
                Used to calculate animation frame (22 - chimneyFlipFrames) and control movement
                restrictions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.constrainedLeft">
            <summary>
                Indicates collision with wall on left side during current frame. Set true when
                raycast detects left wall collision. Works with constrainedRight for full wall
                detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.constrainedRight">
            <summary>
                Indicates collision with wall on right side during current frame. Set true when
                raycast detects right wall collision. Used for ceiling hang transitions and wall
                interaction mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dashSpeedM">
            <summary>
                Current air dash speed multiplier (default 1.0). Increased during air dashes to
                provide burst movement. Value changes dynamically during dash execution and returns
                to 1.0 when dash ends.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dashTime">
            <summary>
                Timestamp marking when the current dash started. Set when initiating a dash after
                successful double-tap detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dashing">
            <summary>
                Current dash state of the character. When true, applies dash speed multiplier and
                triggers dash animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.defaultAirdashDelay">
            <summary>
                The standard delay time in seconds before air dashes execute. Default value of 0.15
                seconds provides consistency across different air dash types.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.delayedDashing">
            <summary>
                Handles dash continuation after landing from an aerial state. When true, allows dash
                to resume upon landing if conditions are met.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.doodadCurrentlyHangingFrom">
            <summary>
                Reference to the ceiling JiggleDoodad object the character is currently hanging
                from. Set when grabbing ceiling and used for physics interactions with environmental
                effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.doubleJumpsLeft">
            <summary>
                Tracks remaining double jump charges. Always reset to 0 in the base implementation
                when landing, wall jumping, or entering various states. Actual double jump
                functionality appears to be implemented in derived classes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.downTapTime">
            <summary>
                Timestamp of the last down direction button press. Set in PressDown() method,
                potentially used for ground pound or slide mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.feetWidth">
            <summary>
                Width for foot collision detection in units. Default value of 4 used in ground
                detection raycasts. Adjusts based on movement direction for better platforming feel.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.frictionM">
            <summary>
                Ground friction multiplier affecting horizontal deceleration. Default value of 10.
                Applied as xI *= (1 - Clamp01(t * frictionM)) when on ground. Higher values create
                faster deceleration.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.graceJumping">
            <summary>
                Allows jump input buffering on bouncy blocks. Set to true when initiating jump and
                checked for bouncy block interactions to provide forgiving jump timing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gravityWaterDanmping">
            <summary>
                Unused constant intended for water gravity damping (0.5f). Currently not referenced
                in the codebase. The actual water damping is handled by separate waterDampingX
                (0.95f) and waterDampingY (0.65f) fields.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.groundHeight">
            <summary>
                Current ground level below character. Updated by CalculateGroundHeight each frame.
                Core vertical reference point used for ground detection, fall damage calculations,
                and jumping mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.halfWidth">
            <summary>
                Half of unit's collision width in units. Default value of 6 used throughout for wall
                collision boundaries, ledge detection, and constraint calculations. Returned by
                HalfWidth property.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hangGrace">
            <summary>
                Grace period timer that allows the player to grab onto ceilings within a short
                window after moving away from a climbable surface. Initialized to hangGraceTime
                (0.3f) when near ceilings while jumping. Counts down each frame.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hangGraceTime">
            <summary>
                Grace period for hanging mechanics in seconds. Default value of 0.3 sets hangGrace
                timer when detecting hang points. Multiplied by 1.33x for upward hangs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hasDashedInAir">
            <summary>
                Tracks whether the player has already performed a dash while airborne in the current
                jump. Prevents multiple air dashes until landing, reset to false upon touching
                ground.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.jumpTime">
            <summary>
                Multi-purpose timer for jump-related mechanics. Set to 0.13 seconds at the start of
                a standard jump and controls jump boost duration. Also prevents wall climbing
                immediately after jumping. Different jump types use values between 0.03-0.07
                seconds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastCollumn">
            <summary>
                Previous grid column position. Updated when grid position changes and compared with
                current collumn to detect movement between grid cells. Note: Field name contains
                spelling error ("Collumn" instead of "Column").
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastDashSpeedM">
            <summary>
                Previous frame's dash speed multiplier value. Used for smooth interpolation of dash
                speeds and to detect dash state changes. Helps create fluid dash animations and
                movement curves.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastJumpTime">
            <summary>
                Timestamp of most recent jump action. Used for various jump cooldowns: 0.08s minimum
                between jumps, 0.2s for wall jumps, and 0.3s for ceiling grab attempts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastLandTime">
            <summary>
                Timestamp of the most recent ground landing. Used for "coyote time" or grace
                jumping, allowing jumps shortly after leaving a platform. Enables more forgiving
                platforming by permitting jumps within a small window after walking off ledges.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastParentPosition">
            <summary>
                Intended to store previous parent position. Field exists but is never used in
                current implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastParentWorldPos">
            <summary>
                Caches parent's world position for movement calculations. Used to calculate
                parentedDiff in ShiftUnitWithParent based on position changes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastParentedToTransform">
            <summary>
                Tracks previous parent transform for detecting parent changes. Used to apply
                momentum when switching parents or leaving a moving platform. Set to null in
                Initialize.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastRow">
            <summary>
                Previous grid row position. Field exists but usage not found in current
                implementation. Likely intended for grid-based movement tracking.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ledgeGrapple">
            <summary>
                Indicates if the character is currently grabbing a ledge. Works with wasLedgeGrapple
                for state transition detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ledgeOffsetY">
            <summary>
                Vertical offset applied when grabbing ledges. Used to calculate which animation
                frame to display during ledge grapple animations, with values typically ranging from
                0 to 13.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.leftTapTime">
            <summary>
                Timestamp of the last left direction button press. Used with minDashTapTime to
                detect left double-tap for dashing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.maxFallSpeed">
            <summary>
                Terminal velocity limit for falling in units per second (default -400). Prevents
                acceleration beyond this speed when falling. Can be modified temporarily by
                abilities or environmental effects like fans or low gravity zones.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.maxWallClimbYI">
            <summary>
                Maximum upward velocity allowed when initiating wall climbing. Default value of 100
                prevents climbing at high speeds. Different units may have different values (e.g.,
                Alien: 250).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.minDashTapTime">
            <summary>
                Maximum time window (0.33 seconds) between two directional taps to trigger a dash.
                If second tap occurs within this window, dash is initiated.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.noclipSpeed">
            <summary>
                Movement speed when in level editor noclip mode. Default value of 200 units per
                second. Only active when Map.isEditing and LevelEditorGUI.NoClip are true. Speed
                increases while moving up to +300/sec.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.oldJumpForce">
            <summary>
                Stores the original jump force value when temporarily modifying jump force for
                attack moves. Initialized to -1. Set in UseAttackJumpForceForSeconds() and restored
                in ResetToOriginalJumpForce(). The -1 value indicates no temporary modification is
                active.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.originalMaxFallSpeed">
            <summary>
                Stores the default terminal velocity value (default -400). Used to restore normal
                falling physics after temporary modifications from abilities or effects. Ensures
                fall speed limits return to baseline after special states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parachuteTemporyPositionY">
            <summary>
                Smooth Y-position interpolation for parachute deployment visuals. Initialized to
                camera position when parachute activates and gradually moves up toward actual
                position at 250 units/second. Creates smooth "pulling up" effect for attached visual
                elements.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parentHasMovedTime">
            <summary>
                Timer tracking when parent object has moved. Set to 0.5 seconds when parent moves
                and affects wall drag mechanics while positive. Decrements by delta time in
                RunMovement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parentVelocityInheritM">
            <summary>
                Multiplier for inheriting velocity from parent objects. Default value of 1.0 applies
                full parent velocity. Used when unimpaling and in movement calculations. Reset to 1
                after impalement ends.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parentedDiff">
            <summary>
                Movement difference calculated when parented to moving objects. Applied to unit
                position and transfers momentum (adds to xIBlast/yI) when leaving parent.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.rightTapTime">
            <summary>
                Timestamp of the last right direction button press. Used with minDashTapTime to
                detect right double-tap for dashing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.rumbleAmountPerShot">
            <summary>
                Controller vibration intensity per shot fired. Default value of 0.3. Intended for
                gamepad feedback but not actively used in base implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.screenMaxX">
            <summary>
                Maximum X coordinate of current camera/screen boundary. Set via
                SetResolutionCamera.GetScreenExtents. Used for screen constraint checks and respawn
                positioning.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.screenMaxY">
            <summary>
                Maximum Y coordinate of current camera/screen boundary. Set via
                SetResolutionCamera.GetScreenExtents. Used for top-of-screen constraints in
                MapExtents mode.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.screenMinX">
            <summary>
                Minimum X coordinate of current camera/screen boundary. Set via
                SetResolutionCamera.GetScreenExtents. Used with screenMaxX to calculate screen
                center for respawning.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.screenMinY">
            <summary>
                Minimum Y coordinate of current camera/screen boundary. Set via
                SetResolutionCamera.GetScreenExtents. Used to detect when character falls below
                screen (with 30 unit buffer).
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.specialAttackXIBoost">
            <summary>
                Horizontal velocity boost applied during special attacks. Added to total velocity
                calculation to provide special move momentum.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.specialAttackYIBoost">
            <summary>
                Vertical velocity boost applied during special attacks. Added to vertical velocity
                calculation to provide special move momentum.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.speed">
            <summary>
                Base horizontal movement speed in units per second (default 110). Core value used
                throughout movement calculations for walking and running. Modified by various
                factors like terrain, status effects, and attached enemies.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.standingHeadHeight">
            <summary>
                Default head height when standing in units. Default value of 18 sets initial
                headHeight and is restored when standing up from crouch.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useAttackJumpForceForAttack">
            <summary>
                Flag indicating if special attack jump force should be used for attacks. Checked by
                AI systems to determine attack behavior and triggers temporary jump force
                modification.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallClimbing">
            <summary>
                Current wall climbing state flag. Set true when initiating wall climb. Affects
                movement physics, animations, and special moves like air dash. Reset when leaving
                walls or transitioning states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallClimbingWallTransform">
            <summary>
                Reference to wall being climbed. Set in AssignWallTransform when touching walls and
                used as part of the parenting system. Reset to null in ShiftUnitWithParent.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallClimbingWallTransformLocalPos">
            <summary>
                Local position on wall for climbing calculations. Set using InverseTransformPoint in
                AssignWallTransform and returned by GetParentedToPos during wall climbing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallDrag">
            <summary>
                Indicates if the character is sliding down a wall. When set to true, triggers wall
                drag audio loop and can initiate wall climbing if conditions are met. Automatically
                deactivates parachute when wall dragging begins.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallDragTime">
            <summary>
                Timer controlling wall sliding effect when touching walls. Set to 0.2 seconds on
                wall contact and prevents downward movement while active. Creates a brief "stick"
                effect that slows descent along walls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasConstrainedLeft">
            <summary>
                Previous frame's left wall collision state. Updated from constrainedLeft each frame.
                Used to detect wall release for state transitions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasConstrainedRight">
            <summary>
                Previous frame's right wall collision state. Updated from constrainedRight each
                frame. Used to detect wall release for state transitions like ceiling hanging.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasDashing">
            <summary>
                Previous frame's dash state, used for state change detection. Compared with current
                dashing state to trigger dash start effects and sounds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasLedgeGrapple">
            <summary>
                Previous frame's ledge grapple state. Used for edge detection to determine when
                ledge grabbing begins or ends.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasWallClimbing">
            <summary>
                Previous wall climbing state. Field exists but is never used in current
                implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasWallDragging">
            <summary>
                Previous frame's wall drag state for transition detection. Updated from wallDrag
                each frame. Used to detect wall drag state changes and prevents immediate
                re-grabbing of walls after release.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.waterDampingX">
            <summary>
                Horizontal movement damping factor when submerged in water. Default value of 0.95
                multiplies xI and xIBlast velocities, creating water resistance.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.waterDampingY">
            <summary>
                Vertical movement damping factor when submerged in water. Default value of 0.65
                multiplies yIT velocity, creating stronger vertical water resistance than
                horizontal.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.xIAttackExtra">
            <summary>
                Additional horizontal velocity during attack animations. Used by characters like
                BroLee for martial arts moves and BrocSnipes for sniper recoil. Reset to 0 after
                attacks complete.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.xIBlast">
            <summary>
                Horizontal knockback velocity component from explosions and impacts. Clamped to
                [-200, 200] range and affected by water damping. Adds to total velocity calculation
                without affecting base movement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.xIT">
            <summary>
                Frame-interpolated horizontal movement distance. Calculated as (xI + xIBlast +
                xIAttackExtra + specialAttackXIBoost) * deltaTime. Modified by wall constraints and
                water damping. Reduced by 0.95x when carrying objects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.yIBlast">
            <summary>
                Vertical knockback velocity component from explosions. Set via SetVelocity method
                and added to vertical velocity with clamping. Creates upward or downward force from
                impacts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.yIT">
            <summary>
                Frame-interpolated vertical movement distance. Calculated as (yI +
                specialAttackYIBoost) * deltaTime each frame. Modified by water damping,
                constraints, and traps. Represents actual vertical position change per frame.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:TestVanDammeAnim.AnimateActualDuckingRunning">
            <summary>
                Specialized ducking run animation that uses an 8-frame cycle with foot effects every
                4 frames. Adjusts gun position to (2f, -1f) to accommodate ducking pose and includes
                submersion checks for particle effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateActualIdleDuckingFrames">
            <summary>
                Provides the base ducking idle animation with adjusted gun positioning. Similar to
                standing idle but uses a different frame and positions gun at offset (2f, -1f) to
                accommodate the ducking pose.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateActualIdleFrames">
            <summary>
                Provides the base standing idle animation when the character is not performing any
                special actions. Activates gun, sets frame rate to 0.0667f, and displays a static
                pose. Conditionally sets gun sprite based on firing state.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateActualJumpingDuckingFrames">
            <summary>
                Handles specific jumping animation frames when character is in ducking state during
                jump.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateActualJumpingFrames">
            <summary>
                Manages complex jumping animation frames based on vertical and horizontal velocity.
                Supports three distinct velocity states: fast rising (yI &gt; 20f), fast falling (yI
                &lt; -55f), and normal jumping. Includes gun positioning and frame validation with
                different animations for varying movement speeds.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateActualNewRunningFrames">
            <summary>
                Running animation with environmental responsiveness. Adjusts frame rate based on
                quicksand (3x slower) and barbed wire (2x slower) conditions. Generates foot
                particle effects every 4 frames when not submerged and plays footstep sounds.
                Supports dash animation states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateAirdash">
            <summary>
                Handles horizontal air dash animation with direction-based sprite selection and
                timing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateAirdashDown">
            <summary>
                Handles downward air dash animation with specific sprite frames and timing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateChimneyFlip">
            <summary>
                Handles chimney flip animation, which is the animation that plays when you jump
                towards a corner and go up and over it.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateHanging">
            <summary>
                Handles hanging animation from ledges or ceilings with proper sprite positioning and
                timing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateHighFiveHold">
            <summary>
                Handles animation for holding high-five gesture with proper timing and visual
                feedback.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateHighFiveRelease">
            <summary>
                Handles animation for releasing/completing high-five gesture. Creates high five
                effects when successfulHighFive is true at frame 4. Uses different frame rates based
                on useNewHighFivingFrames flag.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateIdle">
            <summary>
                Main idle animation dispatcher that routes to specific animations based on character
                state. Implements a priority hierarchy system that handles ducking versus standing
                states separately. Routes to appropriate sub-animations including melee, high-five,
                special abilities, rolling, gestures, and dancing based on current character flags.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateImpaled">
            <summary>
                Handles impalement animation with different frames for living versus dead
                characters. Living characters use a clamped frame range, while dead characters or
                aliens use a specific static frame. Deactivates gun and resets sprite offset during
                impalement.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateImpaledByChainSaw">
            <summary>
                Sets a specific animation frame for chainsaw impalement death. Deactivates the gun
                and resets sprite offset. Simpler than regular impalement animation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateJumping">
            <summary>
                Handles jumping animation sequences including takeoff, flight, and landing
                preparation phases.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateLedgeGrapple">
            <summary>
                Handles ledge grappling animation with grabbing and climbing motion sequences.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateMelee">
            <summary>
                Virtual method for melee attack animation. Empty implementation that can be
                overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateOnBackOffUnit">
            <summary>
                Sets the sprite frame for when the character is backing away from another unit.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimatePockettedSpecial">
            <summary>
                Executes pocketed special ability animation sequence. Manages 10-frame animation
                cycle, triggers ability execution at frame 4, and handles gun
                deactivation/reactivation throughout the sequence.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimatePushing">
            <summary>
                Animates character pushing objects with specialized timing and gun orientation. Uses
                3x slower frame rate than normal running, flips gun sprite horizontally (scale -1f
                on X-axis), and uses a specific sprite sheet row. Plays footstep sounds every 4
                frames.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateRolling">
            <summary>
                Animates the rolling sequence using a countdown-based frame system. Sets frame rate
                to 0.025f, deactivates the gun during rolling, and plays landing sound at frame 7 of
                the sequence.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateRunning">
            <summary>
                Main running animation dispatcher with comprehensive state priority system. Handles
                throwable objects, melee, special abilities, pushing, and rolling states. For base
                running, generates environmental effects including foot particles and sounds. Adapts
                frame rate for quicksand environments.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateSpecial">
            <summary>
                Handles special ability animation sequences. Manages timing, facing direction, and
                animation state for special moves.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateSpecial2">
            <summary>
                Virtual method for secondary special ability animation. Empty implementation that
                can be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateSpecial3">
            <summary>
                Virtual method for tertiary special ability animation. Empty implementation that can
                be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateSpecial4">
            <summary>
                Virtual method for quaternary special ability animation. Empty implementation that
                can be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateStrungUpFrames">
            <summary>
                Sets the sprite animation frame for when the character is strung up or hanged.
                Displays a static death pose frame.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateThrowingHeldObject">
            <summary>
                Handles animation for throwing held objects like grenades or mooks. Sets throwing
                state and manages object release timing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateZipline">
            <summary>
                Handles zipline traversal animation with movement-based sprite selection. Creates
                blood particles for gut ziplines or grinding sparks for regular ziplines when
                sliding. Deactivates gun during horizontal movement, activates it when stationary.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CreateFaderTrailInstance">
            <summary>
                Creates a fading trail effect sprite at character's current position and rotation.
                Instantiates fader sprite prefab, matches character's scale and material properties,
                and configures sprite dimensions for trail visualization.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunGun">
            <summary>
                Updates gun animation by managing frame timing. Increments gun counter and decreases
                gun frame when not wall dragging, calling SetGunSprite to update visuals when frame
                changes occur.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetGunSprite(System.Int32,System.Int32)">
            <summary>
                Sets the gun sprite frame and row based on current character state. Uses special
                hanging frame offset when hanging, climbing one-armed, or on zipline.
            </summary>
            <param name="spriteFrame">The frame index for the gun sprite</param>
            <param name="spriteRow">The row index for the gun sprite sheet</param>
        </member>
        <member name="M:TestVanDammeAnim.SetSpriteOffset(System.Single,System.Single)">
            <summary>
                Sets sprite rendering offset for visual positioning adjustments during animations.
            </summary>
            <param name="xOffset">X coordinate offset for sprite positioning</param>
            <param name="yOffset">Y coordinate offset for sprite positioning</param>
        </member>
        <!-- Animation & Sprite Systems Properties -->
        <member name="P:TestVanDammeAnim.Renderer">
            <summary>
                Gets the MeshRenderer component attached to this GameObject. Uses lazy
                initialization to cache the component reference for performance.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.material">
            <summary>
                Gets or sets the shared material of the MeshRenderer. This property provides direct
                access to modify the character's visual appearance.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:TestVanDammeAnim._frozenGunMaterial">
            <summary>
                Cached material for frozen gun appearance. Created on-demand in the Freeze method
                when the character is frozen, using the frozen shader with ice-blue color values.
                Applied to the gun sprite renderer to give the weapon a frozen visual effect
                matching the character's frozen state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._frozenMaterial">
            <summary>
                Cached material for frozen appearance. Created on-demand in the Freeze method when
                the character is frozen, using the "Unlit/Depth Cutout With Image - Frozen" shader
                with ice-blue color values (0.094f, 0.388f, 0.718f). Applied to the character's
                renderer to display the frozen visual effect.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._oilyGunMaterial">
            <summary>
                Cached material for oil-covered gun appearance. Applied alongside _oilyMaterial to
                ensure both character and weapon show oil coverage. Uses the same oil shader as
                character material for consistent visual effect.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._oilyMaterial">
            <summary>
                Cached material for oil-covered appearance. Applied when the character is covered in
                oil, giving a dark, slick visual effect. Created on-demand using special oil shader
                with darkened color values for visual feedback of flammable state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.blood">
            <summary>
                Array of blood shrapnel prefabs intended for visual effects. Currently unused in
                favor of EffectsController.CreateBloodParticles() which uses the bloodColor field
                instead. Likely reserved for custom blood particle effects in derived classes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.currentGesture">
            <summary>
                Tracks the current gesture animation being performed (salute, wave, flex, etc.). Set
                via SetGestureAnimation RPC method and used by AnimateGesture to display the
                appropriate animation frames. Gestures block movement when active and are primarily
                used for multiplayer emotes and character interactions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.defaultMaterial">
            <summary>
                Stores the original material of the character sprite. Used as a reference to restore
                normal appearance after visual effects like freezing or oil coverage. Cached during
                initialization to ensure proper material restoration.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.frameRate">
            <summary>
                Animation frame playback rate in seconds per frame (default 0.0667, approximately 15
                FPS). Controls the speed of sprite animations. Lower values create faster
                animations, higher values create slower animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunCounter">
            <summary>
                Animation timer for gun sprite updates. Increments by delta time and triggers frame
                updates every 0.0334 seconds, providing smooth gun animation at approximately 30
                FPS.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunFrame">
            <summary>
                Tracks the current animation frame for weapon-related animations. Decremented during
                gun animation updates. Set to 3 when firing weapon.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunMaterial">
            <summary>
                Stores the original material of the gun sprite. Used to restore normal gun
                appearance after visual effects. Cached separately from character material since gun
                may have different shader properties or textures.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunSprite">
            <summary>
                Sprite renderer component for the character's weapon. Updated independently from
                character sprite to show weapon animations and states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunSpriteHangingFrame">
            <summary>
                Starting frame offset for gun animations when character is hanging or climbing.
                Default value of 6. Added to the base frame number to show different gun positions
                for hanging states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunSpritePixelHeight">
            <summary>
                Height of each gun sprite frame in pixels. Default value of 32 pixels. Calculated
                from gunSprite.pixelDimensions.y and used for sprite sheet row calculations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.gunSpritePixelWidth">
            <summary>
                Width of each gun sprite frame in pixels. Default value of 32 pixels. Used to
                calculate sprite sheet coordinates and passed to shaders for visual effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hangingOneArmed">
            <summary>
                Indicates whether the character is currently hanging from a ledge with one arm. Used
                by the animation system to display one-armed hanging sprites (row 11, frame 0)
                versus two-armed hanging. Set during ledge grapple mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heroTrail">
            <summary>
                Active trail renderer that creates speed lines behind the hero during fast movement.
                Enabled when horizontal speed exceeds threshold and trail time dynamically adjusts
                between 0.1-0.4 seconds based on movement speed. Disabled when speed drops or hero
                dies.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heroTrailPrefab">
            <summary>
                Prefab reference for creating hero trail visual effects. Likely assigned in Unity
                editor and used as template for instantiating the heroTrail object. Part of the
                movement trail rendering system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.instantiatedSkeleton">
            <summary>
                Holds the skeleton or corpse object created when the character dies. Used for
                managing death gibs and can be exploded when hit while melting.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.knifeHand">
            <summary>
                Alternates which hand is used for knife climbing animations. Incremented during
                climbing actions and used with modulo 2 to control left/right hand animations for
                wall climbing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastT">
            <summary>
                Time elapsed during the previous frame in seconds (default 0.1). Used for
                frame-independent animation timing and physics calculations. Helps smooth animations
                during variable frame rates.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meltingSprite">
            <summary>
                Manages the visual effect when the character melts from acid damage. Set when the
                melting animation begins and checked to determine when the melting animation
                completes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meshRenderer">
            <summary>
                Reference to the MeshRenderer component for 3D rendering. Rarely used directly in
                TestVanDammeAnim as characters primarily use sprite-based rendering. May be utilized
                by specific derived classes for special visual effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.runningFrameRate">
            <summary>
                Base animation frame timing for running animations in seconds. Default value of
                0.025 seconds. Multiplied by 3 for slower animations in quicksand or other special
                states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.sprite">
            <summary>
                Main SpriteSM component responsible for rendering the character sprite. Initialized
                from GetComponent in Awake and used extensively throughout animation methods to
                control sprite sheet navigation via SetLowerLeftPixel, texture updates, and visual
                effects like color changes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.spriteOffset">
            <summary>
                Stores the original sprite offset position from initialization. Used as the base
                reference point when applying temporary sprite position adjustments via
                SetSpriteOffset, allowing the sprite to return to its original position after
                effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.spritePixelHeight">
            <summary>
                Height of each sprite frame in pixels on the sprite sheet. Initialized from
                sprite.pixelDimensions.y in Awake and used in SetLowerLeftPixel calculations to
                navigate sprite sheet rows during animation. Default value is 32 pixels.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.spritePixelWidth">
            <summary>
                Width of each sprite frame in pixels on the sprite sheet. Initialized from
                sprite.pixelDimensions.x in Awake and used in SetLowerLeftPixel calculations to
                navigate sprite sheet columns during animation. Default value is 32 pixels.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useDashFrames">
            <summary>
                Controls whether to use dash-specific animation frames. When true, uses row 8 frames
                0-3 for horizontal dashing and row 9 frames 5-7 for vertical air dashing. Enables
                visual feedback for dash abilities when available.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useDuckingFrames">
            <summary>
                Controls whether to display ducking/crouching animation frames. When true (default),
                shows proper ducking sprites when character crouches. When false, character
                maintains standing sprite even while ducked, which can look incorrect but may be
                used for specific characters.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useLadderClimbingTransition">
            <summary>
                Enables smooth transition animations when mounting or dismounting ladders. When
                true, plays a transition animation for ladderClimbingTransitionFrames duration
                before normal climbing begins. Works with useNewLadderClimbingFrames for complete
                ladder animation control.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewDuckingFrames">
            <summary>
                Configuration toggle intended for switching between old and new ducking animation
                sets. Currently not actively used in the code but reserved for future animation
                system updates.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewFrames">
            <summary>
                Configuration toggle intended for using updated animation frames. Currently not
                actively used in the code but reserved for future general animation system updates.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewHighFivingFrames">
            <summary>
                Controls whether to use updated animation frames for high-five interactions. When
                true, uses frames 4-5 from row 1 of the sprite sheet for the high-five gesture. Set
                per-character to enable or disable the high-five animation system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewKnifeClimbingFrames">
            <summary>
                Controls whether to use updated animation frames for knife wall climbing. When true,
                uses frames from row 5 of the sprite sheet instead of generic climbing frames. Set
                per-character in Unity Inspector to customize wall climbing animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewKnifingFrames">
            <summary>
                Toggle that switches between old and new melee/knifing animation sets. When enabled,
                uses different animation frames and movement patterns in AnimateMelee and
                RunMeleeMovement, affecting both the visual presentation and physics of melee
                attacks.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewLadderClimbingFrames">
            <summary>
                Controls whether to use updated animation frames for ladder climbing. When true,
                uses frames from row 4 of the sprite sheet instead of generic climbing frames. Set
                per-character to customize ladder climbing animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewLedgeGrappleFrames">
            <summary>
                Controls whether to use updated animation frames for ledge grappling. When true,
                uses frames from row 11 of the sprite sheet for the ledge hanging animation. Set
                per-character to enable new ledge grapple visuals.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewPushingFrames">
            <summary>
                Toggles between old and new pushing animation frames. When true, uses updated sprite
                frames for the block pushing animation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.useNewThrowingFrames">
            <summary>
                Toggle that switches between old and new throwing animation sets. When false, uses
                frames 17-22 on row 1; when true, uses frames 17-24 on row 5. Affects both the
                throwing animation sequence and held object positioning during throws.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasHangingMoving">
            <summary>
                Tracks state change for hanging movement animations. Set to true when starting
                hanging movement and used to detect transition from moving to stationary while
                hanging.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.yScale">
            <summary>
                Maintains the vertical scale of the sprite (default 1.0). Preserved during direction
                changes to ensure consistent sprite appearance. Some derived classes may modify this
                for special visual effects like squashing or stretching animations.
            </summary>
        </member>
        <!-- Character State & Effects Methods -->
        <member name="M:TestVanDammeAnim.AlertNearbyMooks">
            <summary>
                Alerts nearby enemy units to player presence within 8x8 unit area. Updates last
                alert time for tracking alert frequency.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateFrozen">
            <summary>
                Sets the visual appearance when the character is frozen. Deactivates the gun sprite
                and sets the character sprite to frame 11 (frozen pose) on the sprite sheet. This
                method is called by Freeze to establish the frozen visual state.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Blind(System.Single)">
            <summary>
                Stuns the character for a specified duration, applying a blindness effect that
                prevents all actions. In DeathMatch mode, heroes receive a 70% reduction in stun
                duration. Also calculates a vocal delay (0.2-0.7 seconds) for playing stun sound
                effects.
            </summary>
            <param name="time">Duration in seconds to remain stunned</param>
        </member>
        <member name="M:TestVanDammeAnim.Blind">
            <summary>
                Applies a default 3-second blind/stun effect to the character. Immediately stops all
                movement and sets the stun timer, with the same vocal delay calculation as the timed
                version for sound effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Boost(System.Single)">
            <summary>
                Applies temporary speed boost effect for specified duration.
            </summary>
            <param name="time">Duration of boost effect in seconds</param>
        </member>
        <member name="M:TestVanDammeAnim.BrosMustFailToWin">
            <summary>
                Marks a player unit as needing to fail for victory conditions. Only applies to
                player-controlled units and disables gibbing to ensure proper failure tracking.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateZombieInput">
            <summary>
                Processes input for zombie units by copying control inputs from their revive source.
                Decrements zombie delay timer and explicitly disables special abilities for zombies.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CanBeThrown">
            <summary>
                Determines if the character can be thrown by other units. Characters that are heavy
                or currently impaled cannot be thrown.
            </summary>
            <returns>True if the character can be thrown, false if heavy or impaled</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanFreeze">
            <summary>
                Checks if the hero can be affected by freeze effects. Base implementation always
                returns true, can be overridden for freeze-immune heroes.
            </summary>
            <returns>True if the hero can be frozen</returns>
        </member>
        <member name="M:TestVanDammeAnim.CheckDestroyed">
            <summary>
                Handles character destruction cleanup. Removes from map tracking, reduces lives if
                applicable, and triggers unit destruction.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckFacingDirection">
            <summary>
                Manages character facing direction based on movement, input, and special abilities.
                Prevents direction changes during chimney flips, air dashes, or when configured to
                maintain special facing direction.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckNotifyDeathType">
            <summary>
                Checks if enough time has passed since death to notify death type. Calls
                NotifyDeathType after 0.33 second delay.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CopyInput(TestVanDammeAnim,System.Single@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Copies control inputs from one unit to another, primarily used for zombie control.
                If the source is alive, copies all input states. If dead, sets all inputs to false.
            </summary>
            <param name="zombie">The source unit to copy inputs from</param>
            <param name="zombieDelay">Delay timer reference (not modified by this method)</param>
            <param name="up">Up input state to set</param>
            <param name="down">Down input state to set</param>
            <param name="left">Left input state to set</param>
            <param name="right">Right input state to set</param>
            <param name="fire">Fire input state to set</param>
            <param name="buttonJump">Jump input state to set</param>
            <param name="special">Special input state to set</param>
            <param name="highFive">High-five input state to set</param>
        </member>
        <member name="M:TestVanDammeAnim.CreateElectricShockPuff(System.Single)">
            <summary>
                Creates a visual electric shock effect at the hero's position. Adds random
                positioning offsets for variation and randomly flips the effect horizontally.
                Parents the effect to the hero's transform so it follows movement.
            </summary>
            <param name="yOffset">Vertical offset from the hero's position for the effect</param>
        </member>
        <member name="M:TestVanDammeAnim.CreateSkeleton">
            <summary>
                Creates appropriate skeleton prefab based on character type (BigGuy, HellLostSoul,
                Grenadier, etc.) for death/melting animations. Only creates if skeleton doesn't
                already exist.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Dance(System.Single)">
            <summary>
                Makes the character dance for the specified duration. Sets dance timer and applies a
                stun effect for the same duration to prevent movement during the dance.
            </summary>
            <param name="time">Duration of the dance in seconds</param>
        </member>
        <member name="M:TestVanDammeAnim.DelayedRevive(System.Single)">
            <summary>
                Handles delayed revival mechanics for the hero. Virtual method intended for override
                by specific revival implementations.
            </summary>
            <param name="delay">Time in seconds before revival occurs</param>
        </member>
        <member name="M:TestVanDammeAnim.DestroyUnit">
            <summary>
                Virtual method that destroys the game object. Can be overridden by derived classes
                for custom destruction behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Disable">
            <summary>
                Disables the component to prevent updates and behavior. Sets the enabled state to
                false.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.FireFlashAvatar">
            <summary>
                Triggers the avatar firing flash effect with a short animation timer (0.04 seconds).
                Sets the avatar to fire state and applies controller rumble feedback for firing
                actions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Freeze(System.Single)">
            <summary>
                Freezes the character with a frozen visual effect for a specified duration. Creates
                frozen materials using a special "Frozen" shader with blue tint (0.094f, 0.388f,
                0.718f) and applies them to both character and gun sprites. The character is
                immobilized and plays a freeze scream sound effect while in this state.
            </summary>
            <param name="time">Duration in seconds to remain frozen</param>
        </member>
        <member name="M:TestVanDammeAnim.HideAndDisableCharacter">
            <summary>
                Completely hides and disables the character from gameplay. Disables rendering, main
                script, AI, and collision while setting invulnerability. Used for cutscenes or
                special game states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Impale(UnityEngine.Transform,UnityEngine.Vector3,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Impales the character on a transform, drastically reducing movement capability while
                maintaining position constraints.
            </summary>
            <param name="impaleTransform">The transform to impale the character on.</param>
            <param name="direction">The direction of the impaling force.</param>
            <param name="damage">The amount of damage to apply.</param>
            <param name="xI">The horizontal velocity component.</param>
            <param name="yI">The vertical velocity component.</param>
            <param name="xOffset">Horizontal offset from the impale transform.</param>
            <param name="yOffset">Vertical offset from the impale transform.</param>
        </member>
        <member name="M:TestVanDammeAnim.IsExitingDoor">
            <summary>
                Checks if the character is currently exiting a door. Base implementation always
                returns false, intended for override by derived classes.
            </summary>
            <returns>True if exiting a door, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsFlexing">
            <summary>
                Checks if the hero is performing a flex gesture. Requires the unit to be a hero and
                currently in the Flex gesture state.
            </summary>
            <returns>True if the hero is flexing</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsHanging">
            <summary>
                Checks if the unit is currently in a hanging state. Returns true when actionState
                equals Hanging.
            </summary>
            <returns>True if the unit is hanging</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsInQuicksand">
            <summary>
                Checks if the hero is currently sinking in quicksand. Returns the current quicksand
                state tracked by the movement system.
            </summary>
            <returns>True if the hero is in quicksand</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsIncapacitated">
            <summary>
                Checks if the hero is currently stunned or frozen. Returns true if either stun time
                or frozen time is active.
            </summary>
            <returns>True if the hero cannot act due to stun or freeze</returns>
        </member>
        <member name="M:TestVanDammeAnim.Melt">
            <summary>
                Initiates melting animation sequence using character-specific melting prefabs. Sets
                melted state and creates appropriate melting effects for different enemy types and
                states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.MustBroFailToWin">
            <summary>
                Checks whether this unit must fail for the victory condition to be met. Used in
                special game modes where player failure is the objective.
            </summary>
            <returns>True if this unit must fail for victory</returns>
        </member>
        <member name="M:TestVanDammeAnim.RecallBro">
            <summary>
                Handles character recall/respawn with visual fade effect. Switches to transparent
                shader, changes layer to Effects, removes from map tracking, and assigns to
                spectator player. Network RPC method that can be called remotely.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ReceiveHeroKillReport(KillData)">
            <summary>
                Receives notification when this hero kills another unit. Virtual method intended for
                override by specific hero implementations.
            </summary>
            <param name="killData">Data about the kill including victim and damage type</param>
        </member>
        <member name="M:TestVanDammeAnim.ReduceLives(System.Boolean)">
            <summary>
                Decrements player lives when the character dies. Only processes for the owning
                player, prevents double processing, and notifies HeroController of the death.
            </summary>
            <param name="destroyed">Whether the character was completely destroyed</param>
        </member>
        <member name="M:TestVanDammeAnim.Reenable">
            <summary>
                Re-enables the component after it has been disabled. Sets the enabled state to true.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ReplaceWithSkinnedInstance(Unit,System.Single,System.Single)">
            <summary>
                Replaces this unit instance with a skinned version, transferring all state and
                properties to the new instance.
            </summary>
            <param name="skinnedInstance">The skinned unit instance to replace this one with.</param>
            <param name="_x">The X position for the replacement unit.</param>
            <param name="_y">The Y position for the replacement unit.</param>
        </member>
        <member name="M:TestVanDammeAnim.RestartBubble">
            <summary>
                Restarts the player protection bubble display with default settings. Uses player
                options to determine if bubbles should always be shown and considers forced bros
                count for bubble visibility.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RestartBubble(System.Single)">
            <summary>
                Restarts the player protection bubble with a specified duration timer. Only
                functions in campaign mode and checks HUD visibility and chat state before
                displaying the bubble for the specific player number.
            </summary>
            <param name="time">Duration in seconds to display the protection bubble</param>
        </member>
        <member name="M:TestVanDammeAnim.Revive(System.Int32,System.Boolean,TestVanDammeAnim)">
            <summary>
                Revives a dead unit, either as a zombie or restoring a player character. Clears
                impalement state, creates revival effects, and assigns appropriate control. For
                players, reassigns character and adds life. For zombies, sets ownership to revive
                source.
            </summary>
            <param name="playerNum">Player number to assign if reviving as player (-1 for zombie)</param>
            <param name="isUnderPlayerControl">Whether the revived unit will be player-controlled</param>
            <param name="reviveSource">The unit that is reviving this character (for zombie control)</param>
            <returns>True if revival was successful</returns>
        </member>
        <member name="M:TestVanDammeAnim.RollOnto(System.Int32)">
            <summary>
                Applies knockback when another unit rolls onto this character. Uses the Knock method
                with horizontal force based on direction and fixed upward force.
            </summary>
            <param name="direction">Direction of the rolling impact (-1 left, 1 right)</param>
        </member>
        <member name="M:TestVanDammeAnim.RunAvatarFiring">
            <summary>
                Updates the avatar's firing animation state based on current fire input. Manages the
                avatar gun fire timer and switches between angry and calm states depending on
                whether the character is actively firing.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunAvatarRunning">
            <summary>
                Updates the avatar's running animation by creating a bouncing effect. The avatar
                moves up and down based on the current run animation frame, but only when the
                character is in the running state.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunImpaledBlood">
            <summary>
                Creates periodic blood particle effects when the character is impaled. Manages blood
                spurts with randomized timing, limits effects to 5 spurts maximum, and uses artery
                effects for dramatic visual impact.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunTrail">
            <summary>
                Manages the visual trail effect based on character movement speed. Enables trail
                when moving faster than 50% speed, with trail duration scaling from 0.1 to 0.4
                seconds. Disables trail when dead or moving slowly.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetGibThreshold(System.Int32)">
            <summary>
                Sets the negative health threshold at which the hero will gib instead of normal
                death. Lower values require more extreme damage to trigger gibbing.
            </summary>
            <param name="newThreshold">The new gib threshold (typically negative)</param>
        </member>
        <member name="M:TestVanDammeAnim.SetImmuneToOutOfBounds">
            <summary>
                Makes the unit immune to death from going out of bounds. Used for special scenarios
                where units need to exist outside normal play area.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetInvulnerable(System.Single,System.Boolean,System.Boolean)">
            <summary>
                Makes the character invulnerable to damage for the specified duration. Can
                optionally display a protection bubble and/or halo effect to indicate the
                invulnerable state.
            </summary>
            <param name="time">Duration of invulnerability in seconds</param>
            <param name="restartBubble">Whether to show the protection bubble (default true)</param>
            <param name="showHalo">Whether to show a halo effect (default false)</param>
        </member>
        <member name="M:TestVanDammeAnim.SetSpawnState(System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Sets the initial spawn conditions for the hero including velocity and status
                effects. Network RPC method that can be called remotely to ensure consistent spawn
                state.
            </summary>
            <param name="_xI">Initial horizontal velocity</param>
            <param name="_yI">Initial vertical velocity</param>
            <param name="tumble">Whether to start in tumbling state</param>
            <param name="useParachuteDelay">Whether to apply parachute deployment delay</param>
            <param name="useParachute">Whether to spawn with parachute active</param>
            <param name="onFire">Whether to spawn on fire</param>
        </member>
        <member name="M:TestVanDammeAnim.SetWillComebackToLife(System.Single)">
            <summary>
                Marks the character to respawn after death with the specified comeback timer. Shows
                a halo effect if not already displayed to indicate the respawn state.
            </summary>
            <param name="time">Time in seconds before the character respawns</param>
        </member>
        <member name="M:TestVanDammeAnim.ShowAndEnableCharacter">
            <summary>
                Network wrapper for showing a hidden character. Checks ownership before sending RPC
                to show the character on all clients.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ShowCharacterInternal">
            <summary>
                Re-enables and shows a previously hidden character. Restores rendering, main script
                functionality, and grants 1 second of invulnerability. Network RPC method that can
                be called remotely.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SkinUnit">
            <summary>
                Converts this unit to a skinned variant if the player has an active skin and network
                ownership.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SprayBlood(System.Single,BloodColor)">
            <summary>
                Creates blood splatter effects on nearby surfaces using raycasts. Performs a raycast
                in a random direction from above the character and applies blood to hit blocks. Also
                triggers area blood effects through Map.BloodyDoodads.
            </summary>
            <param name="range">Maximum distance for blood spray raycasts</param>
            <param name="bloodColor">Color of the blood to spray</param>
        </member>
        <member name="M:TestVanDammeAnim.Stop">
            <summary>
                Immediately halts all character movement and actions. Clears all input flags, sets
                velocity to zero, resets melee states, and sets to idle if not dead.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopBeingStunned">
            <summary>
                Virtual method for ending stun effects. Empty implementation that can be overridden
                by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopBubble">
            <summary>
                Stops the player protection bubble display for the specific player number (0-3).
                Used when invulnerability expires or when the bubble should be hidden.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Stun">
            <summary>
                Applies a stun effect with default duration of 0.33 seconds. Calls the overloaded
                Stun method with the default time value.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Stun(System.Single)">
            <summary>
                Applies a stun effect for the specified duration. Stops character movement, sets
                stun timer, resets blind counter if negative, and calculates vocal delay for stun
                sound effects based on duration.
            </summary>
            <param name="time">Duration of the stun effect in seconds</param>
        </member>
        <member name="M:TestVanDammeAnim.SuckIntoPortal">
            <summary>
                Handles the character being sucked into an exit portal with visual effects. Adds
                SpinAndScaleDown component for the portal animation, stops protection bubbles and
                syncing, and links the character to the exit portal instance. RPC-enabled for
                network synchronization.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TempInvulnerability(System.Single)">
            <summary>
                Grants temporary invulnerability to TestVanDammeAnim for a specified duration. Sets
                invulnerable state and resets fired-while-invulnerable tracking.
            </summary>
            <param name="time">Duration of invulnerability in seconds. If 0 or negative, uses default duration of 1.2 times the current frame delta time (very brief)</param>
        </member>
        <member name="M:TestVanDammeAnim.TimeBroBoost(System.Single)">
            <summary>
                Applies time-based character boost effect for specified duration.
            </summary>
            <param name="time">Duration of time boost effect in seconds</param>
        </member>
        <member name="M:TestVanDammeAnim.UnFreeze">
            <summary>
                Removes the frozen state and restores the character's normal appearance. Resets the
                frozen timer to 0 and restores the default materials for both the character renderer
                and gun sprite (if present). This allows the character to resume normal movement and
                actions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Unimpale(System.Int32,DamageType,System.Single,System.Single,UnityEngine.MonoBehaviour)">
            <summary>
                Removes the character from an impaled state, applying damage and velocity while
                clearing impalement constraints.
            </summary>
            <param name="damage">The amount of damage to apply when unimpaling.</param>
            <param name="damageType">The type of damage being applied.</param>
            <param name="xI">The horizontal velocity to apply after unimpaling.</param>
            <param name="yI">The vertical velocity to apply after unimpaling.</param>
            <param name="firedBy">The source that caused the unimpaling.</param>
        </member>
        <member name="M:TestVanDammeAnim.Unrevive">
            <summary>
                Forces the character to die after being revived. Deals crush damage equal to
                health+1 with knockback based on facing direction.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.WhereDidIDie">
            <summary>
                Returns the position where the hero died for respawn or tracking purposes. Returns
                the recorded death position if killed by another hero, otherwise returns current
                position.
            </summary>
            <returns>The world position where death occurred</returns>
        </member>
        <member name="M:TestVanDammeAnim.YouKilledMe(Unit)">
            <summary>
                Called when this hero kills another unit. Virtual method intended for override to
                handle kill-specific behavior.
            </summary>
            <param name="unit">The unit that was killed</param>
        </member>
        <!-- Character State & Effects Properties -->
        <member name="P:TestVanDammeAnim.IsDucking">
            <summary>
                Gets a value indicating whether the character is currently in a ducking or crouching
                state.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.IsFrozen">
            <summary>
                Gets a value indicating whether the character is currently frozen by freeze effects.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.IsParachuteActive">
            <summary>
                Gets or sets a value indicating whether the parachute is currently active. Setting
                this property manages parachute GameObject visibility, physics effects, and landing
                invulnerability.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.IsPerformanceEnhanced">
            <summary>
                Gets a value indicating whether performance enhancement effects are currently
                active. This base implementation always returns false.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.WillReviveAlready">
            <summary>
                Gets a value indicating whether this unit will be automatically revived. This base
                implementation always returns false.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.counter">
            <summary>
                Gets or sets the animation frame timing counter. This counter accumulates delta time
                and triggers the next animation frame when it exceeds the frameRate threshold, which
                varies based on the current animation.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.impaledByTransform">
            <summary>
                Gets or sets the Transform that is currently impaling this unit. Setting this
                property also updates the related Impaler component reference.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.invulnerableTime">
            <summary>
                Gets or sets the remaining invulnerability duration in seconds. When greater than
                zero, the character cannot take damage.
            </summary>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:TestVanDammeAnim.HidingPlayer">
            <summary>
                Tracks whether the player character is currently hidden/disabled. Set to true in
                HideAndDisableCharacter for cutscenes and transitions. Character becomes
                invulnerable while hidden and sprites/renderers are disabled accordingly.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ImpaledByTransform">
            <summary>
                Private backing field for the impaledByTransform property. Stores the Transform of
                the object that is currently impaling this character.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.avatarAngryTime">
            <summary>
                Unused in base class. Reserved for BroLee implementation to control avatar/clone
                anger state in derived classes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.avatarGunFireTime">
            <summary>
                Unused in base class. Reserved for BroLee implementation to control avatar/clone
                firing timing in derived classes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.blindCounter">
            <summary>
                Counter for blind effect intervals. Incremented while blinded and triggers visual
                effects every 0.1 seconds. Reset when entering stun state. Creates periodic screen
                flash effects to indicate blindness status.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.bloodCountAmount">
            <summary>
                Number of blood particles to spawn on death. Default value of 80. Used in particle
                creation (divided by 4) and SprayBlood calls to control visual gore intensity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.bloodTime">
            <summary>
                Current blood effect timer. Decremented by 0.0667 per update. When positive, creates
                blood particles using character's bloodColor property.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.bloodTimeOut">
            <summary>
                Total duration limit for blood effects. Not directly used in visible base
                implementation but likely controls maximum blood effect duration.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canBeCoveredInAcid">
            <summary>
                Determines if this unit can be affected by acid coverage effects (default true).
                When false, prevents acid visual effects and damage over time. Checked before
                applying acid materials and status effects. Some boss units may disable this.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canBeStrungUp">
            <summary>
                Determines if this unit can be hung or strung up by certain traps or abilities.
                Currently not actively used in the codebase. May have been intended for trap
                mechanics or special death states where units could be suspended.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canDuck">
            <summary>
                Determines if the character is allowed to duck. Default is true. Checked in
                StartDucking method and movement collision logic to enable/disable ducking ability.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canUnFreeze">
            <summary>
                Determines if the frozen status can expire naturally over time. When true,
                frozenTime decrements each frame allowing automatic thawing. When false, unit
                remains frozen indefinitely until explicitly unfrozen by external effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.controllingProjectile">
            <summary>
                Unused in base class. Used by specific characters (BroDredd, BronnarJensen,
                BroGummer) to indicate when character is remotely controlling a projectile.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.controllingProjectileDelay">
            <summary>
                Unused in base class. Intended for timing mechanics to prevent immediate re-control
                after releasing a projectile.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dancingFrames">
            <summary>
                Number of animation frames in the dancing sequence. Default value of 12 frames
                creates the complete dance animation cycle. Used with frame modulo calculation for
                smooth looping dance animation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dancingFramesSheetPosition">
            <summary>
                Starting position on the sprite sheet for dancing animation frames. Default
                Vector2Int(15, 14) points to row 15, column 14. The X coordinate is combined with
                current frame modulo for animation progression.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dancingTime">
            <summary>
                Duration in seconds remaining for dance effect. Decremented each frame alongside
                stunTime. Character dances only when both stunTime and dancingTime are greater than
                zero. Set by Dance() method for forced dancing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.deadHeadHeight">
            <summary>
                Character's head height when dead in units. Default value of 10. Set in
                ConstrainToCeiling when actionState is Dead. Ensures dead bodies have appropriate
                collision boundaries.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.deadWaistHeight">
            <summary>
                Character's waist height when dead in units. Default value of 5. Lower than
                standing/ducking heights to reflect prone dead position.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.deathSoundVolume">
            <summary>
                Volume multiplier for death sound effects. Default value of 0.7. Applied at various
                levels (50% or 100%) to control death sound loudness.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.doRollOnLand">
            <summary>
                Enables rolling animation when landing from significant falls. When true, character
                performs a roll if landing with high downward velocity (yI &lt; -300). The roll
                lasts 0.133 seconds and prevents other actions during that time. Provides smooth
                landing from high falls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ducking">
            <summary>
                Tracks if the character is in a ducking/crouching state. Affects hitbox dimensions,
                prevents wall climbing, modifies movement speed, and changes animation frames when
                useDuckingFrames is true.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.duckingHeadHeight">
            <summary>
                Character's head height when ducking in units. Default value of 13. Set in
                StartDucking method and used to adjust collision detection height when crouched.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.duckingToeHeight">
            <summary>
                Character's toe height when ducking in units. Default value of 5. Slightly higher
                than standing (5 vs 4), possibly representing lifted feet when crouching.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.duckingWaistHeight">
            <summary>
                Character's waist height when ducking in units. Default value of 6. Set in
                StartDucking method to reflect crouched position.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.firstFrame">
            <summary>
                Generic first-frame flag common across many game objects. Initialized to true but
                not specifically used in TestVanDammeAnim implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.frozenTime">
            <summary>
                Duration in seconds remaining for the freeze effect. When greater than zero,
                character is frozen solid with blue tint shader. Prevents all movement, modifies
                damage behavior, and affects death mechanics. Decremented only when canUnFreeze is
                true.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.halo">
            <summary>
                Reference to a BroHalo visual effect component. Displays an angel halo above the
                character during certain states, particularly when marked for resurrection
                (willComeBackToLife). Provides visual feedback for special character states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.idleTime">
            <summary>
                Tracks seconds of player inactivity. Incremented when no input is received, reset on
                any input. Triggers AFK bubble display after threshold and enables other players to
                kick idle players after extended inactivity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.immuneToOutOfBounds">
            <summary>
                When true, prevents death from falling out of map bounds. Checked before applying
                out of bounds damage. Allows certain heroes or special states to survive falling off
                the map edges.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaleXOffset">
            <summary>
                Horizontal offset when character is impaled. Field exists but usage not found in
                current implementation. Likely provides visual offset for impaled state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaleYOffset">
            <summary>
                Vertical offset for positioning when impaled by an object. Used in GetParentedToPos
                to calculate the Y position relative to the impaling transform.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledBy">
            <summary>
                Reference to the Impaler component that has impaled this character. Used to evaluate
                if impalement should continue and for damage calculations. Cleared when impalement
                ends.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledCounter">
            <summary>
                Timer or counter for impalement state. Field exists but usage not found in current
                implementation. Related to impalement mechanics.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledDamage">
            <summary>
                Stores damage value to apply when unit is unimpaled. Set during Impale method and
                applied as damage in Unimpale when unit is released from impalement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledDirection">
            <summary>
                Direction of impalement (-1 or 1) based on impact velocity. Determines position
                constraints and sets minor velocity (xI = -0.01f * impaledDirection) during
                impalement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledLocalPos">
            <summary>
                Local position relative to impaling object. Field exists but is never used in
                current implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.impaledPosition">
            <summary>
                World position where unit was impaled. Constrains movement to ±3 units from this
                point while impaled to prevent excessive movement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.isParachuteActive">
            <summary>
                Tracks whether the parachute is currently deployed and affecting physics. When true,
                applies air resistance and modified gravity. Set when parachute deploys during
                falls, cleared on landing or parachute destruction.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.isSkinnedMook">
            <summary>
                Flag indicating if this unit is a skinned mook enemy type. Public field but no usage
                found in TestVanDammeAnim base class.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastDamageType">
            <summary>
                Stores the type of damage last received by the character. Default is
                DamageType.None. Used for damage-specific death effects and responses, particularly
                explosion damage checks.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastHitSoundTime">
            <summary>
                Timestamp of when hurt sound was last played. Prevents sound spam with 0.1 second
                cooldown between hurt sounds. Updated when hurt sound plays.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.meltDuration">
            <summary>
                Controls how long the acid melting death effect lasts in seconds. Default value of
                0.7 seconds is randomized by ±0.3 seconds in Awake for visual variety.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parachute">
            <summary>
                Reference to the Parachute component attached to this unit. Created when falling
                from sufficient height, destroyed on landing or damage. Provides visual parachute
                model and modifies falling physics when active.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.parachuteDelay">
            <summary>
                Countdown timer preventing immediate parachute deployment after certain actions.
                Decremented each frame when greater than zero. Ensures parachute doesn't deploy
                during attacks or immediately after jumping, requiring actual falling before
                activation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pitchShiftAmount">
            <summary>
                Pitch modifier added to all character sound effects. Allows voice pitch variation
                between different characters. Applied to special, throw, hurt, and death sounds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pushingTime">
            <summary>
                Timer for push animation duration. Set to 0.06 seconds when block pushing begins and
                decrements each frame. Controls when to display pushing animation frames.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.recallCounter">
            <summary>
                Timer for the recall fade-out effect, ranging from 0 to 1. Controls sprite
                transparency (1 - recallCounter) during despawn. Character is destroyed when counter
                exceeds 1.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.recalling">
            <summary>
                Indicates if the character is being recalled/despawned with a fade-out effect. When
                true, character fades out over 1 second before being destroyed.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.reducedLife">
            <summary>
                Tracks if player has lost a life but hasn't respawned yet. Set true when player dies
                and reset on revival. Prevents multiple life deductions for a single death.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.rollingFrames">
            <summary>
                Current frame of the rolling animation sequence. Incremented based on time
                progression during rolls. Used to display the appropriate sprite frame from the
                rolling animation set on the sprite sheet.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.rollingTime">
            <summary>
                Duration remaining for the rolling animation after landing from a high fall. Set to
                0.133 seconds when landing with high velocity (yI &lt; -300) if doRollOnLand is
                true. Prevents other actions during the roll animation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.showGestureTimer">
            <summary>
                Timer controlling gesture animation display duration. Incremented while gesture is
                active and reset when gesture ends. Manages the timing of victory poses and other
                character gestures.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.spurtCount">
            <summary>
                Tracks number of blood spurts created for artery effects. Limited to 5 spurts
                maximum. Used with impaledCounter for timing blood effect intervals.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.standingToeHeight">
            <summary>
                Character's toe height when standing in units. Default value of 4. Set in
                StopDucking method as the normal foot collision height.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.standingWaistHeight">
            <summary>
                Character's waist height when standing in units. Default value of 10. Set in
                StopDucking method as the normal waist collision height.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.stunTime">
            <summary>
                Duration in seconds remaining for the stun effect. Decremented each frame when
                greater than zero. During stun, the character cannot perform actions. Combined with
                dancingTime to trigger dancing animations. Set by various stun methods and can be
                reduced for heroes in DeathMatch mode.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.stunVocalDelay">
            <summary>
                Delay in seconds before playing stun voice lines. Calculated when stunned with
                random value between 0.2 and 0.7 seconds based on stun duration. Prevents audio spam
                from rapid stun effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.teaBagCheatEnabled">
            <summary>
                Static flag that enables a cheat/easter egg for tea-bagging defeated enemies.
                Activated by entering a specific code in the main menu. When enabled, allows players
                to deal "SelfEsteem" damage by ducking near dead units.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.timeBroBoostTime">
            <summary>
                Duration of time-based speed boost effect in seconds, likely from Time Bro's special
                ability. Counts down each frame and affects delta time calculations independently
                from high-five boosts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.toeHeight">
            <summary>
                Current toe/foot height for low collision detection. Default value of 4. Used in
                raycasts for detecting ground-level obstacles. Dynamically changes based on stance.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.waistHeight">
            <summary>
                Current waist height used for collision detection. Default value of 10. Dynamically
                changes based on stance (standing/ducking/dead). Used extensively in raycasts and
                obstacle detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.xBoxControlled">
            <summary>
                Deprecated field that is never used in the codebase. May have been intended for Xbox
                controller detection.
            </summary>
        </member>
        <!-- Input & Control Methods -->
        <member name="M:TestVanDammeAnim.AnyInput">
            <summary>
                Checks if any input button is currently pressed (movement, fire, special, jump, or
                high-five).
            </summary>
            <returns>True if any input is detected, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanUseSwitch">
            <summary>
                Indicates whether this character can activate switches. Default implementation
                returns true; subclasses can override to add conditions.
            </summary>
            <returns>True if the character can use switches, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CheckDashing">
            <summary>
                Manages dash state based on player input and sprint status. For local players,
                detects dash button presses and releases. For remote players, creates visual and
                audio effects when dash state changes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckInput">
            <summary>
                Main input processing method that handles all player and AI input. Stores previous
                input states, handles zombie AI input, processes player controller input, manages
                remote control of vehicles/projectiles, handles idle timeout and kick detection, and
                integrates special abilities and gestures.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckTriggerActionInput">
            <summary>
                Processes input commands from trigger actions for scripted sequences. Handles
                movement commands with pathfinding, processes AI commands, tracks command
                completion, and integrates with PathAgent for navigation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckWhetherShouldClearInput">
            <summary>
                Virtual method for input clearing logic. Empty in base class, designed for override
                in derived classes to implement custom input clearing conditions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ClearAllInput">
            <summary>
                Performs a comprehensive reset of all input states. Clears current and previous
                states for movement, jumping, fire, special, high-five, and taunt buttons.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ClearFireInput">
            <summary>
                Resets all fire-related input states including fire, special abilities, and
                high-five inputs. Used to clear attack inputs when needed.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.DebugShowInput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Debug method to display current input state. Shows formatted string with L/R/U/D/J/C
                states when debug mode is enabled.
            </summary>
            <param name="left">Left input state</param>
            <param name="right">Right input state</param>
            <param name="up">Up input state</param>
            <param name="down">Down input state</param>
            <param name="jump">Jump input state</param>
            <param name="climb">Climb input state</param>
        </member>
        <member name="M:TestVanDammeAnim.GetEnemyMovement">
            <summary>
                Retrieves AI input for enemy-controlled characters. Calls enemyAI or EnemyAI
                component for input and passes multiple input references for various actions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.GetSprintValue">
            <summary>
                Returns the current sprint state of the character.
            </summary>
            <returns>True if the character is sprinting, false otherwise.</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsPressingDown">
            <summary>
                Returns whether the down input is currently being pressed.
            </summary>
            <returns>True if the down button is currently held, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsPressingLeftOrRight">
            <summary>
                Checks if the player is pressing either left or right directional input. Used for
                movement detection and control state queries.
            </summary>
            <returns>True if left or right input is active</returns>
        </member>
        <member name="M:TestVanDammeAnim.MustIgnoreHighFiveMeleePress">
            <summary>
                Determines if high-five/melee input should be ignored based on current state.
                Returns true if holding a grenade/mook or using any special abilities.
            </summary>
            <returns>True if the input should be ignored, false if it can be processed</returns>
        </member>
        <member name="M:TestVanDammeAnim.PressDashButton">
            <summary>
                Initiates dashing when the dash button is pressed, but only if the character is not
                already dashing and is moving left or right.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PressHighFiveMelee(System.Boolean)">
            <summary>
                Handles the high-five/melee button press with complex interaction priority logic.
                Checks for nearby grenades, mooks, switches, teleport doors, citizens, and other
                players. Prioritizes interactions based on game mode, proximity, and current state.
            </summary>
            <param name="forceHighFive">Forces a high-five attempt regardless of other potential interactions</param>
        </member>
        <member name="M:TestVanDammeAnim.PressSpecial">
            <summary>
                Initiates special ability use when the special button is pressed. Only activates if
                the character is not covered in acid and not performing a melee attack.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PressSpecial2">
            <summary>
                Placeholder method for secondary special ability activation. Currently only resets
                the animation frame to 0.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseDashButton">
            <summary>
                Stops dashing when the dash button is released, calling StopDashing to handle dash
                end logic.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseFire">
            <summary>
                Virtual method called when the fire button is released. Empty implementation for
                subclasses to add weapon-specific release behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseSpecial">
            <summary>
                Virtual method called when the special ability button is released. Empty
                implementation for subclasses to override.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunForcedInput">
            <summary>
                Processes forced input timers that override player control. Manages hold timers for
                up, left, right directions and forces specific inputs while timers are active.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopLeftRightInputFromHanging">
            <summary>
                Clears horizontal movement input when hanging. Prevents left/right movement while
                character is in hanging state.
            </summary>
        </member>
        <!-- Input & Control Properties -->
        <member name="P:TestVanDammeAnim.InputBits">
            <summary>
                Gets or sets the packed input states for network synchronization. This property
                packs 11 boolean input flags into a single short value for efficient network
                transmission.
            </summary>
        </member>
        <!-- Input & Control Fields -->
        <member name="F:TestVanDammeAnim.airDashJumpGrace">
            <summary>
                Grace period timer allowing jumps shortly after air dashing. Provides a brief window
                where jump input is accepted even if not technically grounded. Enables fluid air
                dash to jump combos for advanced movement.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.blockMovementForGesture">
            <summary>
                Prevents movement input during gesture animations. Set to true when starting
                gestures and blocks movement processing until gesture completes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.buttonGesture">
            <summary>
                Current frame's gesture button input state from player controls. Used with
                wasButtonGesture for edge detection to trigger gesture-based actions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.buttonHighFive">
            <summary>
                Current frame's high-five button state. True when high-five/interaction button is
                pressed. Triggers cooperative high-five actions when near other players. Also used
                for general player interactions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.buttonJump">
            <summary>
                Current frame's jump button state. True when jump button is pressed, false when
                released. Primary input for jumping, wall jumping, and various jump-based mechanics.
                Used with wasButtonJump for edge detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.buttonTaunt">
            <summary>
                Current frame's taunt button state. True when taunt/gesture button is pressed.
                Allows players to perform character-specific taunts, gestures, or victory poses.
                Adds personality to gameplay.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canFireDelay">
            <summary>
                Cooldown timer preventing immediate firing after certain actions. Set to 0.3 seconds
                after detonating remote car and 0.25 seconds after creating one. Blocks fire and
                special inputs while positive to prevent accidental double-actions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.climbButton">
            <summary>
                Climbing input state from AI controls. Used by enemy AI to control climbing behavior
                on ladders and walls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.dashButton">
            <summary>
                Current frame's dedicated dash button state. Alternative to double-tap dashing,
                provides direct dash control. When pressed with direction, initiates ground or air
                dash based on character state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.down">
            <summary>
                Current frame's down directional input state. True when down is pressed. Used for
                ducking, dropping through platforms, aiming downward, and sliding mechanics.
                Essential for defensive and movement options.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.fire">
            <summary>
                Current frame's state of the fire/shoot button input. Controls shooting mechanics,
                gun animations, and remote projectile control. Prevented during wall climbing,
                ladder use, or pushing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdDownTime">
            <summary>
                Timer for forcing downward input. Field exists but no active usage found in current
                implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdLeftTime">
            <summary>
                Timer for forcing leftward movement. Set to 0.3 seconds in certain conditions and
                forces left input while active. Decrements each frame when greater than 0.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdRightTime">
            <summary>
                Timer for forcing rightward input. Field exists but no active usage found in current
                implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdStillTime">
            <summary>
                Timer that prevents acceleration and facing direction changes when active. Checked
                in AddSpeedLeft(), AddSpeedRight(), and CheckFacingDirection(). Does not stop
                existing movement, only prevents adding new speed. Decrements each frame when
                greater than 0.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdUpTime">
            <summary>
                Timer for forcing upward input. Field exists but no active usage found in current
                implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastButtonJumpTime">
            <summary>
                Timestamp of the most recent jump button press. Used for jump buffering system - if
                player presses jump slightly before landing, jump executes upon touchdown. Creates
                more responsive controls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.left">
            <summary>
                Current frame's left directional input state. True when left is pressed. Primary
                horizontal movement input for moving left. Combined with other inputs for dashing,
                wall climbing, and special moves.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pressedJumpInAirSoJumpIfTouchGroundGrace">
            <summary>
                Grace period timer for jump input buffering while airborne. When jump is pressed in
                air, this timer counts down. If player lands while timer is positive, automatic jump
                occurs. Standard platformer quality-of-life feature.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.right">
            <summary>
                Current frame's right directional input state. True when right is pressed. Primary
                horizontal movement input for moving right. Combined with other inputs for dashing,
                wall climbing, and special moves.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.special">
            <summary>
                Current frame's state of the special ability button input. Cleared when
                acid-covered, in melee, dead, or controlled by AI. Used to trigger special
                abilities.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.specialDown">
            <summary>
                Tracks if special button is currently pressed. Reset during initialization and
                various game states. Part of input state management system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.sprint">
            <summary>
                Current frame's sprint modifier state. True when sprint/run button is held. Modifies
                movement speed when combined with directional inputs. May affect other actions like
                longer jumps or faster climbing.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.up">
            <summary>
                Current frame's up directional input state. True when up is pressed on D-pad, analog
                stick, or keyboard. Used for aiming upward, climbing ladders/walls, entering doors,
                and menu navigation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasButtonGesture">
            <summary>
                Previous frame's gesture button state. Used for edge detection to determine when the
                gesture button is first pressed.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasButtonHighFive">
            <summary>
                Field that is only set to false in ClearAllInput(). Never read or used elsewhere in
                the codebase and has no functional purpose.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasButtonJump">
            <summary>
                Previous frame's jump button state. Used with buttonJump to detect button press
                (false to true) and release (true to false) events. Essential for preventing jump
                spam and enabling precise jump control.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasButtonTaunt">
            <summary>
                Previous frame's taunt button state. Used for edge detection to trigger taunts on
                button press. Prevents continuous taunt animation while button is held, ensuring
                single taunt per press.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasClimbButton">
            <summary>
                Previous frame's climb button state from AI controls. Used for edge detection of AI
                climbing inputs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasDown">
            <summary>
                Previous frame's down directional state. Used for detecting new down presses for
                actions like initiating duck, platform drops, or slides. Enables proper state
                transitions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasFire">
            <summary>
                Previous frame's state of the fire button, used for edge detection. Triggers
                StartFiring() on press and StopFiring() on release, also used in death match
                invulnerability checks.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasLeft">
            <summary>
                Previous frame's left directional state. Critical for double-tap dash detection -
                tracks time between taps. Also used for detecting direction changes and state
                transitions in movement system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasRight">
            <summary>
                Previous frame's right directional state. Critical for double-tap dash detection -
                tracks time between taps. Also used for detecting direction changes and state
                transitions in movement system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasSpecial">
            <summary>
                Previous frame's state of the special button, used for edge detection. Compared with
                current special state to detect new button presses vs held inputs.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasSpecialDown">
            <summary>
                Previous frame's special button state. Used for edge detection to identify button
                press and release events. Companion to specialDown for input tracking.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasSprint">
            <summary>
                Previous frame's sprint modifier state. Enables detection of sprint press/release
                for smooth speed transitions. Helps manage acceleration and deceleration in movement
                system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasUp">
            <summary>
                Previous frame's up directional state. Enables detection of up press/release events.
                Used for initiating climbs, detecting input combinations, and preventing continuous
                up-triggered actions.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasXBoxFireDown">
            <summary>
                Previous frame's Xbox controller fire button state. Field declared but no usage
                found in current implementation. Likely reserved for Xbox-specific input handling.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasdashButton">
            <summary>
                Previous frame's dash button state. Used for edge detection to trigger single dash
                per button press. Prevents continuous dashing while button is held, ensuring
                controlled dash execution.
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:TestVanDammeAnim.AssignPushingTime">
            <summary>
                Sets a brief timer when pushing blocks and cancels any rolling animation. Called
                when the character begins pushing a moveable block.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CanBeImpaledByGroundSpikes">
            <summary>
                Determines whether the character can be impaled by ground spike traps. Characters
                cannot be impaled while invulnerable or while wall-dragging.
            </summary>
            <returns>True if the character can be impaled by ground spikes, false if protected by invulnerability or wall-dragging state</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanCheckClimbAlongCeiling">
            <summary>
                Checks if ceiling climbing mechanics should be evaluated by detecting nearby hanging
                points. Used to determine if the character can transition to ceiling hanging state.
            </summary>
            <returns>True if ceiling climbing should be checked (hanging points detected and not ducking/pressing down), false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanDoRollOnLand">
            <summary>
                Determines whether the character should perform a roll when landing based on
                downward velocity.
            </summary>
            <returns>True if downward velocity exceeds -350 and rolling is allowed; otherwise, false.</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanTouchCeiling">
            <summary>
                Determines whether the character can interact with ceilings.
            </summary>
            <returns>True if the character can touch ceilings; otherwise, false.</returns>
        </member>
        <member name="M:TestVanDammeAnim.CheckClimbAlongCeiling">
            <summary>
                Handles ceiling climbing/hanging mechanics when transitioning from wall constraints.
                Performs upward raycasts to find ceiling attachment points and initiates hanging
                state when appropriate conditions are met.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckForCheckPoints">
            <summary>
                Checks if character is touching checkpoints at current position or slightly above
                ground level. Calls ReachedCheckPoint if checkpoint contact is detected.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckForQuicksand">
            <summary>
                Manages quicksand detection and transition effects. Tracks quicksand state changes,
                creates appropriate splash and particle effects on entry/exit, plays
                surface-specific sounds, and disables blast velocity while in quicksand.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckForQuicksandDeath">
            <summary>
                Monitors for lethal quicksand submersion and applies crush damage after 2-second
                delay. Checks if character is in quicksand at 16 units above their Y position and
                deals fatal damage if choke counter exceeds 2 seconds threshold.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckForTraps(System.Single)">
            <summary>
                Comprehensive trap detection system. Checks for acid pools, barbed wire, spikes, and
                mines. Handles impalement, damage, and movement constraints from environmental
                hazards.
            </summary>
            <param name="yIT">Y velocity reference that may be modified by trap interactions</param>
        </member>
        <member name="M:TestVanDammeAnim.CheckRescues">
            <summary>
                Checks for nearby heroes to rescue and grants rescue bonuses. Provides
                invulnerability, shows start bubble, and adds brutality grace period.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainToCeiling(System.Single@)">
            <summary>
                Handles collision detection with ceilings and manages chimney flip mechanics when
                the character hits walls and ceilings simultaneously.
            </summary>
            <param name="yIT">Reference to the vertical movement delta that will be constrained.</param>
            <returns>True if a ceiling constraint was applied; otherwise, false.</returns>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainToFloor(System.Single@)">
            <summary>
                Constrains the character's vertical movement to prevent falling through the floor,
                handling landing transitions and ground snapping.
            </summary>
            <param name="yIT">Reference to the vertical movement delta that will be constrained.</param>
            <returns>True if the character was constrained to the floor; otherwise, false.</returns>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainToFragileBarriers(System.Single@,System.Single)">
            <summary>
                Handles collision and destruction of fragile barriers like doors and glass. Sends
                damage messages to break barriers on contact, creates visual effects at impact
                points, and handles special door opening mechanics for living players.
            </summary>
            <param name="xIT">Reference to horizontal velocity, may be modified if constrained by barrier</param>
            <param name="radius">The collision detection radius</param>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainToMookBarriers(System.Single@,System.Single)">
            <summary>
                Prevents movement through enemy barriers while allowing friendly units to pass. Uses
                player numbers to determine if a barrier should block movement.
            </summary>
            <param name="xIT">Reference to horizontal velocity, set to 0 if blocked by enemy barrier</param>
            <param name="radius">The collision detection radius</param>
        </member>
        <member name="M:TestVanDammeAnim.ConstrainToWalls(System.Single@,System.Single@)">
            <summary>
                Complex wall collision detection and constraint system that prevents the character
                from passing through walls and enables wall climbing. Performs multiple raycasts at
                different heights, handles wall climbing initiation, manages wall drag mechanics,
                and integrates with various movement systems including ledge grabbing and block
                pushing.
            </summary>
            <param name="yIT">Reference to vertical velocity, modified if wall climbing or dragging occurs</param>
            <param name="xIT">Reference to horizontal velocity, modified if movement is constrained by walls</param>
            <returns>True if the character was constrained by a wall, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.HitCeiling(UnityEngine.RaycastHit)">
            <summary>
                Handles the character's response when hitting a ceiling, including position
                adjustment, sound effects, and potential transition to hanging state.
            </summary>
            <param name="ceilingHit">The raycast hit information for the ceiling collision.</param>
        </member>
        <member name="M:TestVanDammeAnim.IsAboveLadder">
            <summary>
                Checks if the character is positioned above a ladder by using Physics.OverlapSphere
                with a -1 unit vertical offset. Used for ladder grab detection from above.
            </summary>
            <returns>True if positioned above a ladder</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsInStealthMode">
            <summary>
                Checks if the unit is in stealth mode by being crouched in grass. Requires the unit
                to be alive, crouching, player-controlled, standing still, and within grass.
            </summary>
            <returns>True if in stealth mode</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsNearbyLadder(System.Single,System.Single)">
            <summary>
                Checks if a ladder is nearby at the specified offset position. Used for
                proximity-based ladder detection in various movement states.
            </summary>
            <param name="xOffset">Horizontal offset from character position</param>
            <param name="yOffset">Vertical offset from character position</param>
            <returns>True if a ladder is detected at the offset position</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsOverFinish(System.Single@)">
            <summary>
                Comprehensive victory zone detection that checks if the character has reached the
                level finish area. Handles helicopter attachment, portal exits, level completion
                triggers, and applies appropriate invulnerability and state changes for level
                completion.
            </summary>
            <param name="ladderXPos">Reference to ladder X position, modified if attaching to helicopter</param>
            <returns>True if the character is in the finish/victory zone</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsOverLadder(System.Single@)">
            <summary>
                Checks if the character is positioned over a ladder. Resets jump-related timers and
                manages ladder block notifications when on a ladder.
            </summary>
            <param name="ladderXPos">Outputs the X position of the detected ladder</param>
            <returns>True if positioned over a ladder</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsOverLadder(System.Single,System.Single@)">
            <summary>
                Checks if the character is over a ladder with a horizontal offset. Handles ladder
                detection, jump timer resets, double jump management, and ladder block entry/exit
                notifications. Tracks current and previous ladder blocks for state management.
            </summary>
            <param name="xOffset">Horizontal offset for ladder detection</param>
            <param name="ladderXPos">Outputs the X position of the detected ladder</param>
            <returns>True if a ladder is detected at the offset position</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsSubmergedInPool">
            <summary>
                Extended submersion detection that treats quicksand and oil as equivalent to pool
                submersion. Overrides base class functionality by combining base pool detection with
                quicksand and oil state checks using logical OR operation.
            </summary>
            <returns>True if character is submerged in pool, quicksand, or oil; false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsSurroundedByBarbedWire">
            <summary>
                Checks if character is surrounded by barbed wire that can cause damage during
                movement.
            </summary>
            <returns>True if surrounded by damaging barbed wire, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.IsWithinGrass">
            <summary>
                Checks if the unit is inside grass or substance on both sides. Tests positions 5
                units to the left and right of the character.
            </summary>
            <returns>True if grass is detected on both sides</returns>
        </member>
        <member name="M:TestVanDammeAnim.Land">
            <summary>
                Comprehensive landing handler that processes all aspects of ground contact including
                state resets, damage calculation, visual effects, platform interactions, and sound
                effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.LandInOil">
            <summary>
                Initializes oil effect materials and applies them to both character and gun sprites.
                Creates oily materials using "Unlit/Depth Cutout With Image - Oily" shader with lazy
                instantiation pattern. Sets up UV2 coordinates and configures sprite size vectors
                for proper oil effect rendering.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.LeaveOil">
            <summary>
                Placeholder method for leaving oil areas. Actual oil cleanup logic is handled by the
                continuous RunHasLeftOilTest method which manages gradual oil level decay and
                material restoration.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.LedgeGrapple(System.Boolean,System.Boolean,System.Single,System.Single)">
            <summary>
                Handles ledge grabbing mechanics when the character is near an edge while jumping or
                falling. Initiates ledge grab state when conditions are met and adjusts character
                position for proper alignment.
            </summary>
            <param name="left">Whether the character is moving left</param>
            <param name="right">Whether the character is moving right</param>
            <param name="radius">The horizontal detection radius for ledge detection</param>
            <param name="heightOpenOffset">The vertical offset for ledge height calculation</param>
        </member>
        <member name="M:TestVanDammeAnim.PickupPickupables">
            <summary>
                Attracts nearby pickupable items when character is alive. Uses attraction radius to
                automatically collect items within range.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PushGrassAway">
            <summary>
                Pushes grass away from the unit and plays appropriate environmental sounds. Performs
                raycasts to find ground blocks, applies forces to jiggle doodads. Plays different
                sounds for grass versus blood pools based on doodad type.
            </summary>
            <returns>True if any grass was pushed away</returns>
        </member>
        <member name="M:TestVanDammeAnim.ReachedCheckPoint">
            <summary>
                Virtual method called when character reaches a checkpoint. Empty implementation that
                can be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RollOnLand">
            <summary>
                Initiates the rolling animation sequence when landing with sufficient velocity,
                setting the character to rolling state for 13 frames.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunBlindStars">
            <summary>
                Creates periodic blind star visual effects around blinded characters. Spawns
                shrapnel stars above character head with randomized positioning.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunClimbingLadder">
            <summary>
                Handles all ladder climbing physics and movement logic, including vertical movement
                based on input, horizontal positioning, and exit conditions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunHasLeftOilTest">
            <summary>
                Manages gradual oil level decay and material transitions when leaving oil areas.
                Decreases oil level over time using deltaTime, updates material opacity properties,
                and handles cleanup by restoring original materials when oil level reaches zero.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunZombieEffects">
            <summary>
                Handles ongoing zombie revival visual effects. Creates periodic zombie passive
                effects with random timing intervals.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StartHanging">
            <summary>
                Initiates the ceiling hanging state if the character is not ducking.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopHanging">
            <summary>
                Transitions the character from hanging state to jumping state.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopRolling">
            <summary>
                Ends the rolling state by setting the character to idle or running based on current
                input.
            </summary>
        </member>
        <!-- Environmental Interaction Properties -->
        <member name="P:TestVanDammeAnim.WallClimbing">
            <summary>
                Gets a value indicating whether the character is currently climbing a wall.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.WallDrag">
            <summary>
                Gets or sets a value indicating whether the character is sliding down a wall.
                Setting this property manages wall drag audio effects, knife climbing state, and
                parachute deactivation.
            </summary>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:TestVanDammeAnim.armUpInAnticipationWallClimb">
            <summary>
                Controls arm position during wall climb anticipation. When true, displays the
                character with arm raised (frame offset +1) in preparation for wall climbing.
                Provides visual feedback that the character is ready to climb.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.barrierLayer">
            <summary>
                LayerMask defining mobile barriers for collision. Set to "MobileBarriers" layer.
                Used for specialized mobile obstacle detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.bossBlockPieceCurrentlyStandingOn">
            <summary>
                Special reference for boss block platforms. Set via GetComponent when landing on
                boss blocks. Calls StandingOnBlock each frame and LandOn when landing with velocity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.breakDoorsOpen">
            <summary>
                Determines damage type when hitting doors. When true, sends DamageType.Crush to
                doors. When false, sends DamageType.Melee. Modifies door destruction behavior on
                collision.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canChimneyFlip">
            <summary>
                Indicates whether character can perform chimney flip maneuver. Set by wall detection
                logic when appropriate conditions are met. Used in ConstrainToWalls to trigger
                chimney flip animations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.canLedgeGrapple">
            <summary>
                Determines if this character can grab and hang from ledges. Default true allows
                standard ledge grappling behavior. Set to false for characters that should fall
                instead of grabbing ledges. Checked during collision detection with ledges.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.currentLadderBlock">
            <summary>
                Reference to the ladder block character is currently on. Used to track state
                transitions between ladders and calls OnBroExit when leaving a ladder.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.fragileLayer">
            <summary>
                LayerMask defining fragile/destructible objects. Set to "DirtyHippie" layer.
                Combined with ground and platform layers for composite ground detection including
                destructible terrain.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.groundLayer">
            <summary>
                LayerMask defining which layers are considered solid ground for collision detection.
                Includes "Ground", "LargeObjects", and "IndestructibleGround" layers. Primary layer
                for floor, ceiling, and wall collision detection throughout the movement system.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.groundTransform">
            <summary>
                Reference to current ground or platform standing on. Set in AssignGround when
                landing and used as part of parenting system for moving platforms. Reset to null in
                ShiftUnitWithParent.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.groundTransformLocalPos">
            <summary>
                Local position on ground or platform. Set in AssignGround with different calculation
                for Tank vs normal ground. Returned by GetParentedToPos when grounded.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.isInOil">
            <summary>
                Whether character is covered in oil. Set by LandInOil method and applies visual oil
                shader effect. Automatically clears when oilLevel reaches 0.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.isInQuicksand">
            <summary>
                Whether character is currently in quicksand. Applies 0.4x speed multiplier, 3x
                slower animation rate, prevents air dashing, and can cause death if submerged for 2+
                seconds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.knifeClimbStabHeight">
            <summary>
                Vertical distance in units between knife stab animations during wall climbing.
                Default value of 18 units creates a rhythmic stabbing pattern as the character
                climbs. Works with lastKnifeClimbStabY to trigger stab effects at regular intervals.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ladderClimbingTransitionFrames">
            <summary>
                Counter for ladder mounting/dismounting transition animation. Decrements each frame
                while playing transition animation. When it reaches 0, normal ladder climbing
                begins. Provides smooth visual transition onto ladders.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ladderLayer">
            <summary>
                LayerMask defining climbable ladder objects. Set to "Ladders" layer. Core to
                climbing mechanics with extensive use in ladder detection methods like IsOverLadder
                and FindNearbyLadder.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ladderX">
            <summary>
                Stores X position of current ladder for alignment. Set by IsOverLadder methods when
                ladder is detected. Used to align character to ladder position and passed to
                AttachToHelicopter for rope ladders.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastKnifeClimbStabY">
            <summary>
                Stores the Y position of the last knife stab during wall climbing. Used to determine
                when to play the next stab animation and sound effect. Stabs occur every
                knifeClimbStabHeight units of vertical movement to create rhythmic climbing
                feedback.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.newRaycastHit">
            <summary>
                Secondary raycast storage for complex collision checks. Used exclusively in chimney
                flip detection logic, allowing nested raycast checks without overwriting the main
                raycastHit.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.oilLevel">
            <summary>
                Amount of oil coverage on character from 0 to 1. Increases by 0.01 when landing in
                oil and decreases by 1 per second. Controls oil shader intensity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.openDoorsLayer">
            <summary>
                LayerMask defining interactive doors and movable objects. Set to "Movetivate" layer.
                Used for door collision checks at high speed and triggers damage/opening mechanics.
                Excludes parachute objects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.platformLayer">
            <summary>
                LayerMask defining layers that act as platforms (can stand on but pass through from
                below). Set to "Platform" layer. Often combined with groundLayer for comprehensive
                ground detection.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.prevLadderBlock">
            <summary>
                Tracks previous ladder block for state management. Stores previous ladder before
                updating current and ensures OnBroExit is called on the previous ladder when
                switching. Prevents duplicate exit calls.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.quicksandChokeCounter">
            <summary>
                Timer until quicksand kills the character. Initialized to 2 seconds. Reset to 0 when
                entering quicksand and increments while head is submerged. Character dies when
                counter reaches 2.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.raycastHit">
            <summary>
                Primary storage for Physics.Raycast results. Reused throughout for ground detection,
                wall checks, ceiling checks, and damage application. Stores hit point, normal,
                distance, and collider information.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.raycastHitWalls">
            <summary>
                Stores raycast results for wall collision detection. Extensively used in
                ConstrainToWalls for collision detection at multiple heights, ledge grabbing,
                footstep sounds, and wall transform assignment.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.switchesLayer">
            <summary>
                LayerMask likely intended for interactive switches and triggers. Not initialized or
                used in TestVanDammeAnim base implementation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.victoryLayer">
            <summary>
                LayerMask defining level completion/victory trigger areas. Set to "Finish" layer.
                Used in IsOverFinish method to detect when player reaches level completion zones.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallClimbAnticipation">
            <summary>
                Tracks whether the character is in wall climb anticipation state. When true, the
                character is preparing to climb and may show anticipation animations. Used to
                coordinate the wall climbing animation sequence before actual climbing begins.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasInQuicksand">
            <summary>
                Tracks previous frame's quicksand state for edge detection. Compared with
                isInQuicksand to detect when character enters or exits quicksand.
            </summary>
        </member>
        <!-- Audio System Methods -->
        <member name="M:TestVanDammeAnim.CanLaugh">
            <summary>
                Checks if character can play laughter sounds based on available sound assets.
            </summary>
            <returns>True if laugh sounds are available, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttack2Sound(System.Single)">
            <summary>
                Plays secondary attack sound effect for special combat actions.
            </summary>
            <param name="volume">Volume level for the sound effect (default 0.35)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttack3Sound(System.Single)">
            <summary>
                Plays tertiary attack sound effect for advanced combat actions.
            </summary>
            <param name="volume">Volume level for the sound effect (default 1.0)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttack4Sound(System.Single,System.Single)">
            <summary>
                Plays quaternary attack sound effect with custom volume and pitch settings.
            </summary>
            <param name="volume">Volume level for the sound effect (default 1.0)</param>
            <param name="pitch">Base pitch modifier (default 0.9)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttackSound">
            <summary>
                Plays primary attack sound effect with default volume (0.3).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttackSound(System.Single)">
            <summary>
                Plays primary attack sound effect with specified volume.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayAttractedSound">
            <summary>
                Plays attraction sound effect when character is attracted to or influenced by
                external forces.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayBassDropShortSound">
            <summary>
                Plays shortened bass drop sound effect with higher volume and 0.3 second cooldown.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayBassDropSoundSound">
            <summary>
                Plays bass drop sound effect for dramatic moments with 0.3 second cooldown.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayBleedSound">
            <summary>
                Plays a bleeding sound effect when the character bleeds. Uses a fixed volume of 0.45
                with no pitch variation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayBurnSound(System.Single)">
            <summary>
                Plays burning/fire damage sound effect with randomized pitch. Lazy loads the sound
                instance on first use and plays from the burn sound array with pitch varying between
                0.6 and 1.0 for variety.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayChestBurstSound(System.Single)">
            <summary>
                Plays alien chest burst sound effect at character position. Note: The pitch
                parameter is currently unused - sound always plays at 1.0f pitch.
            </summary>
            <param name="pitch">Pitch modifier for the sound effect (currently unused)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayChimneyFlipSound(System.Single)">
            <summary>
                Plays chimney flip sound effect by calling the dash sound method.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayChokeSound">
            <summary>
                Plays choking sound effect with randomized pitch variation for suffocation or
                strangulation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayClimbSound">
            <summary>
                Plays sound effect for general climbing actions (reuses jump sound).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayConfusedSound">
            <summary>
                Plays confused sound effect for disoriented character states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayDashSound(System.Single)">
            <summary>
                Plays dashing movement sound effect with specified volume.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayDeathGargleSound">
            <summary>
                Plays a death gargle sound effect during character death. Uses pitch shift for
                variation at 0.45 volume.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayDeathSound">
            <summary>
                Plays death sound effects using hit sounds array. Volume is reduced to 50% when no
                hit sounds are available (empty array).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayDecapitateSound">
            <summary>
                Plays a dismemberment sound effect when the character is decapitated. Uses a fixed
                volume of 0.5 with no pitch variation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayDizzieSound(System.Single,System.Single)">
            <summary>
                Plays dizzy/stunned sound effect with pitch randomization in &#xB1;0.05 range plus
                character-specific pitch shift for natural variation.
            </summary>
            <param name="volume">Volume level for the sound effect (default 0.33)</param>
            <param name="pitch">Base pitch value with &#xB1;0.05 random variation applied (default 1.0)</param>
            <returns>AudioSource component playing the sound</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlayExitLadderSound">
            <summary>
                Plays sound effect for exiting a ladder (reuses jump sound).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayFallDamageSound">
            <summary>
                Plays a fall damage impact sound effect. Convenience method that calls the
                overloaded version with 0.4 volume.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayFallDamageSound(System.Single)">
            <summary>
                Plays a fall damage impact sound effect with specified volume. Used when the
                character takes damage from falling.
            </summary>
            <param name="v">Volume for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayFallSound(System.Single)">
            <summary>
                Plays a falling or air movement sound effect. Returns the AudioSource to allow
                external manipulation of the playing sound.
            </summary>
            <param name="v">Volume for the sound effect (default 0.3)</param>
            <returns>The AudioSource playing the fall sound</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlayFizzleSound(System.Single)">
            <summary>
                Plays acid/chemical damage sound effect with slight pitch variation. Lazy loads the
                sound instance on first use and plays from the fizzle sound array with pitch between
                0.95 and 1.05 for subtle variety.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayFlexSound(System.Single)">
            <summary>
                Virtual method for playing flex sound. Empty implementation that can be overridden
                by derived classes.
            </summary>
            <param name="volumne">Volume level for the sound effect (note: parameter name has typo)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayFootStepSound(UnityEngine.AudioClip[],System.Single,System.Single)">
            <summary>
                Core footstep sound playing method with player versus NPC audio optimization.
                Players hear full volume while NPCs play at 50% volume and only when visible on
                screen. Includes footstep delay gating to prevent audio spam.
            </summary>
            <param name="clips">Array of audio clips to randomly select from for footstep sound</param>
            <param name="v">Volume level for the footstep sound</param>
            <param name="p">Pitch level for the footstep sound</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayFreezeScreamSound">
            <summary>
                Plays freeze scream sound effect with randomized pitch variation when character is
                frozen.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayGibSound">
            <summary>
                Plays gibbing sounds with variation based on frozen state. Plays frozen gib sounds
                if the character is frozen, otherwise plays normal death sounds.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayGreetingSound">
            <summary>
                Plays greeting sound effect for character interactions and high-five initiations.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayHighFiveSound">
            <summary>
                Plays high-five celebration sound with 0.3 second cooldown to prevent spam.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayHitSound(System.Single)">
            <summary>
                Plays hit reaction sounds with conditional logic based on health state. If alive and
                hurt sounds are available, plays hurt sound with a 0.1 second cooldown. Otherwise
                plays effort sounds. Scales volume to 0.37 for hurt sounds.
            </summary>
            <param name="v">Base volume for the sound effect (default 0.4)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayHurtSound(System.Single)">
            <summary>
                Directly plays a hurt sound effect when the character takes damage. Updates the last
                hit sound time to enforce cooldown between hurt sounds.
            </summary>
            <param name="v">Volume for the sound effect (default 0.3)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayJumpSound">
            <summary>
                Plays appropriate jumping sound based on current ground surface type. Uses identical
                surface detection logic as landing sounds but with jump-specific audio variants.
                Plays at slightly higher volume (0.65f) compared to landing sounds.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayKnifeClimbSound">
            <summary>
                Plays knife climbing sound effects with automatic variation cycling. Increments
                sound counter and uses modulo operation to cycle through available knife wall
                sounds. Plays at 0.2f volume and 1f pitch with 3D positioning.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayLandSound">
            <summary>
                Plays appropriate landing sound based on current ground surface type. Supports six
                surface types (Dirt, Stone, Metal, Wood, Grass, Slime) with corresponding sound
                arrays. All landing sounds play at 0.6f volume and 1f pitch.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayLaughterSound">
            <summary>
                Plays laughter sound effect with 2-second cooldown to prevent spam. Used for
                character celebration and reactions.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayMuffledScreamsSound">
            <summary>
                Plays muffled screams sound effect typically used during alien face hugger attacks.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayPanicSound">
            <summary>
                Plays panic sound effect with randomized pitch variation for distressed character
                states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayPowerUpSound(System.Single)">
            <summary>
                Plays power-up sound effect with specified volume and default pitch.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayPowerUpSound(System.Single,System.Single)">
            <summary>
                Plays power-up sound effect with specified volume and pitch settings.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayPushBlockSound">
            <summary>
                Virtual method for playing block pushing sound. Empty implementation that can be
                overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayResurrectionSound(System.Single)">
            <summary>
                Plays resurrection sound effect with 2-second cooldown when character is revived or
                respawns.
            </summary>
            <param name="volume">Volume level for the sound effect (default 0.3)</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayRollLandSound">
            <summary>
                Virtual method for playing roll landing sound. Empty implementation that can be
                overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecial2Sound(System.Single)">
            <summary>
                Plays special ability 2 sound effect with specified pitch. Default overload that
                calls the volume/pitch variant.
            </summary>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecial2Sound(System.Single,System.Single)">
            <summary>
                Plays special ability 2 sound effect with custom volume and pitch settings.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecial3Sound(System.Single)">
            <summary>
                Plays special ability 3 sound effect with specified volume and default pitch.
            </summary>
            <param name="v">Volume level for the sound effect</param>
            <returns>AudioSource component playing the sound</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecial3Sound(System.Single,System.Single)">
            <summary>
                Plays special ability 3 sound effect with custom volume and pitch settings.
            </summary>
            <param name="v">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
            <returns>AudioSource component playing the sound</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecial4Sound(System.Single)">
            <summary>
                Plays special ability 4 sound effect with specified volume.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecialAttackSound(System.Single)">
            <summary>
                Plays special attack sound effect with specified volume.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecialSound">
            <summary>
                Plays special ability sound effect with default volume (0.8) and pitch (1.0).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecialSound(System.Single)">
            <summary>
                Plays special ability sound effect with specified volume and default pitch.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecialSound(System.Single,System.Single,System.Boolean)">
            <summary>
                Plays special ability sound effect with full control over volume, pitch, and reverb
                settings.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
            <param name="bypassReverb">Whether to bypass environmental reverb effects</param>
        </member>
        <member name="M:TestVanDammeAnim.PlaySpecialSound(System.Single,System.Single)">
            <summary>
                Plays special ability sound effect with specified volume and pitch.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayStunnedSound">
            <summary>
                Plays stunned sound effect by calling the dizzy sound method with default
                parameters.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayThrowHeavySound(System.Single)">
            <summary>
                Plays heavy throwing sound effect for objects like heavy weapons or large items.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayThrowLightSound(System.Single)">
            <summary>
                Plays light throwing sound effect for objects like grenades or light weapons.
            </summary>
            <param name="v">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayYeahSound(System.Single)">
            <summary>
                Plays celebration "yeah" sound effect with specified volume. Delegates to power-up
                sound system.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayYeahSound(System.Single,System.Single,System.Boolean)">
            <summary>
                Plays celebration "yeah" sound effect with full control over volume, pitch, and
                reverb. Delegates to power-up sound system.
            </summary>
            <param name="volume">Volume level for the sound effect</param>
            <param name="pitch">Pitch modifier for the sound effect</param>
            <param name="bypassReverb">Whether to bypass environmental reverb effects</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayZappedSound(System.Single)">
            <summary>
                Plays an electrical zapping sound effect when the character is electrocuted. Uses
                randomized pitch between 0.95 and 1.05 for variation.
            </summary>
            <param name="v">Volume for the sound effect (default 0.25)</param>
        </member>
        <member name="M:TestVanDammeAnim.RunWallDraggingAudio">
            <summary>
                Manages wall dragging audio effects for heroes with wall climb ability. Adjusts
                pitch and volume based on climbing state and vertical velocity.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetCurrentFootstepSound(UnityEngine.Collider)">
            <summary>
                Updates the current footstep sound type based on the ground collider's tag, but only
                if a footstep sound holder exists and the collider has a tag other than "Untagged".
            </summary>
            <param name="collider">The ground collider the character is touching.</param>
        </member>
        <!-- Audio System Properties -->
        <member name="P:TestVanDammeAnim.ShowGesturesMenu">
            <summary>
                Gets a value indicating whether the gestures menu should be displayed. Always false
                because the Gestures Menu is unimplemented.
            </summary>
        </member>
        <!-- Audio System Fields -->
        <member name="F:TestVanDammeAnim._lastLaughterSoundTime">
            <summary>
                Timestamp of the last laughter/taunt sound played. Used to prevent laughter sound
                spam by enforcing a minimum 2-second delay between plays. Manages audio cooldown for
                character taunts and victory sounds.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._lastResurectionSoundTime">
            <summary>
                Timestamp of the last resurrection sound played. Used to prevent resurrection sound
                spam by enforcing a minimum 2-second delay between plays. Ensures audio doesn't
                overlap during rapid revival attempts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.currentFootStepGroundType">
            <summary>
                Current terrain type string for footstep sound selection. Set from collider tags and
                used to select appropriate footstep sounds. Reset to empty when leaving ground.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.footstepDelay">
            <summary>
                Controls footstep sound timing with a default 0.5 second delay. Decrements each
                frame and must reach 0 before another footstep sound can play.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.knifeSoundCount">
            <summary>
                Cycles through knife climbing sound variations. Incremented with each knife climb
                action and used with modulo to select from sound array for audio variety.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastBassTime">
            <summary>
                Global static cooldown for bass drop sound effects. Prevents bass drop sounds within
                0.3 seconds of each other. Used for special announcer-style bass effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastFootStepGroundType">
            <summary>
                Stores previous ground type for footstep sound system. Initialized to
                GroundType.BrickBehind as the default terrain type.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastHighFiveTime">
            <summary>
                Global static cooldown for high-five sound effects. Ensures minimum 0.3 second delay
                between high-five sounds across all instances to prevent audio overlap.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.longGrassDelay">
            <summary>
                Minimum delay between long grass sound effects in seconds. Default value of 0.15
                seconds prevents grass sound spam when moving through vegetation.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.longGrassDelayTimer">
            <summary>
                Tracks time until next grass sound can play. Decrements each frame and is reset to
                longGrassDelay when a grass sound plays.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.sound">
            <summary>
                Primary audio system interface for all character sound effects including footsteps,
                attacks, death sounds, special abilities, and environmental sounds. Lazy initialized
                if null.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.soundHolder">
            <summary>
                Container for general sound effects used by the character. Stores various audio
                clips for actions like shooting, jumping, and taking damage.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.soundHolderFootSteps">
            <summary>
                Container specifically for footstep and movement-related sounds. Includes
                wallDragLoops array used for wall sliding audio effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wallDragAudio">
            <summary>
                Audio source for wall sliding sound effects. Created on demand when wall climbing
                and plays looping drag sounds. Volume and pitch adjusted based on slide speed.
            </summary>
        </member>
        <!-- Unit Management Methods -->
        <member name="M:TestVanDammeAnim.AttachToHelicopter(System.Single,Helicopter)">
            <summary>
                Attaches the character to a helicopter for level exit sequences. Adds the hero to
                the helicopter's attached list, parents the character to the ladder holder,
                positions them relative to the helicopter, and adjusts facing direction.
            </summary>
            <param name="ladderXPos">The ladder X position reference (unused)</param>
            <param name="helicopter">The helicopter instance to attach to</param>
            <returns>The helicopter's X position plus 13 units</returns>
        </member>
        <member name="M:TestVanDammeAnim.DischargePilotingUnit(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Exits piloting mode and restores character to normal state. Re-enables rendering,
                restores health, sets position/velocity, and optionally applies stun effects.
            </summary>
            <param name="newX">X position to place character after discharge</param>
            <param name="newY">Y position to place character after discharge</param>
            <param name="xI">X velocity to apply after discharge</param>
            <param name="yI">Y velocity to apply after discharge</param>
            <param name="stunPilot">Whether to stun the character after discharge</param>
        </member>
        <member name="M:TestVanDammeAnim.GetPilottedUnit">
            <summary>
                Gets the unit currently being piloted by this character.
            </summary>
            <returns>The piloted unit, or null if not piloting anything</returns>
        </member>
        <member name="M:TestVanDammeAnim.GrabHelicopterLadder">
            <summary>
                Placeholder method for grabbing the helicopter ladder. Currently has no
                implementation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StartPilotingUnit(Unit)">
            <summary>
                Initiates piloting mode by disabling character rendering and controls while
                transferring control to specified unit. Sets health to 10000, enables
                invulnerability, and stops UI bubbles.
            </summary>
            <param name="pilottedUnit">The unit this character will pilot</param>
        </member>
        <!-- Unit Management Properties -->
        <member name="P:TestVanDammeAnim.playerBubble">
            <summary>
                Gets the ReactionBubble instance appropriate for this player's number. Returns the
                corresponding bubble UI element based on the player's assigned number.
            </summary>
        </member>
        <!-- Unit Management Fields -->
        <member name="F:TestVanDammeAnim.ElgilbleToBeKicked">
            <summary>
                Whether this player can be kicked by teammates for being idle. Set true after 15
                seconds of no input with 2+ players. Reset to false on any input. Note: Field name
                contains typo (should be "Eligible").
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.broMustFailToWin">
            <summary>
                Marks bros that must fail or die to satisfy certain win conditions. When true,
                disables normal gibbing (sets canGib false) and only allows death from OutOfBounds
                damage. Used for special game modes or scenarios.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hasBeenKicked">
            <summary>
                Tracks whether the unit has been kicked by another character. Set to true in KickRPC
                when kick is received. Prevents duplicate kick processing and triggers kick
                animation and bubble display.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heldGrenade">
            <summary>
                Reference to grenade currently held by character for throwing back. Enables grenade
                catch-and-throw mechanics. Used to calculate throw velocity based on grenade weight.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heldMook">
            <summary>
                Reference to enemy (Mook) currently held by character. Enables enemy grab-and-throw
                mechanics. Position updates applied to held mook during carry.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.isOnHelicopter">
            <summary>
                Indicates whether the hero has boarded the extraction helicopter at level
                completion. Set to true when entering helicopter, changes playerNum to 5 for special
                handling. Used to track successful level extraction.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.kickPlayerBubble">
            <summary>
                Visual indicator shown above idle players that can be kicked by teammates. Changes
                material/color based on kick state. Only appears in multiplayer with 2+ players
                after 15 seconds of inactivity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastPathingTime">
            <summary>
                Timestamp of last AI pathfinding attempt. Enforces 0.1 second cooldown between
                pathfinding requests to prevent excessive calculations.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.nearbyMook">
            <summary>
                Reference to closest enemy available for interaction. Set to skinned mook on back if
                present, otherwise searches for nearby mook. Used for grab/interaction targeting.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.onBackOf">
            <summary>
                Reference to another unit this unit is riding on (piggyback riding). Used for
                special movement mechanics when one character carries another.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pathingAttempts">
            <summary>
                Counter for AI pathfinding attempts. Incremented on each attempt and stops trying
                after 10 attempts to prevent infinite loops. Reset when command completes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.pilottedUnit">
            <summary>
                Reference to the vehicle or unit currently being piloted by this character. Set when
                entering vehicles, cleared when exiting. When set, modifies UI display and input
                handling. Serialized for network synchronization.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.throwingHeldObject">
            <summary>
                Indicates if character is currently in throwing animation. Set true when starting
                throw and false when completed. Controls throwing animation state.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:TestVanDammeAnim.ActivateGun">
            <summary>
                Shows the gun sprite by setting it active. Counterpart to DeactivateGun, used to
                restore weapon visibility after states that hide it. Includes null check for safety.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateCeilingHeight">
            <summary>
                Calculates the height of the ceiling above the character using three upward raycasts
                (center, left, right). Returns the lowest ceiling point found, which is used for
                death animations to prevent visual clipping through level geometry.
            </summary>
            <returns>Height in units to the nearest ceiling above the character</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanReduceLives">
            <summary>
                Determines whether lives should be reduced when this character dies. Returns true
                for non-zombie characters, allowing normal life deduction. Zombie characters return
                false to prevent life loss on death.
            </summary>
            <returns>True if lives should be reduced on death, false for zombies</returns>
        </member>
        <member name="M:TestVanDammeAnim.DeactivateGun">
            <summary>
                Hides the gun sprite by setting it inactive. Used during death sequences, frozen
                states, and other situations where the weapon should not be visible. Includes null
                check for safety.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.GetFootPoofColor">
            <summary>
                Determines appropriate particle effect color based on environmental ground
                conditions. Uses priority-based detection: oil takes precedence over quicksand,
                which takes precedence over pool submersion. Returns BloodColor.None for normal
                ground.
            </summary>
            <returns>BloodColor enum value representing the appropriate particle effect color for current environment</returns>
        </member>
        <member name="M:TestVanDammeAnim.NotifyDeathType">
            <summary>
                Reports the character's death type to the statistics system for analytics tracking.
                Uses an internal flag to ensure the death is only reported once, preventing
                duplicate statistics entries.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PackState(UnityStream)">
            <summary>
                Serializes character state for network synchronization. Packs piloted unit, action
                state, and health. For heroes, also includes player number, hero type, and piloted
                unit again (serialized twice for heroes).
            </summary>
            <param name="stream">The network stream to write data to</param>
            <returns>The stream with packed data</returns>
        </member>
        <member name="M:TestVanDammeAnim.RunOnlineBadSpawnFailSafe">
            <summary>
                Prevents bad spawn situations in online multiplayer for hero characters. Runs
                periodic checks to ensure proper spawn state when not hosting.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetGunPosition(System.Single,System.Single)">
            <summary>
                Positions the gun sprite relative to the character with specified offsets. Sets gun
                transform position and ensures consistent scale (1,1,1) while maintaining proper
                rendering depth (-0.001f on Z-axis).
            </summary>
            <param name="xOffset">Horizontal offset for gun positioning relative to character</param>
            <param name="yOffset">Vertical offset for gun positioning relative to character</param>
        </member>
        <member name="M:TestVanDammeAnim.SetRenderers(System.Boolean)">
            <summary>
                Toggles all child MeshRenderer components on or off. Finds all MeshRenderers in
                children including inactive ones and sets their enabled state.
            </summary>
            <param name="enabled">Whether to enable or disable the renderers</param>
        </member>
        <member name="M:TestVanDammeAnim.StopPlayerBubbles">
            <summary>
                Deactivates all player indicator UI bubbles including player number bubbles (1-4)
                and the high-five interaction bubble. Only runs for player-controlled characters and
                calls StopBubble on each active bubble to hide them.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TryAssignHeroThatKilledMe(UnityEngine.MonoBehaviour)">
            <summary>
                Tracks which hero killed this unit for statistics and scoring purposes. Only assigns
                if not already set, extracts the player number from the damage sender, and stores
                the death position for kill tracking statistics.
            </summary>
            <param name="damageSender">The MonoBehaviour (typically a hero) that killed this unit</param>
        </member>
        <member name="M:TestVanDammeAnim.UnpackState(UnityStream)">
            <summary>
                Deserializes network state and applies it to the character. Unpacks all data from
                PackState with special handling for BoondockBro and Desperabro. Sets up hero if
                alive or deactivates gun if dead.
            </summary>
            <param name="stream">The network stream to read data from</param>
            <returns>The stream after reading data</returns>
        </member>
        <!-- Helper & Utility Properties -->
        <member name="P:TestVanDammeAnim.HalfWidth">
            <summary>
                Gets the half-width of the character's collision bounds. This value is used for
                collision detection and positioning calculations.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.SyncParent">
            <summary>
                Gets or sets the parent Transform for network synchronization. This property enables
                synchronized parenting across multiplayer clients.
            </summary>
        </member>
        <member name="P:TestVanDammeAnim.SyncParentedPosition">
            <summary>
                Gets or sets the position relative to a parent Transform for network
                synchronization. This property manages both position and parent relationship in
                multiplayer scenarios.
            </summary>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:TestVanDammeAnim._counter">
            <summary>
                General purpose time counter field. Currently has no specific usage in
                TestVanDammeAnim base implementation. Available for derived classes to use for
                custom timing needs or animation sequences.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim._spawnFailSafeTimer">
            <summary>
                Network synchronization failsafe timer for spawn validation. Initialized with random
                value 0-0.5 seconds, then counts up. When reaching 1 second, checks if hero is too
                far from the rightmost hero (>1.3x camera width). If so, teleports to rightmost
                hero's position to resolve spawn failures.
            </summary>
        </member>
        <!-- Character Setup & Configuration Methods -->
        <member name="M:TestVanDammeAnim.AttachToHeli">
            <summary>
                Virtual method for attaching TestVanDammeAnim to helicopter. Currently empty
                implementation that can be overridden by derived classes.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetUpHero(System.Int32,HeroType,System.Boolean)">
            <summary>
                Configures TestVanDammeAnim as a hero character with specified player number and
                hero type. Optionally registers with HeroController and creates hero indicator
                effects based on game state conditions.
            </summary>
            <param name="PlayerNum">The player number to assign to this hero (0-3)</param>
            <param name="heroTypeEnum">The type of hero this character represents</param>
            <param name="registerHero">Whether to register this hero with the HeroController system</param>
        </member>
        <member name="M:TestVanDammeAnim.ShowStartBubble">
            <summary>
                Displays the starting bubble UI for heroes when HUDs are enabled and character is
                alive. Restarts bubble animation and flashes avatar.
            </summary>
        </member>
        <!-- Character Setup & Configuration Fields -->
        <member name="F:TestVanDammeAnim.disarmedGunMaterial">
            <summary>
                Material applied to gun sprite to indicate disarmed state during reward phase. Only
                applied to non-winning players in multiplayer matches. Provides visual feedback that
                the character's weapon is disabled.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.faderSpritePrefab">
            <summary>
                Prefab reference for creating fade effect sprites. Used to access FaderSprite
                component for visual fade transitions. Enables smooth visual transitions for various
                game states.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.heroType">
            <summary>
                Identifies which specific hero character this instance represents (e.g., Rambro,
                Brominator). Set during hero setup and used for death statistics, special behaviors,
                and network serialization. Critical for hero registration and ability configuration.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.player">
            <summary>
                Reference to the Player object that controls this hero. Core reference for input
                handling, player-specific settings, and multiplayer identification. Essential for
                connecting character actions to player input.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.spawnPositionHasBeenSet">
            <summary>
                Flag indicating the unit's spawn position has been properly initialized. Set to true
                after spawn setup completes. Prevents duplicate spawn initialization and ensures
                spawn-related effects only trigger once.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.usePrimaryAvatar">
            <summary>
                Determines whether to display the primary or secondary avatar image in the HUD.
                Default true shows primary avatar. Passed to all avatar state methods to control
                which character portrait is displayed. Can be toggled for alternate character
                representations.
            </summary>
        </member>
        <!-- Alien Infection System Methods -->
        <member name="M:TestVanDammeAnim.BurstChest">
            <summary>
                Executes alien chest bursting sequence. Disconnects face hugger, spawns alien
                xenomorph (only for local player or local insemination), targets nearest player,
                triggers alien growth, gibs character, and plays sound effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CalculateInseminationFrame">
            <summary>
                Calculates the sprite frame for insemination animation based on infection
                progression. Returns frames 0-7 based on inseminated counter timing.
            </summary>
            <returns>Animation frame index for insemination state</returns>
        </member>
        <member name="M:TestVanDammeAnim.CanInseminate(System.Single,System.Single)">
            <summary>
                Checks if character can be inseminated by alien face huggers. Requires no existing
                inseminator, positive health, and health below 1000.
            </summary>
            <param name="xI">X force component (unused in logic)</param>
            <param name="yI">Y force component (unused in logic)</param>
            <returns>True if character can be inseminated, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.DisConnectFaceHugger">
            <summary>
                Removes attached face hugger from character. Handles face hugger positioning,
                disconnection, and UI cleanup.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.HasFaceHugger">
            <summary>
                Checks if character currently has a face hugger attached.
            </summary>
            <returns>True if face hugger is attached, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.Inseminate(AlienFaceHugger,System.Single,System.Single)">
            <summary>
                Initiates alien insemination process via RPC for network synchronization. Called by
                face hugger units to begin infection.
            </summary>
            <param name="unit">The alien face hugger performing the insemination</param>
            <param name="xForce">X force component for insemination</param>
            <param name="yForce">Y force component for insemination</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:TestVanDammeAnim.InseminateRPC(AlienFaceHugger,System.Single,System.Single)">
            <summary>
                RPC method that executes alien insemination process. Sets up face hugger attachment,
                initializes infection counters, updates UI, and plays muffled scream sounds.
            </summary>
            <param name="unit">The alien face hugger performing insemination</param>
            <param name="xForce">X force component for insemination</param>
            <param name="yForce">Y force component for insemination</param>
        </member>
        <member name="M:TestVanDammeAnim.IsInseminated">
            <summary>
                Checks if character is currently in inseminated state with active alien infection.
            </summary>
            <returns>True if inseminated with alien parasite, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.RecoverFromInseminatioRPC">
            <summary>
                RPC method that executes insemination recovery. Removes face hugger, resets
                infection counters, grants invulnerability, and cleans up UI elements.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RecoverFromInsemination">
            <summary>
                Initiates recovery from alien insemination via RPC for network synchronization.
                Called to cure infection before chest bursting occurs.
            </summary>
        </member>
        <!-- Alien Infection System Fields -->
        <member name="F:TestVanDammeAnim.alienBursterPrefab">
            <summary>
                Unit prefab spawned when alien burst occurs from inseminated character.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.inseminatedByLocalUnit">
            <summary>
                Tracks whether alien insemination occurred from local player's unit. Used for
                network synchronization to ensure consistent alien spawn behavior across clients.
                Determines whether local machine spawns the alien burster in BurstChest method.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.inseminatedCounter">
            <summary>
                Timer tracking the gestation period after successful alien insemination. Incremented
                each frame until reaching the burst threshold (typically 5-10 seconds), at which
                point an alien burster emerges from the unit's chest, killing the host.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.inseminationCounter">
            <summary>
                Timer tracking the insemination process while a face hugger is attached. Incremented
                while inseminatorUnit is attached, representing the infection progress. When it
                reaches the threshold, the unit becomes fully inseminated and the gestation phase
                begins.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.inseminationFrame">
            <summary>
                Animation frame counter for alien face hugger attachment. Tracks animation
                progression during insemination sequence.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.inseminatorUnit">
            <summary>
                Reference to the AlienFaceHugger currently attached to this unit's face. Set when a
                face hugger successfully attaches, cleared when the face hugger is destroyed or
                detaches. When set, prevents normal actions and begins the insemination process.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.reviveSource">
            <summary>
                Reference to the hero that revived this character as a zombie. When set, enables the
                reviving player to control this zombie through input copying. Checked for zombie AI
                control decisions and cleared when zombie is destroyed.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.reviveZombieCounter">
            <summary>
                Periodic counter for zombie behavior updates. Triggers zombie-specific actions at
                0.4 second intervals. Creates consistent zombie movement patterns and prevents
                continuous action spam.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.reviveZombieTime">
            <summary>
                Countdown timer before a revived zombie becomes active. Default 2 seconds,
                randomized on revival between 1.5-2.5 seconds. Prevents instant zombie activation
                after revival, creating a rising animation period.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.zombieDelay">
            <summary>
                Input delay for zombie movement control. Decremented during zombie input copying
                from controlling player. Creates intentional lag in zombie response to player
                commands for gameplay balance.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.zombieOffset">
            <summary>
                Random offset (0-1) that creates behavioral variation between zombies. Used to
                desynchronize zombie movement and actions by offsetting timing calculations. Ensures
                multiple zombies don't move in perfect lockstep, creating more organic zombie
                hordes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.zombieTimerOffset">
            <summary>
                Integer offset for zombie action timing variations. Combined with zombieOffset to
                create unique behavior patterns for each zombie. Prevents synchronized zombie
                attacks and movements, making zombie groups feel more chaotic and unpredictable.
            </summary>
        </member>
        <!-- Acid Coverage System Methods -->
        <member name="M:TestVanDammeAnim.AnimateActualDeath">
            <summary>
                Displays standard ground death animation frame and deactivates gun sprite. Used for
                normal death situations when character dies on solid ground.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateClimbingLadder">
            <summary>
                Manages comprehensive ladder climbing animation with multiple movement states.
                Handles transition animations, idle climbing with gun positioning, movement-based
                climbing with footstep sounds, and specialized climbing animations for up/down
                movement. Includes proximity detection for ladder presence and appropriate animation
                fallbacks.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateClimbingLadderTransition(System.Boolean)">
            <summary>
                Handles smooth transition animation between ladder climbing and normal movement
                states. Manages transition frame progression, frame rates, and sprite positioning
                during the 6-frame transition sequence.
            </summary>
            <param name="intoClimbing">True when transitioning into climbing mode, false when transitioning out of climbing mode</param>
        </member>
        <member name="M:TestVanDammeAnim.AnimateDancingFrames">
            <summary>
                Displays dancing animation sequence using configurable frame cycling. Deactivates
                gun and cycles through dancing frames from the specified sprite sheet position with
                consistent frame rate.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateDeath">
            <summary>
                Death animation dispatcher that selects appropriate death animation based on
                character state. Prioritizes insemination frames if infected, falling death
                animation if airborne and not impaled, or standard ground death animation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateFallen">
            <summary>
                Virtual method for fallen state animation. Empty implementation that can be
                overridden by derived classes to provide custom fallen animation behavior.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateFallingDeath">
            <summary>
                Displays falling death animation frame for characters dying while airborne. Provides
                different visual feedback compared to ground death.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateGesture">
            <summary>
                Handles comprehensive gesture animation sequences including salute, wave, point,
                flex, thrust, knee drop, and shush gestures. Manages frame progression, timing,
                special effects (flex sounds and face hugger disconnection), and looping behavior
                for different gesture types.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateInseminationFrames">
            <summary>
                Displays alien insemination animation frames based on infection progression. Uses
                calculated insemination frame index to show appropriate sprite frame from the
                insemination animation sheet.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateWallAnticipation">
            <summary>
                Manages wall climb anticipation animation with precise knife positioning based on
                vertical movement. Calculates knife stab positioning relative to previous climb
                heights and alternates between left and right knife hands for realistic climbing
                animation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateWallClimb">
            <summary>
                Executes active wall climbing animation with realistic knife stab mechanics and
                height tracking. Manages velocity changes at specific animation frames, alternating
                knife hands, sound effects, and precise tracking of climbing progress relative to
                previous stab positions. Includes collision detection for wall interaction events.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.AnimateWallDrag">
            <summary>
                Handles wall sliding animation with knife-based climbing mechanics. Manages
                alternating knife hand positions, velocity-based frame selection, sound effects, and
                visual particle effects. Supports both new knife climbing frames and legacy
                animation systems.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ApplyWallClimbingGravity">
            <summary>
                Applies specialized gravity calculations during wall climbing and dragging states.
                Provides reduced gravity during active climbing phases and maintains upward velocity
                during certain animation frames to create realistic wall climbing physics.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ChangeFrame">
            <summary>
                Core animation frame dispatcher that routes to appropriate animation methods based
                on character state and action. Handles priority-based animation selection including
                frozen state, special unit states (on back, strung up, impaled), and action
                state-specific animations (idle, running, jumping, climbing, death). Also manages
                gun activation, sprite offsets, and frame counters for various animation systems.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CheckAirDash">
            <summary>
                Evaluates conditions for air dash availability and triggers dash if conditions are
                met. Checks for horizontal air dash availability, ground proximity for dash
                continuation, and downward air dash when moving straight down.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CoverInAcid">
            <summary>
                Covers TestVanDammeAnim in acid if not invulnerable and eligible. Sends RPC to all
                clients to apply acid coverage.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CoverInAcidRPC">
            <summary>
                Network RPC method for acid coverage effects. Applies acid visual effects, excluding
                Alien units entirely. Called remotely to synchronize acid state across network
                players.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.ForceChangeFrame">
            <summary>
                Forces an immediate frame change by calling the ChangeFrame method. Provides public
                access to trigger frame updates outside of the normal animation cycle.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.HasBeenCoveredInAcid">
            <summary>
                Checks if TestVanDammeAnim is currently covered in acid.
            </summary>
            <returns>True if covered in acid, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.IncreaseFrame">
            <summary>
                Advances the main animation frame counter and insemination frame counter if face
                hugger is attached. This method synchronizes both animation systems to ensure proper
                frame progression during alien infection states.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.IsGesturing">
            <summary>
                Checks if character is currently performing any gesture animation by verifying the
                current gesture state is not None.
            </summary>
            <returns>True if character is performing a gesture, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.PlayFootStepSound">
            <summary>
                Plays surface-appropriate footstep sounds with default volume and pitch settings
                (0.4 volume, 1.0 pitch).
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.PlayFootStepSound(System.Single,System.Single)">
            <summary>
                Plays surface-specific footstep sounds based on current environment and character
                state. Automatically selects appropriate sound arrays for quicksand, ladder
                climbing, or ground surface types (Dirt, Stone, Metal, Wood, Grass, Slime). Also
                triggers long grass sound effects when applicable.
            </summary>
            <param name="v">Volume level for the footstep sound</param>
            <param name="p">Pitch level for the footstep sound</param>
        </member>
        <member name="M:TestVanDammeAnim.PlayLongGrassSound(System.Boolean)">
            <summary>
                Plays environment-specific footstep sounds for grass and blood surfaces with timing
                control. Checks for jiggle doodads on the current block to determine sound type,
                playing blood sounds at reduced volume for blood doodads or grass sounds for other
                doodads.
            </summary>
            <param name="checkTimer">Whether to respect the grass delay timer to prevent audio spam. If false, plays sound immediately regardless of timer</param>
            <returns>True if a sound was played, false otherwise</returns>
        </member>
        <member name="M:TestVanDammeAnim.RemoveAcid">
            <summary>
                Removes acid coverage from TestVanDammeAnim by sending RPC to all clients if
                conditions are met.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RemoveAcidRPC">
            <summary>
                RPC method that removes acid coverage. Restores default material, enables gun
                sprite, and creates slime particle effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunCoveredInAcid">
            <summary>
                Handles ongoing acid coverage effects including cage busting damage, checkpoint
                recovery, melting animations, and acid particle generation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.RunStepOnWalls">
            <summary>
                Triggers step-on events for wall surfaces during climbing or dragging. Performs
                raycasting to detect wall colliders and sends step messages for interaction with
                climbable surfaces.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.SetGestureAnimation(GestureElement.Gestures)">
            <summary>
                Sets and manages gesture animation state with frame reset and multiplayer
                achievement tracking. Blocks movement during gesture animation and awards
                achievement when all 4 players perform gestures simultaneously.
            </summary>
            <param name="gesture">The gesture type to animate (None, Salute, Wave, Point, Flex, Thrust, KneeDrop, Shhh)</param>
        </member>
        <member name="M:TestVanDammeAnim.StartDashing">
            <summary>
                Initiates dashing movement with speed multipliers and visual effects. Manages dash
                availability based on air state, applies speed modifiers with diminishing returns
                for successive dashes, and creates appropriate dash effects. Handles both ground and
                air dash scenarios.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TriggerFlexEvent">
            <summary>
                Triggers perk system flex event for muscle flexing gestures. Activates associated
                perks and bonuses when character performs flex animation.
            </summary>
        </member>
        <!-- Acid Coverage System Fields -->
        <member name="F:TestVanDammeAnim.acidMeltTimer">
            <summary>
                Controls the melting process timing. Initialized to 1 second when acid is applied
                and can be extended by 0.3 seconds with additional acid damage. When it reaches 0,
                triggers the Melt method.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.acidParticleTimer">
            <summary>
                Controls timing of acid particle effect spawning. Decrements each frame while
                covered in acid and resets to 0.1 seconds, triggering green slime particle creation
                at regular intervals.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hasBeenCoverInAcid">
            <summary>
                Tracks whether unit is currently covered in acid. Blocks certain actions while true
                and triggers acid particle effects and melting process. Reset when recovering from
                acid effects.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.hasMelted">
            <summary>
                Indicates if unit has completed the melting process from acid damage. One-way flag
                that is never reset once set. Prevents particle spawning after melting is complete.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.lastRecoveredFromAcidTime">
            <summary>
                Timestamp tracking when unit last recovered from acid effects. Enforces minimum 1.5
                second delay between recoveries for player-controlled units only.
            </summary>
        </member>
        <!-- High-Five System Methods -->
        <member name="M:TestVanDammeAnim.CheckHighFive">
            <summary>
                Checks conditions for high-five interactions with nearby players. Validates
                proximity and state requirements, triggering high-five boost when conditions are
                met.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.CreateHighFiveEffects">
            <summary>
                Creates visual and audio effects for successful high-five interactions including
                particles and screen effects.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.HighFiveBoost(System.Boolean)">
            <summary>
                Applies high-five boost effects including speed enhancement and visual effects.
            </summary>
            <param name="activeHighFiveCharacter">Whether this character initiated the high-five</param>
        </member>
        <member name="M:TestVanDammeAnim.ReleaseHighFive">
            <summary>
                Handles releasing the high-five gesture. Updates animation frame, sets appropriate
                state flags, triggers frame change, and dismisses the high-five bubble if present.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StartHighFive">
            <summary>
                Initializes the high-five gesture action. Resets related timers and flags, sets
                holding high-five state to true, resets the animation frame, and triggers a frame
                update.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.TryConnectHighFive">
            <summary>
                Attempts to connect with nearby character for high-five interaction. Returns success
                status for networking.
            </summary>
            <returns>True if high-five connection successful, false otherwise</returns>
        </member>
        <!-- High-Five System Fields -->
        <member name="F:TestVanDammeAnim.high5Bubble">
            <summary>
                Special reaction bubble specifically for high-five interactions. Displays prompts
                when players are close enough to perform a high-five. Shows button prompts and
                timing windows for successful high-five execution between players.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFive">
            <summary>
                Current frame's high-five input state from player controls. When pressed, triggers
                high-five gesture attempts with nearby players.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFiveBoost">
            <summary>
                Indicates if the high-five speed boost is currently active. When true, character
                movement speed is increased by the highFiveBoostM multiplier.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFiveBoostM">
            <summary>
                Movement speed multiplier during high-five boost state. Applied by multiplying delta
                time calculations when boost is active, effectively increasing animation and
                movement speed.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFiveBoostTime">
            <summary>
                Remaining duration of the high-five boost effect in seconds. Counts down each frame
                while the boost is active.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFiveNoBoost">
            <summary>
                Temporary state that prevents high-five boosts from being applied. Used to prevent
                boost stacking or rapid re-triggering of boosts.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highFiveNoBoostTime">
            <summary>
                Duration of high-five boost prevention in seconds. Typically set to 0.2 seconds
                after certain actions. When this timer expires, highFiveNoBoost is automatically
                cleared.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.highfiveHoldTime">
            <summary>
                Tracks the duration the high-five gesture has been held. Increments during the
                high-five animation and resets to -1.5 after 0.5 seconds to create a cooldown period
                between high-fives.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.holdingHighFive">
            <summary>
                Indicates that the character is currently initiating a high-five gesture. Set to
                true when starting a high-five. Cleared when the high-five is released through
                ReleaseHighFive() either manually or when connecting with another player.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.ignoreHighFivePressTime">
            <summary>
                Cooldown timer that prevents rapid high-five or special ability triggering. Set to
                0.1 seconds after certain actions and prevents new high-five attempts while greater
                than zero.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.player1Bubble">
            <summary>
                Reaction bubble UI element for player 1. Displays context-sensitive prompts like
                "PRESS X TO HIGH FIVE" or AFK indicators. Positioned above the character and
                shown/hidden based on game state and player proximity.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.player2Bubble">
            <summary>
                Reaction bubble UI element for player 2. Functions identically to player1Bubble but
                for the second player. Enables multiplayer interaction prompts and status indicators
                specific to player 2's perspective.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.player3Bubble">
            <summary>
                Reaction bubble UI element for player 3. Displays context-sensitive prompts and
                status indicators above the third player's character in 4-player local multiplayer.
                Functions identically to player1Bubble and player2Bubble but for the third player
                slot.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.player4Bubble">
            <summary>
                Reaction bubble UI element for player 4. Displays context-sensitive prompts and
                status indicators above the fourth player's character in 4-player local multiplayer.
                Completes the set of player bubbles for full 4-player support.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.releasingHighFive">
            <summary>
                Tracks when the high-five input has been released. Set when the player releases the
                high-five button and used to control the end of the high-five animation state.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.showHighFiveAfterMeleeTimer">
            <summary>
                Timer that delays high-five prompt display after melee attacks. Incremented after
                successful melee, triggers prompt at 1.5 seconds. Reset when melee is activated.
                Encourages cooperative play by prompting celebratory interactions after combat.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.successfulHighFive">
            <summary>
                Indicates that a high-five has successfully connected with another player. When true
                and animation reaches frame 4, triggers high-five boost effects. Automatically
                cleared after the animation completes.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.successfulHighFiveActiveBro">
            <summary>
                Identifies whether this character was the initiator of a successful high-five. Used
                to determine which player receives the high-five boost effect.
            </summary>
        </member>
        <member name="F:TestVanDammeAnim.wasHighFive">
            <summary>
                Previous frame's high-five input state. Used for edge detection to determine when
                the high-five button is first pressed rather than held.
            </summary>
        </member>
        <!-- Kick System Methods -->
        <member name="M:TestVanDammeAnim.CheckForKick">
            <summary>
                Checks proximity to other players and handles kick interactions. Shows kick bubble
                when eligible, changes bubble material based on proximity, and executes kicks when
                conditions are met.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.Kick">
            <summary>
                Initiates player kick process by sending RPC to all clients if character hasn't been
                kicked yet.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.KickRPC">
            <summary>
                RPC method that executes the kick sequence. Shows kick bubble, starts kick routine,
                and marks character as kicked.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.KickRoutine">
            <summary>
                Coroutine that handles the visual kick countdown sequence. Flashes kick bubble
                materials with decreasing intervals, then gibs character and creates explosion
                effects.
            </summary>
            <returns>IEnumerator for coroutine execution</returns>
        </member>
        <member name="M:TestVanDammeAnim.ShowKickBubble">
            <summary>
                Creates kick player bubble UI if it doesn't exist, positions it above character,
                parents it to transform, and refreshes Y start position. If bubble already exists
                but is hidden, restarts the bubble animation.
            </summary>
        </member>
        <member name="M:TestVanDammeAnim.StopKickBubble">
            <summary>
                Stops the kick player bubble animation if it exists.
            </summary>
        </member>
    </members>
</doc>