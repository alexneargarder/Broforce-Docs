<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <!-- Unity Lifecycle & Setup Methods -->
        <member name="M:EffectsController.Awake">
            <summary>
                Initializes critical components on object creation. Sets up the ground layer mask
                for collision detection, initializes the oil accident ticker system, and sets a
                random initial accident timer between 10-250 seconds.
            </summary>
        </member>
        <member name="M:EffectsController.Start">
            <summary>
                Configures visual effects based on the current level's theme. Disables all fog
                objects by default, then selectively enables theme-specific effects: city fog and
                sun for City theme, hell fog for Hell theme, and fire/ash effects for BurningJungle
                theme (except in BroDown mode). Also checks for constant fireworks flag.
            </summary>
        </member>
        <member name="M:EffectsController.Update">
            <summary>
                Updates weather effect positions to follow the camera each frame. Manages rain and
                ash positioning with offset (-25, 380). Handles firework spawning when enabled and
                conditions are met (campaign mode, level finished). Increments the accident timer
                used for oil spill warning displays.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Properties -->
        <member name="P:EffectsController.instance">
            <summary>
                Gets the singleton instance of EffectsController. Uses lazy initialization to find
                and cache the instance in the scene on first access. Provides global access to the
                effects system from any script.
            </summary>
        </member>
        <!-- Unity Lifecycle & Setup Fields -->
        <member name="F:EffectsController.inst">
            <summary>
                Private static field that caches the singleton instance used by the instance
                property getter for lazy initialization and quick access.
            </summary>
        </member>
        <!-- Combat & Damage Methods -->
        <member name="M:EffectsController.CreateAlienParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates alien-themed particle effects. Uses alien earth dots at 1.4x force with half
                the requested count for extraterrestrial debris or organic alien matter destruction.
            </summary>
            <param name="x">The x-coordinate of the alien debris origin</param>
            <param name="y">The y-coordinate of the alien debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateAlienScrapParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates complex alien-themed scrap particles for extraterrestrial destruction
                effects. Distributes particles across 7 different alien scrap emitters with varying
                force multipliers (1.0x to 1.6x). The second emitter uses 1.5x angular velocity for
                enhanced spinning. Includes both regular and tiny alien scrap variants for detailed
                alien material destruction.
            </summary>
            <param name="x">The x-coordinate of the alien scrap origin</param>
            <param name="y">The y-coordinate of the alien scrap origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The base rotational velocity for spinning pieces</param>
        </member>
        <member name="M:EffectsController.CreateBackgroundBloodSplat(System.Single,System.Single)">
            <summary>
                Creates a small blood splat decal at the specified position. This is a static blood
                mark that doesn't move.
            </summary>
            <param name="x">The X coordinate where the blood splat appears.</param>
            <param name="y">The Y coordinate where the blood splat appears.</param>
        </member>
        <member name="M:EffectsController.CreateBackgroundBloodSpray(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a background blood spray effect that moves with velocity. This effect
                appears behind other game elements.
            </summary>
            <param name="x">The X coordinate where the blood spray originates.</param>
            <param name="y">The Y coordinate where the blood spray originates.</param>
            <param name="xI">The horizontal velocity of the blood spray.</param>
            <param name="yI">The vertical velocity of the blood spray.</param>
        </member>
        <member name="M:EffectsController.CreateBackgroundFlameParticle(System.Single,System.Single)">
            <summary>
                Creates a background flame particle at default depth. Randomly selects from four
                flame sheet variations for visual variety. Calls the z-parameter overload with z =
                -12 for background placement.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
        </member>
        <member name="M:EffectsController.CreateBackgroundFlameParticle(System.Single,System.Single,System.Single)">
            <summary>
                Creates a background flame particle with custom z-depth. Randomly selects from four
                flame sheet particle variations (flameSheetBackgroundParticle1-4) to add visual
                variety to fire effects in the background.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
            <param name="z">The z-coordinate (depth) of the flame particle</param>
        </member>
        <member name="M:EffectsController.CreateBackgroundWoodParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates background wood shrapnel effects. Distributes particles among four different
                wood shrapnel types, with the first two types getting slightly more particles
                (count/4 + 1) than the last two (count/4). Uses CreateShrapnel internally for
                physics-based wood debris.
            </summary>
            <param name="x">The x-coordinate of the wood debris origin</param>
            <param name="y">The y-coordinate of the wood debris origin</param>
            <param name="count">The total number of wood pieces to create</param>
            <param name="offsetRadius">The spread radius for shrapnel placement</param>
            <param name="force">The force multiplier for shrapnel velocity</param>
            <param name="xI">The initial x-velocity added to all shrapnel</param>
            <param name="yI">The initial y-velocity added to all shrapnel</param>
        </member>
        <member name="M:EffectsController.CreateBarbedWireParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates barbed wire destruction particles. Combines smaller white dirt particles at
                1.6x force (half count) with grey tinting for rust/dirt, plus shiny metal particles
                (half count) for the wire segments, all with angular velocity for realistic wire
                breakage.
            </summary>
            <param name="x">The x-coordinate of the barbed wire origin</param>
            <param name="y">The y-coordinate of the barbed wire origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wire pieces</param>
        </member>
        <member name="M:EffectsController.CreateBlackPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates black smoke plume particles with customizable physics and appearance.
                Randomly selects between two black plume variations for visual variety. Supports
                life and size multipliers for different smoke intensities.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateBloodArteryEffect(BloodColor,System.Single,System.Single,System.Int32)">
            <summary>
                Creates arterial blood spurting effects with directional spray. Randomly selects
                between two artery animation variants and rotates based on direction (-90° left, 90°
                right, 0° up). Spawns accompanying blood dot particles and plays squirt sound at 25%
                volume.
            </summary>
            <param name="color">The blood color type for the effect</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="direction">Direction of spray: negative = left, positive = right, 0 = upward</param>
        </member>
        <member name="M:EffectsController.CreateBloodExplosionSmall(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,Vector3)">
            <summary>
                Creates a small blood explosion effect. Randomly selects from three blood gush
                prefabs, spawns red blood particles, shakes camera, plays wet explosion sound, and
                disturbs wildlife. Similar to slime explosion but with blood visuals.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spawn radius (unused)</param>
            <param name="offsetYRadius">The vertical spawn radius (unused)</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused)</param>
            <param name="puffSpeed">The particle speed multiplier (unused)</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="shrapnelCount">Number of blood particles to create</param>
            <param name="shrapnelForce">The velocity force for blood particles</param>
            <param name="normal">The surface normal direction (unused)</param>
        </member>
        <member name="M:EffectsController.CreateBloodGushEffect(BloodColor,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Creates a comprehensive blood gush effect combining multiple elements. Randomly
                selects from 3 gush and 3 spurt variations, with optional slime and dot particles.
                Effects are flipped based on direction and particles spray opposite to impact
                direction.
            </summary>
            <param name="color">The blood color type for all effect elements</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact direction (sign determines flip)</param>
            <param name="yI">The vertical impact direction</param>
            <param name="dots">Whether to include blood dot particles</param>
            <param name="slimes">Whether to include slime particles</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticles(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates blood particle effects at the specified position with z-coordinate of 1.
                This is a convenience overload that delegates to the full version with default
                z-depth for standard 2D positioning.
            </summary>
            <param name="color">The blood color type (red, green, oil, frozen)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The total number of particles to create across all sizes</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticles(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a complete blood splatter effect using multiple particle sizes. Distributes
                particles across three different emitters: big particles (1/3 of count), small
                particles (1/2 of count + 1), and dot particles (1/2 of count + 1). Each particle
                type uses reduced spawn radius (10% of provided).
            </summary>
            <param name="color">The blood color type (red, green, oil, frozen)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The total number of particles to create across all sizes</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesBig(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates large blood particle effects at the specified position with z-coordinate of
                1. This is a convenience overload that delegates to the full version with default
                z-depth.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of large particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesBig(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates large blood particle effects with color-specific emitters. Selects
                appropriate particle emitter based on blood type: sewerage (poop), green, oil
                (black), or default red. Falls back to cutscene blood particles when main
                EffectsController is inactive. Each particle has randomized color brightness
                (80-100%).
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of large particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesDots(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates blood dot particle effects at the specified position with z-coordinate of 1.
                This is a convenience overload that delegates to the full version with default
                z-depth and scale of 1.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesDots(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates blood dot particle effects with clustered spawning and size scaling. Uses
                color-specific emitters with 50% chance to add one extra particle. Implements
                clustering where 60% spawn near previous positions. Particles have semi-transparent
                color (70-110% alpha) and scalable size.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesDrip(System.Single,System.Single,System.Single,System.Single,System.Single,BloodColor)">
            <summary>
                Creates a blood drip particle effect at a random position within the specified
                radius. Selects color-specific drip emitter (green, oil/black, or default red) and
                spawns with zero velocity.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="scaleM">The scale multiplier for particle size</param>
            <param name="color">The blood color type (green, oil, or default red)</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesSmall(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small blood particle effects at the specified position with z-coordinate of
                1. This is a convenience overload that delegates to the full version with default
                z-depth.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of small particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodParticlesSmall(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small blood particle effects with clustered spawning pattern. Uses
                color-specific emitters and implements a clustering algorithm where 60% of particles
                spawn near previous positions. Particles emit with velocity based on spawn position
                plus base velocity, with color brightness varying 80-100%.
            </summary>
            <param name="color">The blood color type (red, green, oil, sewerage)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of small particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateBloodSmallSplashEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small blood splash effects for minor impacts. Randomly selects between two
                splash variations with 25% chance each (50% chance of no effect). Used for smaller
                wounds or blood droplet impacts.
            </summary>
            <param name="color">The blood color type for the splash</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact velocity (unused in implementation)</param>
            <param name="yI">The vertical impact velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateBloodSplashEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a blood splash impact effect. Randomly selects between two splash variations
                (50% chance each, with 50% chance of no effect). The blood color parameter
                determines the tint of the splash sprite.
            </summary>
            <param name="bloodColor">The blood color type for tinting the splash</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact velocity (unused in implementation)</param>
            <param name="yI">The vertical impact velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateBloodSprayExplodeEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an explosive blood spray effect for violent deaths. Randomly selects between
                two spray variations and horizontally flips based on direction. Used for gibbing and
                explosive damage effects.
            </summary>
            <param name="color">The blood color type for the spray</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal force direction (sign determines flip)</param>
            <param name="yI">The vertical force direction (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateBloodTinySplashEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates tiny blood splash effects for minimal impacts. Randomly selects between two
                tiny splash variations with 25% chance each (50% chance of no effect). Used for very
                small wounds or single blood drops.
            </summary>
            <param name="color">The blood color type for the splash</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact velocity (unused in implementation)</param>
            <param name="yI">The vertical impact velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateBoneParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates bone debris particles. Identical implementation to CreateGreySandParticles,
                combining bone dots at 1.4x force with small bone particles for skeletal destruction
                effects.
            </summary>
            <param name="x">The x-coordinate of the debris origin</param>
            <param name="y">The y-coordinate of the debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateBoomerangWindEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform,System.Single,System.Single)">
            <summary>
                Creates a spinning wind effect for boomerang weapons. The effect is parented to the
                projectile and rotates continuously. Sets initial rotation and spin speed for the
                visual wind trail effect.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the effect to (usually the boomerang)</param>
            <param name="rotationSpeed">The rotation speed in degrees per second</param>
            <param name="rotation">The initial rotation angle in degrees</param>
        </member>
        <member name="M:EffectsController.CreateBubbles(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
                Creates underwater bubble particle effects rising upward. Uses clustered spawning
                where 60% of bubbles spawn near previous positions. All bubbles emit with upward
                velocity of 10 units/second and use randomized size/lifetime from
                RedBloodParticlesSmall settings.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of bubbles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
        </member>
        <member name="M:EffectsController.CreateBulletPoofEffect(System.Single,System.Single)">
            <summary>
                Creates a small impact poof effect for bullet hits. Used when projectiles strike
                surfaces to provide visual feedback of the impact point with a small dust cloud.
            </summary>
            <param name="x">The x-coordinate of the bullet impact</param>
            <param name="y">The y-coordinate of the bullet impact</param>
        </member>
        <member name="M:EffectsController.CreateChakramTrailEffect(System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
                Creates a chakram (spinning blade) trail effect. Instantiates the chakramTrail
                prefab and initializes it with the specified color and lifetime for visual tracking
                of spinning projectiles.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="life">The lifetime of the trail in seconds</param>
            <param name="color">The color of the trail effect</param>
            <returns>The created ProjectileTrail component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateDepletedUraniumExplosion(UnityEngine.Vector2)">
            <summary>
                Creates a small explosion effect specifically for depleted uranium projectiles.
                Combines a tiny shader explosion visual with a small explosion sound at 60% volume
                for appropriate impact feedback.
            </summary>
            <param name="position">The 2D position where the explosion occurs</param>
        </member>
        <member name="M:EffectsController.CreateDirtParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates dirt and earth debris particles. Combines dirt dust dots at 1.4x force (half
                count) with three types of small dirt particles (one-third count each), with the
                third type using 1.1x force for varied dirt explosion effects.
            </summary>
            <param name="x">The x-coordinate of the dirt origin</param>
            <param name="y">The y-coordinate of the dirt origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateDirtWhiteParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color)">
            <summary>
                Creates white-tinted dirt particles with two color variations. Combines dirt dots at
                1.4x force (half count), small white dirt particles (two-thirds count), and smaller
                white dirt at 1.1x force (one-third count) for snow, ash, or other light-colored
                debris.
            </summary>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color variation for the particles</param>
            <param name="color2">The second color variation for the particles</param>
        </member>
        <member name="M:EffectsController.CreateDoodadGib(SpriteSM,DoodadGibsType,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates environmental debris based on DoodadGibsType enum. Special handling for
                SmallMolotov type which burns ground and damages units on impact. Falls back to
                blank doodad prefab for unspecified types. Copies sprite parameters from the base
                sprite for visual consistency.
            </summary>
            <param name="baseSprite">The source sprite to copy parameters from</param>
            <param name="gibType">The type of doodad gib to create</param>
            <param name="material">The material to apply to the doodad</param>
            <param name="x">The x-coordinate of the doodad origin</param>
            <param name="y">The y-coordinate of the doodad origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>
        <member name="M:EffectsController.CreateDoodadGib(SpriteSM,DoodadPiece,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates environmental debris with explicit prefab specification. Copies all sprite
                parameters from the base sprite including offset, dimensions, and UV coordinates to
                maintain visual consistency when destructible objects break apart.
            </summary>
            <param name="baseSprite">The source sprite to copy parameters from</param>
            <param name="doodadGibPrefab">The doodad piece prefab to instantiate</param>
            <param name="material">The material to apply to the doodad</param>
            <param name="x">The x-coordinate of the doodad origin</param>
            <param name="y">The y-coordinate of the doodad origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>
        <member name="M:EffectsController.CreateDustParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates simple dust particles using the default dirt dots emitter. This convenience
                method forwards to the emitter-based overload for standard dust cloud effects with
                automatic dirt coloring.
            </summary>
            <param name="x">The x-coordinate of the dust origin</param>
            <param name="y">The y-coordinate of the dust origin</param>
            <param name="count">The number of dust particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateDustParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates dust particles with a specified color. This wrapper method uses the default
                dirt dots emitter but applies the provided color instead of random dirt colors for
                custom dust effects.
            </summary>
            <param name="x">The x-coordinate of the dust origin</param>
            <param name="y">The y-coordinate of the dust origin</param>
            <param name="count">The number of dust particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all dust particles</param>
        </member>
        <member name="M:EffectsController.CreateDustParticlesRow(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates dust particles in a horizontal row pattern with custom color. This wrapper
                uses the default dirt dots emitter and forwards to the emitter-based row creation
                method.
            </summary>
            <param name="x">The x-coordinate of the row center</param>
            <param name="y">The y-coordinate of the row (remains constant)</param>
            <param name="count">The number of dust particles to create</param>
            <param name="offsetRadius">The horizontal spread radius for the row</param>
            <param name="xForce">The horizontal force component</param>
            <param name="yForce">The vertical force component</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all dust particles</param>
        </member>
        <member name="M:EffectsController.CreateEggPopEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates an alien egg bursting effect at the specified 3D position. Used when alien
                eggs are destroyed or when facehuggers emerge from eggs.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Creates standard explosion effects with customizable parameters. Delegates to the
                full explosion method with default values for complex explosions (true), spark count
                (40), and white pop effect (true).
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal randomization radius</param>
            <param name="offsetYRadius">The vertical randomization radius</param>
            <param name="disturbRange">The radius for environmental disturbance</param>
            <param name="delayM">The delay multiplier for effect timing</param>
            <param name="puffSpeed">The expansion speed of explosion puffs</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="groundWave">Whether to create a ground shockwave effect</param>
        </member>
        <member name="M:EffectsController.CreateExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Creates comprehensive explosion effects with full parameter control. Includes shader
                explosion, optional ground wave, tree shaking, wildlife/alien disturbance, sound
                effects, and screen shake. Resets accident ticker and can spawn complex multi-part
                explosions.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal randomization radius</param>
            <param name="offsetYRadius">The vertical randomization radius</param>
            <param name="disturbRange">The radius for environmental disturbance</param>
            <param name="delayM">The delay multiplier for effect timing</param>
            <param name="puffSpeed">The expansion speed of explosion puffs</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="groundWave">Whether to create a ground shockwave effect</param>
            <param name="complexExplosion">Whether to spawn additional explosion parts</param>
            <param name="sparkCount">The number of spark particles to create</param>
            <param name="whitePop">Whether to include the white flash effect</param>
        </member>
        <member name="M:EffectsController.CreateExplosionInRectangle(Vector3,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Creates a grid of explosions within a rectangular area. Spawns explosions at 16-unit
                intervals with random position offset and delay. Each explosion has randomized
                velocity based on the provided base values. Note: Several parameters are unused in
                implementation.
            </summary>
            <param name="bottonLeft">The bottom-left corner position of the rectangle</param>
            <param name="widthInBlocks">The width in 16-unit blocks</param>
            <param name="heightInBlocks">The height in 16-unit blocks</param>
            <param name="randomOffset">The random position offset radius for each explosion</param>
            <param name="delayM">The delay multiplier (unused in implementation)</param>
            <param name="puffSpeed">The particle velocity speed multiplier</param>
            <param name="xi">The base horizontal velocity component</param>
            <param name="yi">The base vertical velocity component</param>
            <param name="shakeM">The camera shake multiplier (unused in implementation)</param>
            <param name="volume">The sound volume (unused in implementation)</param>
            <param name="groundWave">Whether to create ground waves (unused in implementation)</param>
            <param name="debugDraw">Whether to draw debug visualization (partially implemented)</param>
        </member>
        <member name="M:EffectsController.CreateExplosionParticle(UnityEngine.Vector2,System.Single,UnityEngine.Vector2)">
            <summary>
                Creates explosion particles at a fixed z-depth of 32. Currently ignores the size and
                velocity parameters in the implementation, creating standard explosion particles at
                the specified position.
            </summary>
            <param name="position">The 2D position for the explosion particles</param>
            <param name="size">The intended size parameter (currently unused)</param>
            <param name="velocity">The intended velocity parameter (currently unused)</param>
        </member>
        <member name="M:EffectsController.CreateFire(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates multiple fire effects distributed randomly within a circular area. Each fire
                has randomized delay and velocity based on its position relative to the center. Used
                for area fire damage and spreading flames.
            </summary>
            <param name="x">The center x-coordinate in world space</param>
            <param name="y">The center y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of fires to create</param>
            <param name="range">The radius of the circular spawn area</param>
            <param name="delay">The base delay multiplier for fire spawning</param>
            <param name="force">The velocity force multiplier</param>
            <param name="velocity">The base velocity vector for all fires</param>
        </member>
        <member name="M:EffectsController.CreateFire(System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates a single fire effect with specified parameters. Randomly selects from three
                flame prefab variations (flame1, flame2, flame3) with equal probability. Returns the
                FlickerFader component for further manipulation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The spawn delay in seconds</param>
            <param name="velocity">The initial velocity vector</param>
            <returns>The created FlickerFader component for the fire effect</returns>
        </member>
        <member name="M:EffectsController.CreateFireSparks(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates fire-type spark particles for burning and welding effects. Uses the
                specialized fire spark emitter to create hot sparks that appear during fire damage,
                explosions, or metalwork.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The number of fire sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
        </member>
        <member name="M:EffectsController.CreateFireTrail(Transform,Vector3)">
            <summary>
                Creates a fire trail particle system attached to a parent transform. The trail
                follows the parent's movement and is positioned at the specified local offset. Used
                for flaming projectiles and burning objects.
            </summary>
            <param name="parent">The transform to attach the fire trail to</param>
            <param name="localOffset">The local position offset from the parent</param>
            <returns>The created ParticleSystem component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateFlameEffect(System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates flame particle effects with occasional fire sparks. Always creates a flame
                particle and has 16.7% chance (2/12) to also spawn fire sparks for added visual
                variety. Used for standard fire effects.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The spawn delay for the flame particle</param>
            <param name="velocity">The initial velocity vector</param>
        </member>
        <member name="M:EffectsController.CreateFlameParticle(System.Single,System.Single)">
            <summary>
                Creates standard flame lick particles at default background depth. Calls the
                z-parameter overload with z = -12 for consistent background flame placement.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
        </member>
        <member name="M:EffectsController.CreateFlameParticle(System.Single,System.Single,System.Single)">
            <summary>
                Creates standard flame lick particles with custom z-depth. Uses the FlameLicks
                particle emitter to generate realistic fire particles. Includes null checks for both
                instance and FlameLicks emitter.
            </summary>
            <param name="x">The x-coordinate where the flame appears</param>
            <param name="y">The y-coordinate where the flame appears</param>
            <param name="z">The z-coordinate (depth) of the flame particle</param>
        </member>
        <member name="M:EffectsController.CreateGib(Gib,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates a single gib instance with material and flip control. Sets up the gib's
                sprite with rotation settings from the prefab and launches it based on its local
                position relative to the origin point.
            </summary>
            <param name="gibPrefab">The gib prefab to instantiate</param>
            <param name="material">The material to apply to the gib</param>
            <param name="centerX">The x-coordinate of the gib origin</param>
            <param name="centerY">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>
        <member name="M:EffectsController.CreateGib(Gib,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates a single gib with hit position parameters. Currently identical to the
                simpler overload as hit position parameters are not utilized in the implementation.
                Maintained for API compatibility.
            </summary>
            <param name="gibPrefab">The gib prefab to instantiate</param>
            <param name="material">The material to apply to the gib</param>
            <param name="centerX">The x-coordinate of the gib origin</param>
            <param name="centerY">The y-coordinate of the gib origin</param>
            <param name="hitX">The x-coordinate of the impact (unused)</param>
            <param name="hitY">The y-coordinate of the impact (unused)</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
            <param name="flipDirection">The horizontal flip direction</param>
        </member>
        <member name="M:EffectsController.CreateGibs(GibHolder,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates gibs with center offset calculation for directional launching. Calculates
                launch vectors based on the difference between hit position and center position,
                creating realistic debris patterns that fly away from the impact point.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="centerX">The x-coordinate of the object center</param>
            <param name="centerY">The y-coordinate of the object center</param>
            <param name="hitX">The x-coordinate of the impact point</param>
            <param name="hitY">The y-coordinate of the impact point</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>
        <member name="M:EffectsController.CreateGibs(GibHolder,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates gibs with explicit material override. Forces all created gibs to use the
                specified material regardless of their prefab settings, useful for themed
                destruction effects or material-specific debris.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="material">The material to apply to all gibs</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>
        <member name="M:EffectsController.CreateGibs(GibHolder,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates gibs using each child's original material. The standard gib creation method
                that preserves the visual appearance defined in the prefabs while applying physics
                forces.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>
        <member name="M:EffectsController.CreateGibs(GibHolder,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a limited number of gibs with default flip direction. Allows control over
                the maximum number of gibs created, useful for performance management or specific
                visual effects.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="count">The maximum number of gibs to create</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>
        <member name="M:EffectsController.CreateGibs(GibHolder,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates a limited number of gibs with flip direction control. Applies 0.8-1.2x
                random force variance to each gib for natural scatter patterns. The flip direction
                parameter controls horizontal sprite orientation.
            </summary>
            <param name="gibs">The GibHolder containing gib prefabs</param>
            <param name="count">The maximum number of gibs to create</param>
            <param name="x">The x-coordinate of the gib origin</param>
            <param name="y">The y-coordinate of the gib origin</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
            <param name="flipDirection">The horizontal flip direction (-1 for left, 1 for right)</param>
        </member>
        <member name="M:EffectsController.CreateGibsFromNestedGibHolder(GibHolder,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Activates and launches pre-existing nested gib children from their parent holder.
                Iterates through all child transforms backwards, detaching and activating each gib
                before launching with scaled force (0.0625x multiplier). Preserves existing gib
                positions for authentic destruction patterns.
            </summary>
            <param name="gibs">The GibHolder containing nested gib children</param>
            <param name="hitX">The x-coordinate of the impact point</param>
            <param name="hitY">The y-coordinate of the impact point</param>
            <param name="xForce">The horizontal force multiplier</param>
            <param name="yForce">The vertical force multiplier</param>
            <param name="xI">The initial x-velocity for all gibs</param>
            <param name="yI">The initial y-velocity for all gibs</param>
        </member>
        <member name="M:EffectsController.CreateGlassShards(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates glass shattering effects with particle shards, sound, and environmental
                impact. Emits glass shard particles with random distribution, triggers camera shake,
                plays shattering sound, and disturbs nearby wildlife within the specified range.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of glass shard particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius for shards</param>
            <param name="offsetYRadius">The vertical spawn radius for shards</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="force">The force multiplier for shard velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="shakeSpeedM">The camera shake speed multiplier</param>
            <param name="volume">The sound effect volume</param>
            <param name="sizeM">The size multiplier for glass shard particles</param>
        </member>
        <member name="M:EffectsController.CreateGrenadeTrailEffect(System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
                Creates a grenade trail effect that follows projectile movement. Instantiates the
                grenadeTrail prefab and initializes it with the specified color and lifetime for
                visual tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="life">The lifetime of the trail in seconds</param>
            <param name="color">The color of the trail effect</param>
            <returns>The created ProjectileTrail component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateGreySandParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates grey sand or bone-like debris particles. Combines bone dots at 1.4x force
                (full count) with small bone particles at normal force (one-third count) for ashen
                or skeletal debris effects.
            </summary>
            <param name="x">The x-coordinate of the debris origin</param>
            <param name="y">The y-coordinate of the debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateGrindingSparkShower(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates grinding or friction spark shower effects. Uses shower spark emitter with
                20-40% lifetime for metal grinding, saw cutting, or heavy friction visual effects.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The number of grinding sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
        </member>
        <member name="M:EffectsController.CreateGroundWave(System.Single,System.Single,System.Single)">
            <summary>
                Creates an expanding ground shockwave effect radiating from the center point. The
                wave expands outward to the specified range, typically used with explosions to show
                ground impact effects.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
        </member>
        <member name="M:EffectsController.CreateHellPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates hell-themed smoke plume particles with reduced opacity. Uses a red-tinted
                smoke variant with 30% alpha multiplier (0.3) for a supernatural, hellish atmosphere
                effect.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateHugeExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a comprehensive huge explosion with multiple visual and audio effects.
                Includes main explosion, extra random explosions, spark shower, camera shake, audio
                filters, wildlife disturbance, optional ground wave, and screen flash. Designed for
                major explosive events.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spread for extra explosions</param>
            <param name="offsetYRadius">The vertical spread for extra explosions</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused in implementation)</param>
            <param name="puffSpeed">The particle velocity multiplier</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="extraExplosionsCount">Number of additional explosion effects to spawn</param>
            <param name="shrapnelCount">Number of spark particles to create</param>
            <param name="shrapnelForce">The velocity force for spark particles</param>
            <param name="groundWaveDistance">The ground wave range (must be &gt; 16 to activate)</param>
            <param name="lowPassFrequencyLossM">The audio low-pass filter intensity</param>
            <param name="flashEffectM">The screen flash effect intensity</param>
        </member>
        <member name="M:EffectsController.CreateHugeShockWave(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Creates a massive shockwave effect with optional aerial waves. The huge variant has
                greater visual impact and can optionally create waves in the air for enhanced
                effect. Returns the wave instance for customization.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
            <param name="createWavesInAir">Whether to create additional aerial wave effects</param>
            <returns>The created ExplosionGroundWave component</returns>
        </member>
        <member name="M:EffectsController.CreateLargeBloodGushEffect(BloodColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an extra large blood gush effect for massive damage. Randomly selects from 3
                large gush variations and flips horizontally based on impact direction. Used for
                heavy weapons and boss damage.
            </summary>
            <param name="color">The blood color type for the gush effect</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal impact direction (sign determines flip)</param>
            <param name="yI">The vertical impact direction (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateLaserParticle(System.Single,System.Single,UnityEngine.GameObject)">
            <summary>
                Creates a laser burn effect that can attach to a GameObject. The burn effect follows
                the attached object if provided, useful for showing persistent laser damage on
                moving targets.
            </summary>
            <param name="x">The x-coordinate of the laser burn</param>
            <param name="y">The y-coordinate of the laser burn</param>
            <param name="attachedGameObject">Optional GameObject to attach the burn effect to</param>
        </member>
        <member name="M:EffectsController.CreateLeafBurst(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
                Creates foliage destruction effects with colored leaf particles. Distributes leaves
                between two prefab types as shrapnel-style particles. Used when vegetation is
                damaged or destroyed by explosions or impacts.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of leaf particles to create</param>
            <param name="range">The spawn radius for leaf distribution</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="force">The velocity force multiplier</param>
            <param name="leafColor">The color tint for the leaf particles</param>
        </member>
        <member name="M:EffectsController.CreateLeafBurst(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates foliage destruction effects with automatic leaf coloring. Delegates to the
                color-specific overload using the current map's leaf color setting. Provides
                convenient access to leaf effects without manual color specification.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of leaf particles to create</param>
            <param name="range">The spawn radius for leaf distribution</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="force">The velocity force multiplier</param>
        </member>
        <member name="M:EffectsController.CreateMassiveExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a comprehensive massive explosion with enhanced effects. Nearly identical to
                huge explosion but uses larger prefabs and sounds. Includes all the same
                multi-layered effects for maximum visual and audio impact.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spread for extra explosions</param>
            <param name="offsetYRadius">The vertical spread for extra explosions</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused in implementation)</param>
            <param name="puffSpeed">The particle velocity multiplier</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="extraExplosionsCount">Number of additional explosion effects to spawn</param>
            <param name="shrapnelCount">Number of spark particles to create</param>
            <param name="shrapnelForce">The velocity force for spark particles</param>
            <param name="groundWaveDistance">The ground wave range (must be &gt; 16 to activate)</param>
            <param name="lowPassFrequencyLossM">The audio low-pass filter intensity</param>
            <param name="flashEffectM">The screen flash effect intensity</param>
        </member>
        <member name="M:EffectsController.CreateMeleeStrikeEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a melee weapon strike effect. The effect is horizontally flipped based on
                attack direction and vertically flipped on alternating strikes for visual variety.
                Uses a static scale multiplier that alternates between 1 and -1.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal attack direction (sign determines horizontal flip)</param>
            <param name="yI">The vertical attack direction (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateMeleeStrikeLargeEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a large melee weapon strike effect for heavy attacks. Functions identically
                to standard melee strikes but uses a larger prefab. Alternates vertical scale for
                variety.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal attack direction (sign determines horizontal flip)</param>
            <param name="yI">The vertical attack direction (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates metal debris particles without rotation. Combines dirt dots at 1.4x force
                for dust effects with small metal particles at normal force for metallic debris.
                Splits the count evenly between the two particle types.
            </summary>
            <param name="x">The x-coordinate of the debris origin</param>
            <param name="y">The y-coordinate of the debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates rotating metal particle effects with uniform spread. This convenience
                overload for the rotating version calls the full method with equal x and y offset
                radii for circular patterns.
            </summary>
            <param name="x">The x-coordinate of the metal origin</param>
            <param name="y">The y-coordinate of the metal origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning metal pieces</param>
        </member>
        <member name="M:EffectsController.CreateMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates rotating metal particle effects with elliptical spread. Uses two metal
                emitters with the first getting 1 + count/2 particles at 1.2x force and the second
                getting count/2 at 1.1x force for standard metal destruction with rotation.
            </summary>
            <param name="x">The x-coordinate of the metal origin</param>
            <param name="y">The y-coordinate of the metal origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning metal pieces</param>
        </member>
        <member name="M:EffectsController.CreateMusicalShockWave(System.Single,System.Single,System.Single)">
            <summary>
                Creates a musical-themed shockwave effect with unique visuals. Likely includes note
                or sound-based visual elements. Returns the wave instance for customization.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
            <returns>The created ExplosionGroundWave component</returns>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashBigEffect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a large muzzle flash effect for heavy weapons. Instantiates both the big
                flash animation and big glow effect. Unlike smaller flashes, this is not parented to
                any transform and remains stationary.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a standard muzzle flash effect for weapon firing. Instantiates both the main
                flash animation oriented by velocity and a separate glow effect. The main flash is
                parented to the provided transform for proper movement tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashMediumEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a medium-sized muzzle flash effect for intermediate weapons. Instantiates
                both the medium flash animation and standard glow effect. The main flash is parented
                to the provided transform for proper tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashRoundEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a round muzzle flash effect for circular barrel weapons. Instantiates both
                the round flash animation and standard glow effect. The main flash is parented to
                the provided transform for proper tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashRoundEffectBlue(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a blue-tinted round muzzle flash for energy weapons. Uses the specialized
                blue round flash prefab with standard glow effect. The main flash is parented to the
                provided transform for proper tracking.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashTankCannonEffect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a massive tank cannon muzzle flash effect. Uses the tank cannon flash prefab
                with huge glow effect. The flash is horizontally flipped based on firing direction
                (sign of xI) to ensure proper orientation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component (sign determines flip)</param>
            <param name="yI">The vertical velocity component for orientation</param>
        </member>
        <member name="M:EffectsController.CreateMuzzleFlashVomitEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a vomit-style muzzle flash effect for acid/bile weapons. Instantiates the
                vomit flash animation oriented by velocity and parents it to the provided transform.
                Does not include a glow effect like standard muzzle flashes.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateNuclearExplosion(System.Single,System.Single,System.Single)">
            <summary>
                Creates a nuclear explosion particle effect. Instantiates the specialized nuclear
                explosion particle system at the specified position without additional effects or
                modifications.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateOilyFlameEffect(System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates oily flame particle effects with occasional fire sparks. Similar to standard
                flames but uses oily flame particles for darker, smokier appearance. Has 16.7%
                chance to spawn additional sparks.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The spawn delay for the flame particle</param>
            <param name="velocity">The initial velocity vector</param>
        </member>
        <member name="M:EffectsController.CreateOilyFlameParticle(System.Single,System.Single)">
            <summary>
                Creates oil-based flame particles at default background depth. These darker, smokier
                flames are used for burning oil effects. Calls the z-parameter overload with z =
                -12.
            </summary>
            <param name="x">The x-coordinate where the oily flame appears</param>
            <param name="y">The y-coordinate where the oily flame appears</param>
        </member>
        <member name="M:EffectsController.CreateOilyFlameParticle(System.Single,System.Single,System.Single)">
            <summary>
                Creates oil-based flame particles with custom z-depth. Uses the OilyFlameLicks
                particle emitter for darker, smokier fire effects typical of burning oil. Includes
                null checks for safety.
            </summary>
            <param name="x">The x-coordinate where the oily flame appears</param>
            <param name="y">The y-coordinate where the oily flame appears</param>
            <param name="z">The z-coordinate (depth) of the oily flame particle</param>
        </member>
        <member name="M:EffectsController.CreatePinkPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates pink-colored smoke plume particles with reduced opacity. Uses a pink smoke
                variant with 30% alpha multiplier (0.3) for whimsical or special effect smoke.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreatePitchBlackPlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates extremely dark black smoke plume particles. Uses a pitch black variant with
                full alpha (1.0) for maximum opacity, suitable for heavy smoke or soot effects from
                intense fires.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreatePlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates standard dark gray smoke plume particles at z-depth 0. This is a convenience
                overload that calls the full version with default z positioning for standard smoke
                effects. The smoke plumes have flames mixed in.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreatePlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates standard dark gray smoke plume particles with full control. Automatically
                selects between small and large plume variants based on size multiplier (threshold
                at 2). Randomly picks between two texture variations for each size category. Large
                plumes have their size halved for proper scaling. The smoke plumes have flames mixed
                in.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses small plumes, 2+ uses large plumes)</param>
        </member>
        <member name="M:EffectsController.CreatePlumes(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates multiple smoke plume effects in a circular pattern. Uses
                CreateShrapnelCircle internally to distribute smoke plumes evenly around the origin
                point, useful for large explosions or smoke grenades. The plumes look like dark gray
                smoke with a bit of flames mixed in.
            </summary>
            <param name="x">The x-coordinate of the plume origin</param>
            <param name="y">The y-coordinate of the plume origin</param>
            <param name="count">The number of smoke plumes to create</param>
            <param name="radius">The radius of the circular spread pattern</param>
            <param name="force">The outward force applied to each plume</param>
            <param name="xI">The initial x-velocity added to all plumes</param>
            <param name="yI">The initial y-velocity added to all plumes</param>
        </member>
        <member name="M:EffectsController.CreatePredabroPlasmaPop(System.Single,System.Single)">
            <summary>
                Creates a Predator-style plasma explosion effect. Used for alien technology weapons
                and plasma-based projectile impacts with distinctive visual styling.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreatePredictionTrailEffect(System.Single,System.Single,System.Single,System.Single,Color)">
            <summary>
                Creates a prediction trail effect for trajectory visualization. Instantiates the
                predictionTrail prefab and initializes it with the specified color and lifetime for
                showing predicted paths.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="life">The lifetime of the trail in seconds</param>
            <param name="color">The color of the trail effect</param>
            <returns>The created ProjectileTrail component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateProjectileLargePopEffect(System.Single,System.Single)">
            <summary>
                Creates a large projectile impact effect. Combines a larger pop animation
                (projectileLargeFlickPuff) with a glowing flash effect for visual feedback when
                heavy projectiles hit surfaces or expire.
            </summary>
            <param name="x">The x-coordinate of the impact position</param>
            <param name="y">The y-coordinate of the impact position</param>
        </member>
        <member name="M:EffectsController.CreateProjectilePopEffect(System.Single,System.Single)">
            <summary>
                Creates a small projectile impact effect. Combines a pop animation
                (projectileFlickPuff) with a glowing flash effect for visual feedback when
                projectiles hit surfaces or expire.
            </summary>
            <param name="x">The x-coordinate of the impact position</param>
            <param name="y">The y-coordinate of the impact position</param>
        </member>
        <member name="M:EffectsController.CreateProjectilePopWhiteEffect(System.Single,System.Single)">
            <summary>
                Creates a white-colored projectile impact effect. Combines a white pop animation
                (projectileWhiteFlickPuff) with a glowing flash effect for visual feedback when
                energy or special projectiles hit surfaces.
            </summary>
            <param name="x">The x-coordinate of the impact position</param>
            <param name="y">The y-coordinate of the impact position</param>
        </member>
        <member name="M:EffectsController.CreateProjectilePuff(System.Single,System.Single)">
            <summary>
                Creates projectile impact effects combining a puff and glow. Spawns both a
                projectile flick puff and small muzzle flash glow at the impact position for bullet
                hits and similar projectile impacts.
            </summary>
            <param name="x">The x-coordinate of impact in world space</param>
            <param name="y">The y-coordinate of impact in world space</param>
        </member>
        <member name="M:EffectsController.CreateProjectileTimeBroPopEffect(System.Single,System.Single)">
            <summary>
                Creates a special effect for projectile time (bullet time) activation. The effect
                ignores time scale to maintain visual consistency during slow-motion gameplay.
                Combines a white flicker puff with a small muzzle flash glow distortion for dramatic
                effect.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreatePunchPopEffect(System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
                Creates a directional punch impact effect. The effect automatically orients itself
                based on the velocity vector, flipping horizontally when punching left (negative x
                velocity).
            </summary>
            <param name="x">The x-coordinate of the impact</param>
            <param name="y">The y-coordinate of the impact</param>
            <param name="velocity">The punch velocity vector used to determine effect orientation</param>
        </member>
        <member name="M:EffectsController.CreatePurplePlumeParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates purple-colored smoke plume particles with reduced opacity. Uses a purple
                smoke variant with 30% alpha multiplier (0.3) for magical or poisonous gas effects.
            </summary>
            <param name="x">The x-coordinate where the plume originates</param>
            <param name="y">The y-coordinate where the plume originates</param>
            <param name="z">The z-coordinate (depth) of the plume</param>
            <param name="force">The initial force applied to the plume particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateRedWarningDiamondHuge(System.Single,System.Single,Transform)">
            <summary>
                Creates a huge diamond-shaped red warning effect. The effect is parented to the
                provided transform for movement tracking. Used for major threat indicators or boss
                attacks.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateRedWarningDiamondLargege(System.Single,System.Single,Transform)">
            <summary>
                Creates a large diamond-shaped red warning effect. The effect is parented to the
                provided transform for movement tracking. Used for significant threat indicators.
                Note: Method name contains typo "Largege" instead of "Large".
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateRedWarningEffect(System.Single,System.Single,Transform)">
            <summary>
                Creates a red warning pulse effect at the specified position. The effect is parented
                to the provided transform for movement tracking. Used to indicate danger zones or
                incoming attacks.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateSandDots(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates only sand dot particles for simple sand puff effects. Uses 1.4x force
                multiplier for enhanced spread. Simpler than CreateSandParticles as it omits the
                small sand particles.
            </summary>
            <param name="x">The x-coordinate of the sand origin</param>
            <param name="y">The y-coordinate of the sand origin</param>
            <param name="count">The number of sand dots to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateSandParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates sandy debris particles for desert or beach environments. Combines sand dots
                at 1.4x force (full count) with small sand particles at normal force (one-third
                count) for a dusty sand effect.
            </summary>
            <param name="x">The x-coordinate of the sand origin</param>
            <param name="y">The y-coordinate of the sand origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateSandWhiteParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color)">
            <summary>
                Creates white-tinted sand particles with two color variations. Uses dirt dots at
                1.4x force (full count) combined with small white dirt particles (one-third count)
                for light-colored sand or ash effects.
            </summary>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color variation for the particles</param>
            <param name="color2">The second color variation for the particles</param>
        </member>
        <member name="M:EffectsController.CreateScrapParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates complex scrap metal destruction effects. The most detailed metal particle
                effect, combining: 5 scrap emitters with varying counts and forces, grey dirt dots
                at 1.4x force, 2 tiny scrap emitters at 1.6x force, and 2 metal emitters at 1.6x
                force. Second scrap emitter uses 1.5x angular velocity for varied rotation speeds.
            </summary>
            <param name="x">The x-coordinate of the scrap origin</param>
            <param name="y">The y-coordinate of the scrap origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The base rotational velocity for spinning pieces</param>
        </member>
        <member name="M:EffectsController.CreateSemenParticles(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates semen particle effects using two particle sizes. Distributes particles
                between small particles (1/2 of count + 1) and dot particles (1/2 of count + 1).
                Each particle type uses reduced spawn radius (10% of provided). Note: The BloodColor
                parameter appears unused.
            </summary>
            <param name="color">The blood color type (parameter appears unused in implementation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The total number of particles to create across both sizes</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateSemenParticlesDots(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates semen dot particle effects at the specified position with z-coordinate of 1.
                This method delegates to CreateBloodParticlesDots, effectively treating semen dots
                as blood dot particles.
            </summary>
            <param name="color">The blood color type (used for blood particle creation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>
        <member name="M:EffectsController.CreateSemenParticlesDots(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates semen dot particle effects with clustered spawning and size scaling. Uses
                dedicated semen dot emitter (or cutscene blood dots as fallback) with 50% chance to
                add extra particle. Implements clustering where 60% spawn near previous positions
                with semi-transparent color (70-110% alpha).
            </summary>
            <param name="color">The blood color type (parameter appears unused in implementation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of dot particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
            <param name="scaleM">The scale multiplier for particle size</param>
        </member>
        <member name="M:EffectsController.CreateSemenParticlesSmall(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small semen particle effects at the specified position with z-coordinate of
                1. This method delegates to CreateBloodParticlesSmall, effectively treating semen as
                a blood particle type.
            </summary>
            <param name="color">The blood color type (used for blood particle creation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateSemenParticlesSmall(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small semen particle effects with clustered spawning pattern. Uses dedicated
                semen particle emitter and implements clustering where 60% of particles spawn near
                previous positions. Particles emit with velocity based on spawn position plus base
                velocity, with brightness varying 80-100%.
            </summary>
            <param name="color">The blood color type (parameter appears unused in implementation)</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateShaderExplosion(EffectsController.ExplosionSize,Vector3,System.Single)">
            <summary>
                Creates shader-based particle explosions of specified size. Supports various
                explosion scales from Tiny to Massive, with optional white flash suppression
                (LargeNoWhite). All particle systems respect the delay parameter for synchronized
                effects.
            </summary>
            <param name="size">The explosion size enum (Tiny, Small, Medium, Large, Massive, LargeNoWhite)</param>
            <param name="position">The world position for the explosion center</param>
            <param name="delay">The delay in seconds before particles start emitting</param>
        </member>
        <member name="M:EffectsController.CreateShellSpeedTrail(System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates speed trail effects for fast-moving projectiles like shells. The trail is
                oriented using the angleZ parameter to match projectile rotation. Returns the Puff
                component for attachment to moving objects.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="angleZ">The rotation angle in degrees for trail orientation</param>
            <param name="velocity">The initial velocity vector</param>
            <returns>The created Puff component for the speed trail</returns>
        </member>
        <member name="M:EffectsController.CreateShinyMetalParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates shiny metallic particle effects with rotation. Uses two shiny metal
                emitters, each receiving 1 + count/2 particles at 1.2x force for polished metal
                destruction effects with realistic spinning.
            </summary>
            <param name="x">The x-coordinate of the metal origin</param>
            <param name="y">The y-coordinate of the metal origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning metal pieces</param>
        </member>
        <member name="M:EffectsController.CreateShockWave(System.Single,System.Single,System.Single)">
            <summary>
                Creates a standard shockwave effect with visual distortion. Returns the wave
                instance for additional customization. Used for medium-scale explosions and impacts.
            </summary>
            <param name="x">The x-coordinate of the wave center</param>
            <param name="y">The y-coordinate of the wave center</param>
            <param name="range">The maximum expansion distance of the wave</param>
            <returns>The created ExplosionGroundWave component</returns>
        </member>
        <member name="M:EffectsController.CreateShrapnel(Shrapnel,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates shrapnel debris with initial velocity inheritance. This basic overload
                creates white-colored shrapnel pieces that spread randomly within the radius and
                inherit the specified initial velocity.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
        </member>
        <member name="M:EffectsController.CreateShrapnel(Shrapnel,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates colored shrapnel debris with initial velocity inheritance. Spreads pieces
                randomly within the radius, applies the specified color tint (if not white), and
                launches with force proportional to distance from origin plus the inherited
                velocity.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
            <param name="shrapnelColor">The color tint to apply to the shrapnel pieces</param>
        </member>
        <member name="M:EffectsController.CreateShrapnel(Shrapnel,UnityEngine.Material,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates shrapnel debris with a custom material override. Spreads pieces randomly
                within the radius and applies the specified shared material to each piece's renderer
                before launching.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="sharedMaterial">The material to apply to all shrapnel pieces</param>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
        </member>
        <member name="M:EffectsController.CreateShrapnelBlindStar(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Transform)">
            <summary>
                Creates stunning star effects that attach to and follow a unit. Uses PuffTwoLayer
                effects cycling through 3 star variants. Each star is parented to the unit transform
                so it moves with the stunned character. Increments the global stunned stars counter
                for effect management.
            </summary>
            <param name="x">The x-coordinate for star creation (before parenting)</param>
            <param name="y">The y-coordinate for star creation (before parenting)</param>
            <param name="radius">The spread radius for star positioning</param>
            <param name="force">The initial force for star movement (before parenting)</param>
            <param name="count">The number of star effects to create</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="unitTransform">The transform to parent the stars to (usually the stunned unit)</param>
        </member>
        <member name="M:EffectsController.CreateShrapnelCircle(Shrapnel,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates shrapnel debris in a circular arc pattern. Distributes pieces evenly along
                an arc (size based on count), launching each outward from its position on the
                circle. Arc size ranges from 0.1 to 2π radians.
            </summary>
            <param name="shrapnelPrefab">The shrapnel prefab template to instantiate</param>
            <param name="x">The x-coordinate of the circle center</param>
            <param name="y">The y-coordinate of the circle center</param>
            <param name="radius">The radius of the circular pattern</param>
            <param name="force">The launch force multiplier for shrapnel velocity</param>
            <param name="count">The number of shrapnel pieces to create along the arc</param>
            <param name="xI">The initial x-velocity to add to each piece</param>
            <param name="yI">The initial y-velocity to add to each piece</param>
        </member>
        <member name="M:EffectsController.CreateSlimeExplosion(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,Vector3,BloodColor)">
            <summary>
                Creates a full-scale slime or blood explosion based on color. Includes main
                explosion, extra blood gushes, slime particles, camera shake, sound, wildlife
                disturbance, screen flash, 360-degree blood spray, and muzzle flash glow. The most
                comprehensive organic explosion effect.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spread for extra effects</param>
            <param name="offsetYRadius">The vertical spread for extra effects</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused)</param>
            <param name="puffSpeed">The particle speed multiplier (unused)</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="extraExplosionsCount">Number of additional blood gush effects</param>
            <param name="shrapnelCount">Number of slime particles to create</param>
            <param name="shrapnelForce">The velocity force for particles</param>
            <param name="flashEffectM">The screen flash effect intensity</param>
            <param name="normal">The surface normal direction (unused)</param>
            <param name="bloodColor">The blood color type (Green or Red supported)</param>
        </member>
        <member name="M:EffectsController.CreateSlimeExplosionSmall(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,Vector3)">
            <summary>
                Creates a small slime/organic explosion effect. Spawns green slime particles,
                creates visual splatter, shakes camera, plays wet explosion sound, and disturbs
                nearby wildlife. The normal parameter is accepted but not used in the current
                implementation.
            </summary>
            <param name="x">The x-coordinate of explosion center</param>
            <param name="y">The y-coordinate of explosion center</param>
            <param name="offsetXRadius">The horizontal spawn radius (unused)</param>
            <param name="offsetYRadius">The vertical spawn radius (unused)</param>
            <param name="disturbRange">The radius for disturbing wildlife</param>
            <param name="delayM">The delay multiplier (unused)</param>
            <param name="puffSpeed">The particle speed multiplier (unused)</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
            <param name="shrapnelCount">Number of slime particles to create</param>
            <param name="shrapnelForce">The velocity force for slime particles</param>
            <param name="normal">The surface normal direction (unused)</param>
        </member>
        <member name="M:EffectsController.CreateSlimeParticles(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates slime particle effects with the specified color and parameters. Delegates to
                the color-based overload after converting the BloodColor enum to its corresponding
                Unity Color, reducing the particle count by half.
            </summary>
            <param name="color">The blood color type to use for slime particles</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of particles to create (will be halved internally)</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateSlimeParticles(Color,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates slime particle effects with a specific Unity Color. Uses a clustered
                spawning pattern where 60% of particles spawn near previous positions to create more
                organic slime trails. Particles emit with velocity based on their spawn position
                relative to the center plus base velocity components.
            </summary>
            <param name="color">The Unity Color for the slime particles</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The base horizontal velocity component</param>
            <param name="yI">The base vertical velocity component</param>
        </member>
        <member name="M:EffectsController.CreateSmallExplosion(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates small-scale explosion effects with shader particles and optional flames.
                Uses random shader explosion size (Small, Medium, or Large) and spawns 0-3 flame
                effects in various patterns. Includes camera shake, sound, and accident ticker
                reset.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="shakeM">The camera shake intensity multiplier</param>
            <param name="volume">The explosion sound volume</param>
        </member>
        <member name="M:EffectsController.CreateSmallFireTrail(Transform,Vector3)">
            <summary>
                Creates a smaller fire trail particle system attached to a parent transform. Similar
                to standard fire trail but with reduced particle count and size. Used for smaller
                burning projectiles or effects.
            </summary>
            <param name="parent">The transform to attach the fire trail to</param>
            <param name="localOffset">The local position offset from the parent</param>
            <returns>The created ParticleSystem component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateSmallWhiteParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color)">
            <summary>
                Creates small white particles with two color variations. Combines smaller white
                particles (one-quarter count) with dirt dots at 1.1x force (three-quarters count)
                for fine powder or dust effects.
            </summary>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color variation for the particles</param>
            <param name="color2">The second color variation for the particles</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single spark particle with default lifetime. Color interpolates from
                yellow (1,1,0.3) to red (1,0,0) based on the redM parameter for temperature-based
                coloring.
            </summary>
            <param name="x">The x-coordinate for the spark</param>
            <param name="y">The y-coordinate for the spark</param>
            <param name="z">The z-coordinate for the spark</param>
            <param name="offsetRadius">The random position offset radius</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single spark particle with custom lifetime multiplier. Allows control over
                how long the spark remains visible while maintaining temperature-based color
                interpolation.
            </summary>
            <param name="x">The x-coordinate for the spark</param>
            <param name="y">The y-coordinate for the spark</param>
            <param name="z">The z-coordinate for the spark</param>
            <param name="offsetRadius">The random position offset radius</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for the spark</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single)">
            <summary>
                Creates a single spark particle with explicit color and lifetime control. Bypasses
                temperature interpolation for direct color specification, useful for non-fire spark
                effects.
            </summary>
            <param name="x">The x-coordinate for the spark</param>
            <param name="y">The y-coordinate for the spark</param>
            <param name="z">The z-coordinate for the spark</param>
            <param name="offsetRadius">The random position offset radius</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="color">The explicit color for the spark</param>
            <param name="lifeM">The lifetime multiplier for the spark</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticles(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates multiple spark particles with 3D positioning and lifetime control. Each
                spark gets temperature-based coloring and the specified lifetime multiplier.
            </summary>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="z">The z-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for all sparks</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates multiple spark particles at z=0 with lifetime control. This 2D convenience
                method forwards to the 3D version for standard spark effects on the main gameplay
                plane.
            </summary>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for all sparks</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates spark particles using a specific emitter with default lifetime. Allows
                customization of the spark type while maintaining standard spark behavior and
                coloring.
            </summary>
            <param name="emitter">The particle emitter to use for sparks</param>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
        </member>
        <member name="M:EffectsController.CreateSparkParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates spark particles using a specific emitter with lifetime control. Provides
                full control over spark type, duration, and temperature-based coloring for
                specialized spark effects.
            </summary>
            <param name="emitter">The particle emitter to use for sparks</param>
            <param name="x">The x-coordinate for spark origin</param>
            <param name="y">The y-coordinate for spark origin</param>
            <param name="count">The number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow hot, 1=red hot)</param>
            <param name="lifeM">The lifetime multiplier for all sparks</param>
        </member>
        <member name="M:EffectsController.CreateSparkShower(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a mixed spark shower with both shower and floating particles. The
                particlesFloatM parameter controls the ratio between shower sparks (falling) and
                floating sparks (drifting), allowing for customized spark behavior combinations.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The total number of sparks to create</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
            <param name="particlesFloatM">The ratio of floating particles (0=all shower, 1=all float)</param>
        </member>
        <member name="M:EffectsController.CreateStoneShrapnel(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates multiple stone debris pieces that fly outward from an impact point. Each
                piece is randomly positioned within the specified radius and launched with velocity
                proportional to its distance from center.
            </summary>
            <param name="x">The x-coordinate of the shrapnel origin</param>
            <param name="y">The y-coordinate of the shrapnel origin</param>
            <param name="radius">The maximum spread radius for shrapnel pieces</param>
            <param name="count">The number of stone shrapnel pieces to create</param>
        </member>
        <member name="M:EffectsController.CreateSuddenSparkShower(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a sudden burst of short-lived floating spark particles. Uses floating spark
                emitter with 20-40% lifetime for quick burst effects like impacts, electrical
                shorts, or sudden friction.
            </summary>
            <param name="x">The x-coordinate where sparks originate</param>
            <param name="y">The y-coordinate where sparks originate</param>
            <param name="count">The number of sparks in the burst</param>
            <param name="offsetRadius">The spread radius for spark placement</param>
            <param name="force">The force multiplier for spark velocity</param>
            <param name="xI">The initial x-velocity added to all sparks</param>
            <param name="yI">The initial y-velocity added to all sparks</param>
            <param name="redM">The red color multiplier (0=yellow, 1=red)</param>
        </member>
        <member name="M:EffectsController.CreateSummonMagicParticle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates magical summoning particles with initial velocity. Used for spell casting
                and magical summoning effects, allowing the particles to move in a specified
                direction upon creation.
            </summary>
            <param name="x">The x-coordinate where the magic particle appears</param>
            <param name="y">The y-coordinate where the magic particle appears</param>
            <param name="xI">The initial x-velocity of the particle</param>
            <param name="yI">The initial y-velocity of the particle</param>
        </member>
        <member name="M:EffectsController.CreateTimeBroMuzzleFlashEffect(System.Single,System.Single,System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a time-manipulation muzzle flash that ignores time scaling. Used for Time
                Bro's weapons to ensure effects play at normal speed during slow motion. Creates
                both flash and glow effects with ignoreTimeScale enabled.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xI">The horizontal velocity component for orientation</param>
            <param name="yI">The vertical velocity component for orientation</param>
            <param name="parent">The transform to parent the main flash effect to</param>
        </member>
        <member name="M:EffectsController.CreateTravellingExplosion(System.Single,System.Single,System.Single,Vector2,System.Single)">
            <summary>
                Placeholder for creating moving explosion effects. Currently not implemented and
                performs no action. Parameters are accepted but unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="velocity">The intended movement velocity</param>
            <param name="life">The intended lifetime</param>
        </member>
        <member name="M:EffectsController.CreateWaterDrip(System.Single,System.Single,System.Single,System.Single,System.Single,BloodColor)">
            <summary>
                Creates a water drip particle effect at the specified position. The particle emits
                with zero velocity and randomized size/lifetime. Note: All offset and color
                parameters appear unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal offset (unused in implementation)</param>
            <param name="offsetYRadius">The vertical offset (unused in implementation)</param>
            <param name="scaleM">The scale multiplier for particle size</param>
            <param name="color">The blood color (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateWaterDrip(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,BloodColor)">
            <summary>
                Creates a water drip particle effect with position offset and initial velocity.
                Spawns particle at a random position within the offset radius with specified
                velocity and scaled size/lifetime.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="offsetXRadius">The horizontal spawn radius around the center position</param>
            <param name="offsetYRadius">The vertical spawn radius around the center position</param>
            <param name="xI">The initial horizontal velocity</param>
            <param name="yI">The initial vertical velocity</param>
            <param name="scaleM">The scale multiplier for particle size</param>
            <param name="color">The blood color (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateWhiteFlashPop(System.Single,System.Single)">
            <summary>
                Creates a bright white flash explosion effect. Used for energy-based explosions and
                special weapon impacts that need a clean, bright visual burst.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateWhiteFlashPopSmall(System.Single,System.Single)">
            <summary>
                Creates a smaller version of the white flash explosion effect. Used for minor energy
                impacts and smaller special weapon effects that need a bright but less prominent
                visual burst.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateWoodDarkParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates dark wood particle effects with uniform spread radius. This convenience
                overload calls the full version with equal x and y offset radii for circular spread
                patterns.
            </summary>
            <param name="x">The x-coordinate of the dark wood origin</param>
            <param name="y">The y-coordinate of the dark wood origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>
        <member name="M:EffectsController.CreateWoodDarkParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates dark wood particle effects with elliptical spread. Uses four dark wood
                emitters with counts of half, half, third, and third of the total, with varying
                forces (1.2x, 1.1x, 1.0x, 1.0x) for burnt or aged wood destruction effects.
            </summary>
            <param name="x">The x-coordinate of the dark wood origin</param>
            <param name="y">The y-coordinate of the dark wood origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>
        <member name="M:EffectsController.CreateWoodParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates rotating wood particle effects with uniform spread radius. This convenience
                overload calls the full version with equal x and y offset radii for circular spread
                patterns.
            </summary>
            <param name="x">The x-coordinate of the wood debris origin</param>
            <param name="y">The y-coordinate of the wood debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>
        <member name="M:EffectsController.CreateWoodParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates rotating wood particle effects with elliptical spread. Uses three wood
                particle emitters with varying forces (1.2x, 1.1x, 1.0x) plus wood dots at high
                force (40 + 1.6x). Wood dots use random wood colors from the theme for realistic
                variety.
            </summary>
            <param name="x">The x-coordinate of the wood debris origin</param>
            <param name="y">The y-coordinate of the wood debris origin</param>
            <param name="count">The total number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius for particle placement</param>
            <param name="yOffsetRadius">The vertical spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="angularVelocity">The rotational velocity for spinning wood pieces</param>
        </member>
        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector2,System.Single,System.Boolean)">
            <summary>
                Spawns an explosion effect at the specified 2D position using the ExplosionSpawner
                system.
            </summary>
            <param name="position">The 2D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or secondary explosions.</param>
        </member>
        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
                Spawns an explosion effect at the specified 3D position using the ExplosionSpawner
                system.
            </summary>
            <param name="position">The 3D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or secondary explosions.</param>
        </member>
        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector2,System.Single,System.Boolean,UnityEngine.Vector3[]@,System.Single[]@)">
            <summary>
                Spawns an explosion effect at the specified 2D position and returns information
                about the explosion components created.
            </summary>
            <param name="position">The 2D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or secondary explosions.</param>
            <param name="positions">Output array containing the positions of all explosion components created.</param>
            <param name="sizes">Output array containing the sizes of all explosion components created.</param>
        </member>
        <member name="M:EffectsController.SpawnExplosion(UnityEngine.Vector3,System.Single,System.Boolean,UnityEngine.Vector3[]@,System.Single[]@)">
            <summary>
                Spawns an explosion effect at the specified 3D position and returns information
                about the explosion components created.
            </summary>
            <param name="position">The 3D position where the explosion should occur.</param>
            <param name="size">The size or intensity of the explosion effect.</param>
            <param name="spawnExtras">Whether to spawn additional explosion effects like debris or secondary explosions.</param>
            <param name="positions">Output array containing the positions of all explosion components created.</param>
            <param name="sizes">Output array containing the sizes of all explosion components created.</param>
        </member>
        <member name="M:EffectsController.SprayBlood(BloodColor,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Sprays blood onto surrounding terrain using raycasts. Casts rays in a circular
                pattern and applies blood to any blocks hit within range. Red blood additionally
                bloodies nearby doodads. Used to create persistent blood decals on the environment.
            </summary>
            <param name="bloodColor">The type of blood to spray</param>
            <param name="rays">The number of raycast directions to check</param>
            <param name="x">The x-coordinate of spray origin</param>
            <param name="y">The y-coordinate of spray origin</param>
            <param name="range">The maximum spray distance</param>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:EffectsController.ExplodeParticle">
            <summary>
                Particle system for general explosion particle effects.
            </summary>
        </member>
        <member name="F:EffectsController.Explosion">
            <summary>
                Particle system for standard-sized explosion effects, the default explosion size.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionLarge">
            <summary>
                Particle system for large explosion effects, used for powerful explosives.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionLargeNoWhite">
            <summary>
                Particle system for large explosions without white flash, for darker explosion
                visuals.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionMassive">
            <summary>
                Particle system for massive explosion effects, used for extreme destructive blasts.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionNuclear">
            <summary>
                Particle system for nuclear-scale explosion effects, the largest explosion type.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionSmall">
            <summary>
                Particle system for small explosion effects, standard grenade-sized blasts.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionSpawner">
            <summary>
                Main explosion prefab (Explosion) used by all SpawnExplosion() methods as the
                template for creating explosions of various sizes and types throughout the game.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionTiny">
            <summary>
                Particle system for tiny explosion effects, used for very small blasts and impacts.
            </summary>
        </member>
        <member name="F:EffectsController.ExplosionTravelling">
            <summary>
                Particle system for travelling explosion effects that move through space.
            </summary>
        </member>
        <member name="F:EffectsController.FireTrail">
            <summary>
                Particle system for standard fire trail effects following projectiles or movement.
            </summary>
        </member>
        <member name="F:EffectsController.FireTrailSmall">
            <summary>
                Particle system for small fire trail effects for lighter projectiles.
            </summary>
        </member>
        <member name="F:EffectsController.FlameLicks">
            <summary>
                Particle system for standard flame licking effects on burning objects.
            </summary>
        </member>
        <member name="F:EffectsController.OilyFlameLicks">
            <summary>
                Particle system for oily flame effects with different visual properties than
                standard flames.
            </summary>
        </member>
        <member name="F:EffectsController.SmokeTrail">
            <summary>
                Particle system for smoke trail effects from rockets or smoking objects.
            </summary>
        </member>
        <member name="F:EffectsController.acidMeltBigDog">
            <summary>
                Melting animation prefab instantiated when living big dog mook units dissolve from
                acid damage after their acid melt timer expires, sized for large canines.
            </summary>
        </member>
        <member name="F:EffectsController.acidMeltDeadBigDog">
            <summary>
                Melting animation prefab instantiated when dead big dog mook units dissolve from
                acid damage, creating a dissolving effect for large canine corpses.
            </summary>
        </member>
        <member name="F:EffectsController.acidMeltDeadDog">
            <summary>
                Melting animation prefab instantiated when dead dog mook units dissolve from acid
                damage, creating a dissolving effect for canine corpses.
            </summary>
        </member>
        <member name="F:EffectsController.acidMeltDog">
            <summary>
                Melting animation prefab instantiated when living dog mook units dissolve from acid
                damage after their acid melt timer expires, creating a canine-specific dissolving
                effect.
            </summary>
        </member>
        <member name="F:EffectsController.acidMeltGrenadier">
            <summary>
                Melting animation prefab instantiated when living grenadier units dissolve from acid
                damage after their acid melt timer expires, creating a grenadier-specific dissolving
                effect.
            </summary>
        </member>
        <member name="F:EffectsController.backgroundBloodSprayPrefab">
            <summary>
                Background blood spray prefab (BackgroundBloodSpray) used by
                CreateBackgroundBloodSpray() to generate animated blood spray effects with velocity,
                creating dynamic blood visuals on background surfaces.
            </summary>
        </member>
        <member name="F:EffectsController.bigDogSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when living big dog mook
                units are covered in acid, creating an exposed skeleton appearance for large
                canines.
            </summary>
        </member>
        <member name="F:EffectsController.bigMookMeltingPrefab">
            <summary>
                Melting animation prefab instantiated when living big mook units dissolve from acid
                damage after their acid melt timer expires, sized for larger units.
            </summary>
        </member>
        <member name="F:EffectsController.bigMookSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when living big mook units
                are covered in acid, creating an exposed skeleton appearance specific to their
                larger size.
            </summary>
        </member>
        <member name="F:EffectsController.blankDoodadGibPrefab">
            <summary>
                Blank doodad piece prefab template for creating custom environmental debris.
            </summary>
        </member>
        <member name="F:EffectsController.blankGibPrefab">
            <summary>
                Blank gib prefab template for creating custom body part debris.
            </summary>
        </member>
        <member name="F:EffectsController.bloodArtery1Prefab">
            <summary>
                First arterial blood spray effect prefab, creates directional pulsing blood stream
                for severe wounds.
            </summary>
        </member>
        <member name="F:EffectsController.bloodArtery2Prefab">
            <summary>
                Second arterial blood spray effect prefab variant, creates alternative pulsing blood
                stream for arterial wounds.
            </summary>
        </member>
        <member name="F:EffectsController.bloodBlockOverlayPrefabs">
            <summary>
                Array of blood overlay sprite prefabs (SpriteSM) used to randomly select and apply
                blood splatter overlays to blocks, creating variety in blood-covered surface
                appearances.
            </summary>
        </member>
        <member name="F:EffectsController.bloodExplosion">
            <summary>
                Blood explosion effect prefab that creates red blood burst for extreme gore effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGush1Prefab">
            <summary>
                First blood gush effect prefab, creates a medium blood spray when units are severely
                damaged.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGush2Prefab">
            <summary>
                Second blood gush effect prefab variant for medium blood spray effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGush3Prefab">
            <summary>
                Third blood gush effect prefab variant, adds variety to medium blood spray visuals.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGushGreen1Prefab">
            <summary>
                First green blood gush effect prefab for alien blood effects. Not currently used but
                available for green-blooded enemies.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGushGreen2Prefab">
            <summary>
                Second green blood gush effect prefab variant for alien blood. Not currently used
                but available for variety.
            </summary>
        </member>
        <member name="F:EffectsController.bloodGushGreen3Prefab">
            <summary>
                Third green blood gush effect prefab variant for alien blood variety. Not currently
                used but available for effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodLargeGush1Prefab">
            <summary>
                First large blood gush effect prefab, creates massive blood spray for extreme damage
                or large units.
            </summary>
        </member>
        <member name="F:EffectsController.bloodLargeGush2Prefab">
            <summary>
                Second large blood gush effect prefab variant for massive blood spray effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodLargeGush3Prefab">
            <summary>
                Third large blood gush effect prefab variant, adds variety to extreme blood effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSmallSplash1Prefab">
            <summary>
                First small blood splash effect prefab, used for minor damage or smaller units.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSmallSplash2Prefab">
            <summary>
                Second small blood splash effect prefab variant for minor blood effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSplash1Prefab">
            <summary>
                First blood splash effect prefab variant, creates standard blood splatter when units
                take damage.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSplash2Prefab">
            <summary>
                Second blood splash effect prefab variant, provides visual variety for blood
                splatter effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSplatDecalSmallPrefab">
            <summary>
                Small blood splat decal prefab used by CreateBackgroundBloodSplat() to place
                stationary blood splatter effects on surfaces, creating persistent blood visuals
                from damage.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSprayExplode1Prefab">
            <summary>
                First blood spray explosion effect prefab, creates radial blood burst from explosive
                damage.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSprayExplode2Prefab">
            <summary>
                Second blood spray explosion effect prefab variant for explosive blood burst
                effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSpurt1Prefab">
            <summary>
                First blood spurt effect prefab, creates directional blood jets accompanying gush
                effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSpurt2Prefab">
            <summary>
                Second blood spurt effect prefab variant for directional blood jet effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodSpurt3Prefab">
            <summary>
                Third blood spurt effect prefab variant, provides variety for blood spurt visuals.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTinySplash1Prefab">
            <summary>
                First tiny blood splash effect prefab, used for minimal damage or very small blood
                droplets.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTinySplash2Prefab">
            <summary>
                Second tiny blood splash effect prefab variant for minimal blood effects.
            </summary>
        </member>
        <member name="F:EffectsController.blueMuzzleFlashRoundPrefab">
            <summary>
                Blue-colored round muzzle flash puff effect for energy weapons.
            </summary>
        </member>
        <member name="F:EffectsController.boulderRollPoof">
            <summary>
                Cached instance of the boulder rolling poof effect, created from
                boulderRollPoofPrefab when needed.
            </summary>
        </member>
        <member name="F:EffectsController.boulderRollPoofPrefab">
            <summary>
                Reference to the boulder rolling poof effect prefab, loaded on demand for rolling
                boulder dust trails.
            </summary>
        </member>
        <member name="F:EffectsController.bulletPoofPrefab">
            <summary>
                Bullet impact poof effect that creates small dust cloud when bullets hit surfaces.
            </summary>
        </member>
        <member name="F:EffectsController.chakramTrail">
            <summary>
                Projectile trail prefab for chakram weapons, creating a spinning visual trail effect
                behind thrown chakrams.
            </summary>
        </member>
        <member name="F:EffectsController.corpseSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when dead regular units are
                covered in acid, creating an exposed skeleton appearance on corpses.
            </summary>
        </member>
        <member name="F:EffectsController.deadBigDogSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when dead big dog mook units
                are covered in acid, creating an exposed skeleton appearance on large canine
                corpses.
            </summary>
        </member>
        <member name="F:EffectsController.deadBigMookSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when dead big mook units are
                covered in acid, creating an exposed skeleton appearance on large corpses.
            </summary>
        </member>
        <member name="F:EffectsController.deadDogSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when dead dog mook units are
                covered in acid, creating an exposed skeleton appearance on canine corpses.
            </summary>
        </member>
        <member name="F:EffectsController.deadGrenadierSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when dead grenadier mook
                units are covered in acid, creating an exposed skeleton appearance on grenadier
                corpses.
            </summary>
        </member>
        <member name="F:EffectsController.dogSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when living dog mook units
                are covered in acid, creating an exposed skeleton appearance specific to canine
                units.
            </summary>
        </member>
        <member name="F:EffectsController.explosion">
            <summary>
                Generic explosion puff effect used in various explosion methods for creating blast
                visuals.
            </summary>
        </member>
        <member name="F:EffectsController.explosionBig">
            <summary>
                Big explosion puff effect prefab for larger blast visuals. Not currently used but
                available for medium-sized explosions.
            </summary>
        </member>
        <member name="F:EffectsController.explosionGroundWavePrefab">
            <summary>
                Ground wave explosion effect prefab for terrain-following blast waves. Not currently
                used but available for ground impacts.
            </summary>
        </member>
        <member name="F:EffectsController.explosionHuge">
            <summary>
                Huge explosion puff effect prefab for massive blast visuals. Not currently used but
                available for large explosions.
            </summary>
        </member>
        <member name="F:EffectsController.explosionMassive">
            <summary>
                Massive explosion puff effect prefab for extreme blast visuals. Not currently used
                but available for devastating explosions.
            </summary>
        </member>
        <member name="F:EffectsController.explosionMusicalShockWavePrefab">
            <summary>
                Musical shockwave explosion effect prefab for special sound-based attacks. Not
                currently used but available for sonic weapons.
            </summary>
        </member>
        <member name="F:EffectsController.explosionRangePrefab">
            <summary>
                Prefab for the explosion range indicator effect that shows the area of effect for
                explosions.
            </summary>
        </member>
        <member name="F:EffectsController.explosionShockWaveHugePrefab">
            <summary>
                Huge shockwave explosion effect prefab for massive radial blasts. Not currently used
                but available for extreme explosions.
            </summary>
        </member>
        <member name="F:EffectsController.explosionShockWavePrefab">
            <summary>
                Shockwave explosion effect prefab for radial blast waves. Not currently used but
                available for concussive blasts.
            </summary>
        </member>
        <member name="F:EffectsController.explosionSparkShrapnel">
            <summary>
                Spark shrapnel prefab for explosion effects. Also used by CutsceneEffectsController
                for cinematic explosions.
            </summary>
        </member>
        <member name="F:EffectsController.fileCabinetGibPrefab">
            <summary>
                File cabinet debris piece for office environment destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.flameSheetBackgroundParticle1">
            <summary>
                First background flame sheet particle emitter for large area fire effects.
            </summary>
        </member>
        <member name="F:EffectsController.flameSheetBackgroundParticle2">
            <summary>
                Second background flame sheet particle variant for visual diversity in fires.
            </summary>
        </member>
        <member name="F:EffectsController.flameSheetBackgroundParticle3">
            <summary>
                Third background flame sheet particle variant for complex fire visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.flameSheetBackgroundParticle4">
            <summary>
                Fourth background flame sheet particle variant for maximum fire effect variety.
            </summary>
        </member>
        <member name="F:EffectsController.freezeDamageEffect">
            <summary>
                Freeze damage visual effect prefab that shows ice crystals and freezing on damaged
                units.
            </summary>
        </member>
        <member name="F:EffectsController.grenadeTrail">
            <summary>
                Projectile trail prefab for grenades, creating a visible path that follows grenade
                projectiles through the air.
            </summary>
        </member>
        <member name="F:EffectsController.grenadierSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when living grenadier mook
                units are covered in acid, creating an exposed skeleton appearance specific to
                grenadiers.
            </summary>
        </member>
        <member name="F:EffectsController.groundExplodePoofPrefab">
            <summary>
                Ground explosion poof effect for terrain-based explosions, used by
                CreateGroundExplodePoofEffect method.
            </summary>
        </member>
        <member name="F:EffectsController.laserBurnSprite">
            <summary>
                Laser burn mark puff effect for laser weapon impact visuals.
            </summary>
        </member>
        <member name="F:EffectsController.liftOffBlastFlameWall">
            <summary>
                Flame wall explosion prefab (FlameWallExplosion) used by various units (BroBase,
                BroshipTrooper, DoubleBroSeven, MookArmouredGuy) when performing lift-off moves,
                creating fiery blast effects during aerial maneuvers.
            </summary>
        </member>
        <member name="F:EffectsController.lostSoulSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when HellLostSoul units are
                covered in acid, creating an exposed skeleton appearance for demonic entities.
            </summary>
        </member>
        <member name="F:EffectsController.meleeStrikePrefab1">
            <summary>
                Standard melee strike impact effect prefab, creates visual feedback when melee
                attacks connect.
            </summary>
        </member>
        <member name="F:EffectsController.meleeStrikePrefabLarge">
            <summary>
                Large melee strike impact effect prefab for heavy melee attacks or powered strikes.
            </summary>
        </member>
        <member name="F:EffectsController.meleeStrikeYScale">
            <summary>
                Protected static Y-scale multiplier (default 1) used to alternate the vertical
                orientation of melee strike effects, flipping between 1 and -1 after each strike to
                create visual variety.
            </summary>
        </member>
        <member name="F:EffectsController.meltingBigMookCorpsePrefab">
            <summary>
                Melting animation prefab instantiated when dead big mook units dissolve from acid
                damage, creating a dissolving effect for large corpses.
            </summary>
        </member>
        <member name="F:EffectsController.meltingCorpsePrefab">
            <summary>
                Melting animation prefab instantiated when dead regular units dissolve from acid
                damage, creating a dissolving effect for corpses.
            </summary>
        </member>
        <member name="F:EffectsController.meltingGrenadierCorpsePrefab">
            <summary>
                Melting animation prefab instantiated when dead grenadier units dissolve from acid
                damage, creating a dissolving effect for grenadier corpses.
            </summary>
        </member>
        <member name="F:EffectsController.metalDoodadGibPrefab">
            <summary>
                Metal debris piece for metallic object destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashBigGlowPrefab">
            <summary>
                Large distortion glow effect prefab for heavy weapon muzzle flashes, creating a more
                intense heat distortion visual.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashBigPrefab">
            <summary>
                Large muzzle flash puff effect for heavy weapons.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashGlowPrefab">
            <summary>
                Standard distortion glow effect prefab that accompanies muzzle flashes from small
                firearms, creating a heat distortion visual.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashHugeGlowPrefab">
            <summary>
                Massive distortion glow effect prefab for tank cannons and extreme weapons, creating
                maximum heat distortion.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashMediumPrefab">
            <summary>
                Medium-sized muzzle flash puff effect for larger weapons.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashPrefab">
            <summary>
                Standard muzzle flash puff effect for small firearms.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashRoundPrefab">
            <summary>
                Round-shaped muzzle flash puff effect for specific weapon types.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashSmallGlowPrefab">
            <summary>
                Small distortion glow effect prefab for light weapons and pistols, creating subtle
                heat distortion.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashTankCannonPrefab">
            <summary>
                Tank cannon muzzle flash puff effect for vehicle weaponry.
            </summary>
        </member>
        <member name="F:EffectsController.muzzleFlashVomitPrefab">
            <summary>
                Vomit-style muzzle flash puff effect for acid or bile weapons.
            </summary>
        </member>
        <member name="F:EffectsController.particlesGlassShards">
            <summary>
                Particle emitter for glass shard effects when windows or glass objects break.
            </summary>
        </member>
        <member name="F:EffectsController.predabroPlasmaPop">
            <summary>
                Plasma pop effect prefab specifically for Predabro plasma weapon impacts, creates
                energy burst visual.
            </summary>
        </member>
        <member name="F:EffectsController.predictionTrail">
            <summary>
                Projectile trail prefab for trajectory prediction, used to show predicted paths for
                projectiles.
            </summary>
        </member>
        <member name="F:EffectsController.projectileFlickPuff">
            <summary>
                Standard projectile impact flicker effect prefab. Not currently used but available
                for bullet hits.
            </summary>
        </member>
        <member name="F:EffectsController.projectileLargeFlickPuff">
            <summary>
                Large projectile impact flicker effect prefab for heavy weapon impacts and
                explosions.
            </summary>
        </member>
        <member name="F:EffectsController.projectileWhiteFlickPuff">
            <summary>
                White projectile impact flicker effect prefab. Not currently used but available for
                energy weapon hits.
            </summary>
        </member>
        <member name="F:EffectsController.redWarningDiamondHugePrefab">
            <summary>
                Huge red diamond warning indicator prefab for extreme danger warnings, used by
                CreateRedWarningDiamondHuge method.
            </summary>
        </member>
        <member name="F:EffectsController.redWarningDiamondLargePrefab">
            <summary>
                Large red diamond warning indicator prefab for major threats, used by
                CreateRedWarningDiamondLarge method.
            </summary>
        </member>
        <member name="F:EffectsController.redWarningPulsePrefab">
            <summary>
                Red warning pulse effect prefab for danger indicators, used by
                CreateRedWarningEffect method.
            </summary>
        </member>
        <member name="F:EffectsController.shellSpeedTrailPrefab">
            <summary>
                Speed trail puff effect prefab (Puff) used to create motion blur trail effects
                behind fast-moving projectiles like shells and bullets, enhancing the visual sense
                of speed.
            </summary>
        </member>
        <member name="F:EffectsController.shockWaveExplodePoofPrefab">
            <summary>
                Shockwave explosion poof effect for radial blast visuals. Not currently used but
                available for shockwave effects.
            </summary>
        </member>
        <member name="F:EffectsController.shrapnelStonePrefab">
            <summary>
                Prefab for stone shrapnel particles created by explosions or impacts on stone
                surfaces.
            </summary>
        </member>
        <member name="F:EffectsController.slimeExplosion">
            <summary>
                Slime explosion effect prefab that creates green slime burst visuals for alien or
                acid explosions.
            </summary>
        </member>
        <member name="F:EffectsController.slimeExplosionSmall">
            <summary>
                Small slime explosion effect prefab for minor alien or acid burst visuals.
            </summary>
        </member>
        <member name="F:EffectsController.smokeSmall1Prefab">
            <summary>
                First small smoke puff effect variant, used for minor smoke effects from impacts or
                fires.
            </summary>
        </member>
        <member name="F:EffectsController.smokeSmall2Prefab">
            <summary>
                Second small smoke puff effect variant, provides visual variety for smoke effects.
            </summary>
        </member>
        <member name="F:EffectsController.smokeSmall3Prefab">
            <summary>
                Third small smoke puff effect variant, adds additional variety to smoke visuals.
            </summary>
        </member>
        <member name="F:EffectsController.sparkParticleFire">
            <summary>
                Particle emitter for fire sparks used in CreateFireSparks method for burning
                effects.
            </summary>
        </member>
        <member name="F:EffectsController.sparkParticleFloat">
            <summary>
                Particle emitter for floating spark effects that drift through the air.
            </summary>
        </member>
        <member name="F:EffectsController.sparkParticleShower">
            <summary>
                Particle emitter for sudden spark shower effects from impacts or explosions.
            </summary>
        </member>
        <member name="F:EffectsController.tinyPopPrefab">
            <summary>
                Tiny pop effect prefab used for minimal visual feedback on light impacts or small
                events.
            </summary>
        </member>
        <member name="F:EffectsController.unitMeltingPrefab">
            <summary>
                Melting animation prefab instantiated when regular units dissolve from acid damage
                after their acid melt timer expires, creating a dissolving visual effect.
            </summary>
        </member>
        <member name="F:EffectsController.unitSkeletonPrefab">
            <summary>
                Skeleton visual effect prefab (GibHolder) instantiated when regular units are
                covered in acid, creating an exposed skeleton appearance while the unit melts.
            </summary>
        </member>
        <member name="F:EffectsController.whiteFlashPopPrefab">
            <summary>
                White flash pop effect prefab for bright impact flashes, used by CreateWhiteFlashPop
                method.
            </summary>
        </member>
        <member name="F:EffectsController.whiteFlashPopSmallPrefab">
            <summary>
                Small white flash pop effect prefab for subtle bright flashes, used by
                CreateWhiteFlashPopSmall method.
            </summary>
        </member>
        <member name="F:EffectsController.woodDoodadGibPiece">
            <summary>
                Wood debris piece for wooden object destruction effects.
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:EffectsController.CreateAirDashPoofEffect(System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
                Creates an air dash trail effect with automatic orientation based on dash direction.
                Flips horizontally for left/right dashes and rotates 90 degrees for vertical dashes
                to match the movement direction.
            </summary>
            <param name="x">The x-coordinate where the dash effect appears</param>
            <param name="y">The y-coordinate where the dash effect appears</param>
            <param name="velocity">The dash velocity used to determine effect orientation</param>
        </member>
        <member name="M:EffectsController.CreateBoulderRollPoof_Local(System.Single,System.Single,System.Int32)">
            <summary>
                Creates a dust poof effect for rolling boulders or heavy objects. The effect
                orientation is based on the rolling direction, flipping horizontally when rolling
                left. Uses the BoulderRollPoof prefab cached property.
            </summary>
            <param name="x">The x-coordinate where the boulder poof appears</param>
            <param name="y">The y-coordinate where the boulder poof appears</param>
            <param name="direction">The rolling direction (-1 for left, 1 for right)</param>
        </member>
        <member name="M:EffectsController.CreateDashPoofEffect_Local(System.Single,System.Single,System.Int32)">
            <summary>
                Creates a local dash poof effect visible only on the current client. Used internally
                by the networked version or directly for local-only effects. The effect is
                horizontally flipped when dashing left (direction less than 0).
            </summary>
            <param name="x">The x-coordinate where the dash effect appears</param>
            <param name="y">The y-coordinate where the dash effect appears</param>
            <param name="direction">The facing direction (-1 for left, 1 for right) that determines effect orientation</param>
        </member>
        <member name="M:EffectsController.CreateDashPoofEffect_Networked(System.Single,System.Single,System.Int32)">
            <summary>
                Creates a dash poof effect synchronized across all network clients. This networked
                version ensures all players see the same dash visual effect when a character
                performs a dash move. Internally uses RPC to call CreateDashPoofEffect_Local on all
                clients.
            </summary>
            <param name="x">The x-coordinate where the dash effect appears</param>
            <param name="y">The y-coordinate where the dash effect appears</param>
            <param name="direction">The facing direction (-1 for left, 1 for right) that determines effect orientation</param>
        </member>
        <member name="M:EffectsController.CreateFallPoofEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
                Creates a dust trail effect when a character is falling or wall-sliding. Randomly
                selects between two fall poof variations and orients based on direction. Used for
                visual feedback during aerial movement and wall interactions.
            </summary>
            <param name="x">The x-coordinate of the effect</param>
            <param name="y">The y-coordinate of the effect</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The effect color type (default is None for regular dust)</param>
        </member>
        <member name="M:EffectsController.CreateFootPoofEffect(System.Single,System.Single,System.Single,UnityEngine.Vector3,BloodColor)">
            <summary>
                Creates dust or blood effects from footsteps during movement. Randomly selects from
                three foot poof variations for visual variety. Supports different colored effects
                for walking through blood or other liquids.
            </summary>
            <param name="x">The x-coordinate of the footstep</param>
            <param name="y">The y-coordinate of the footstep</param>
            <param name="delay">The delay before the effect appears</param>
            <param name="velocity">The movement velocity (currently unused but part of signature)</param>
            <param name="bloodColor">The color type for bloody footprints (default is None for dust)</param>
        </member>
        <member name="M:EffectsController.CreateGroundExplodePoofEffect(System.Single,System.Single,System.Int32)">
            <summary>
                Creates a ground explosion poof effect using the default ground explode prefab. This
                is a convenience overload that calls the prefab-specific version with the standard
                ground explosion effect.
            </summary>
            <param name="x">The x-coordinate of the ground explosion</param>
            <param name="y">The y-coordinate of the ground explosion</param>
            <param name="direction">The explosion direction (-1 for left, 1 for right)</param>
        </member>
        <member name="M:EffectsController.CreateGroundExplodePoofEffect(Puff,System.Single,System.Single,System.Int32)">
            <summary>
                Creates a ground explosion poof effect with a custom puff prefab. Allows specifying
                different puff types for varied ground explosion visuals. Returns the created Puff
                instance for additional customization.
            </summary>
            <param name="poofPrefab">The custom puff prefab to use for the explosion</param>
            <param name="x">The x-coordinate of the ground explosion</param>
            <param name="y">The y-coordinate of the ground explosion</param>
            <param name="direction">The explosion direction (-1 for left, 1 for right)</param>
            <returns>The created Puff instance for further configuration</returns>
        </member>
        <member name="M:EffectsController.CreateJumpPoofEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
                Creates a dust cloud effect when a character jumps. Randomly selects between two
                jump poof variations and flips the effect based on the character's facing direction.
                Supports colored effects for jumping from bloody or liquid surfaces.
            </summary>
            <param name="x">The x-coordinate of the jump origin</param>
            <param name="y">The y-coordinate of the jump origin</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The effect color type (default is None for regular dust)</param>
        </member>
        <member name="M:EffectsController.CreateLandPoofEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
                Creates a dust cloud impact effect when a character lands on solid ground. Randomly
                selects between two landing variations and orients based on direction. The effect
                scales with landing force for more dramatic impacts from higher falls.
            </summary>
            <param name="x">The x-coordinate of the landing point</param>
            <param name="y">The y-coordinate of the landing point</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The effect color type (default is None for regular dust)</param>
        </member>
        <member name="M:EffectsController.CreateLandSplashEffect(System.Single,System.Single,System.Int32,BloodColor)">
            <summary>
                Creates a liquid splash effect when a character lands in water or other liquids.
                Randomly selects between two splash variations and orients based on direction. The
                blood color parameter allows for different liquid types (water, blood, oil).
            </summary>
            <param name="x">The x-coordinate of the splash point</param>
            <param name="y">The y-coordinate of the splash point</param>
            <param name="direction">The facing direction (-1 for left, 1 for right)</param>
            <param name="color">The liquid type color (None for water, or specific blood colors)</param>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:EffectsController.airDashPoofPrefab">
            <summary>
                Air dash poof effect prefab that creates cloud effect when performing aerial dash
                moves.
            </summary>
        </member>
        <member name="F:EffectsController.dashPoof1Prefab">
            <summary>
                Dash movement poof effect that creates dust cloud during rapid dash movements.
            </summary>
        </member>
        <member name="F:EffectsController.fallPoof1Prefab">
            <summary>
                First falling poof effect, creates air disturbance visuals during falls.
            </summary>
        </member>
        <member name="F:EffectsController.fallPoof2Prefab">
            <summary>
                Second falling poof effect variant for variety in fall visuals.
            </summary>
        </member>
        <member name="F:EffectsController.footPoof1Prefab">
            <summary>
                First footstep poof effect variant, creates dust clouds when characters run or walk.
            </summary>
        </member>
        <member name="F:EffectsController.footPoof2Prefab">
            <summary>
                Second footstep poof effect variant, provides visual variety for movement dust.
            </summary>
        </member>
        <member name="F:EffectsController.footPoof3Prefab">
            <summary>
                Third footstep poof effect variant, adds additional variety to footstep effects.
            </summary>
        </member>
        <member name="F:EffectsController.jumpPoof1Prefab">
            <summary>
                First jump takeoff poof effect, creates dust cloud when characters jump.
            </summary>
        </member>
        <member name="F:EffectsController.jumpPoof2Prefab">
            <summary>
                Second jump takeoff poof effect variant for visual variety when jumping.
            </summary>
        </member>
        <member name="F:EffectsController.landPoof1Prefab">
            <summary>
                First landing poof effect, creates dust cloud when characters land from jumps.
            </summary>
        </member>
        <member name="F:EffectsController.landPoof2Prefab">
            <summary>
                Second landing poof effect variant for landing impact variety.
            </summary>
        </member>
        <member name="F:EffectsController.landSplash1Prefab">
            <summary>
                First water landing splash effect when landing in water or liquid surfaces.
            </summary>
        </member>
        <member name="F:EffectsController.landSplash2Prefab">
            <summary>
                Second water landing splash effect variant for liquid impact variety.
            </summary>
        </member>
        <member name="F:EffectsController.whitePunchPopPrefab">
            <summary>
                White punch pop effect prefab for powerful punch impacts, creates bright flash on
                contact.
            </summary>
        </member>
        <!-- Animation & Sprite Systems Methods -->
        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single)">
            <summary>
                Creates a basic FlickerFader effect at the specified 2D position. This is the
                simplest effect creation method for FlickerFader-based visual effects with default
                z-depth of 0.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Int32,System.Int32,BloodColor)">
            <summary>
                Creates a scaled Puff effect with optional blood coloring. Supports different blood
                types (red, green, oil, frozen, quicksand) and allows independent x/y scaling for
                stretched effects. Returns the created Puff instance for additional customization.
            </summary>
            <param name="puffPrefab">The Puff effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="xScale">The horizontal scale factor (1 for normal, -1 for flipped)</param>
            <param name="yScale">The vertical scale factor</param>
            <param name="bloodColor">The blood color type to apply (None for no coloring)</param>
            <returns>The created Puff instance for further configuration</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,UnityEngine.Vector3)">
            <summary>
                Creates a delayed Puff effect with initial velocity and scaling. The effect appears
                after the specified delay and moves according to the velocity vector. Useful for
                timed or physics-based particle effects.
            </summary>
            <param name="puffPrefab">The Puff effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay in seconds before the effect appears</param>
            <param name="xScale">The horizontal scale factor</param>
            <param name="yScale">The vertical scale factor</param>
            <param name="velocity">The initial velocity vector for the effect</param>
        </member>
        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,UnityEngine.Vector3)">
            <summary>
                Creates a delayed FlickerFader effect with initial velocity and scaling. Similar to
                the Puff version but for FlickerFader-type effects. The effect appears after the
                delay and moves with the specified velocity.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay in seconds before the effect appears</param>
            <param name="xScale">The horizontal scale factor</param>
            <param name="yScale">The vertical scale factor</param>
            <param name="velocity">The initial velocity vector for the effect</param>
        </member>
        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single)">
            <summary>
                Creates a FlickerFader effect at a specific 3D position. Provides full control over
                the z-depth for layering effects in the scene. Returns the created instance for
                additional configuration.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader effect prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <returns>The created FlickerFader instance for further customization</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates a FlickerFader effect at the specified position. This is a convenience
                overload that delegates to the full version with z-coordinate of 0 for standard 2D
                positioning.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The delay before the effect starts</param>
            <param name="velocity">The initial velocity vector for the effect</param>
            <returns>The created FlickerFader component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(FlickerFader,System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates a FlickerFader effect with full 3D positioning. Instantiates the prefab and
                configures its delay and velocity settings. FlickerFader effects are used for
                various fading animations throughout the game.
            </summary>
            <param name="flickerFaderPrefab">The FlickerFader prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the effect starts</param>
            <param name="velocity">The initial velocity vector for the effect</param>
            <returns>The created FlickerFader component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(DistortionGrow,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a DistortionGrow effect for visual distortion animations. Instantiates the
                distortion prefab and sets its delay. Used for heat haze, explosion distortions, and
                other warping visual effects.
            </summary>
            <param name="distortionPrefab">The DistortionGrow prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The delay before the distortion starts</param>
            <param name="z">The z-coordinate in world space (default 0)</param>
            <returns>The created DistortionGrow component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Single,Vector3,BloodColor)">
            <summary>
                Creates a Puff effect with blood color tinting and scale variations. Supports
                horizontal flipping for xScale parameter values and applies blood coloring.
                Configures delay and velocity for the puff animation.
            </summary>
            <param name="puffPrefab">The Puff prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the puff starts (converted to xScale if not 0)</param>
            <param name="velocity">The initial velocity (y component used as yScale if delay is not 0)</param>
            <param name="bloodColor">The blood color for tinting the effect</param>
            <returns>The created Puff component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(PuffTwoLayer,System.Single,System.Single,System.Single,Vector3,BloodColor)">
            <summary>
                Creates a two-layer Puff effect with blood color support. Instantiates the prefab
                and applies blood coloring to both layers. Used for more complex puff animations
                with foreground and background elements.
            </summary>
            <param name="puffPrefab">The PuffTwoLayer prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="delay">The delay before the effect starts (interpreted as xScale)</param>
            <param name="velocity">The initial velocity (y component used as yScale)</param>
            <param name="bloodColor">The blood color for tinting both layers</param>
            <returns>The created PuffTwoLayer component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(FaderSprite,System.Single,System.Single,System.Single)">
            <summary>
                Creates a FaderSprite effect at the specified position. Simple instantiation method
                for fading sprite effects without additional configuration. Used for basic fade-out
                animations.
            </summary>
            <param name="prefab">The FaderSprite prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <returns>The created FaderSprite component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(Puff,System.Single,System.Single,System.Single,System.Single,Vector3,Transform)">
            <summary>
                Creates a Puff effect with optional parent transform attachment. Configures scale
                based on delay parameter and can parent the effect to a moving object. Used for
                effects that need to follow characters or projectiles.
            </summary>
            <param name="puffPrefab">The Puff prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay (used as xScale when not 0)</param>
            <param name="velocity">The velocity (y component used as yScale when delay is not 0)</param>
            <param name="parentTransform">Optional transform to parent the effect to</param>
            <returns>The created Puff component</returns>
        </member>
        <member name="M:EffectsController.CreateEffect(PuffLaserBurn,System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates a laser burn Puff effect with specialized behavior. Instantiates the laser
                burn prefab and configures its timing and scale properties. Used for scorching and
                burning visual effects from laser weapons.
            </summary>
            <param name="puffPrefab">The PuffLaserBurn prefab to instantiate</param>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the burn effect starts</param>
            <param name="velocity">The initial velocity vector</param>
            <returns>The created PuffLaserBurn component</returns>
        </member>
        <member name="M:EffectsController.CreateFlexEffectAir(UnityEngine.Transform)">
            <summary>
                Creates an air flex effect that follows the specified transform. This visual effect
                indicates air/wind-based status from muscle temple power-ups.
            </summary>
            <param name="followTransform">The transform that the flex effect should follow and be parented to.</param>
            <returns>The created MuscleTempleFlexEffect instance attached to the transform.</returns>
        </member>
        <member name="M:EffectsController.CreateFlexEffectGolden(UnityEngine.Transform)">
            <summary>
                Creates a golden flex effect that follows the specified transform. This visual
                effect indicates golden/powered-up status from muscle temple power-ups.
            </summary>
            <param name="followTransform">The transform that the flex effect should follow and be parented to.</param>
            <returns>The created MuscleTempleFlexEffect instance attached to the transform.</returns>
        </member>
        <member name="M:EffectsController.CreateFlexEffectInvulnerable(UnityEngine.Transform)">
            <summary>
                Creates an invulnerability flex effect that follows the specified transform. This
                visual effect indicates invulnerability status from muscle temple power-ups.
            </summary>
            <param name="followTransform">The transform that the flex effect should follow and be parented to.</param>
            <returns>The created MuscleTempleFlexEffect instance attached to the transform.</returns>
        </member>
        <member name="M:EffectsController.CreateSmoke(System.Single,System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
                Creates a smoke particle effect with random variation. Randomly selects from three
                different smoke prefabs to add visual variety. The smoke can be delayed and given
                initial velocity for dynamic smoke trails.
            </summary>
            <param name="x">The x-coordinate where smoke originates</param>
            <param name="y">The y-coordinate where smoke originates</param>
            <param name="delay">The delay before smoke appears</param>
            <param name="velocity">The initial velocity for smoke movement</param>
        </member>
        <member name="M:EffectsController.CreateTeleportFlexExplosion(UnityEngine.Vector3)">
            <summary>
                Creates a teleportation explosion effect at the specified position. This animated
                effect plays when teleporting with muscle temple powers.
            </summary>
            <param name="pos">The position where the teleport explosion effect should appear.</param>
            <returns>The created AnimatedTexture effect instance.</returns>
        </member>
        <member name="M:EffectsController.CreateTeleportFlexOut(UnityEngine.Vector3)">
            <summary>
                Creates a teleportation exit effect at the specified position. This animated effect
                plays at the destination when teleporting with muscle temple powers.
            </summary>
            <param name="pos">The position where the teleport exit effect should appear.</param>
            <returns>The created AnimatedTexture effect instance.</returns>
        </member>
        <member name="M:EffectsController.SpawnMuscleTempleAvatar(UnityEngine.Vector3)">
            <summary>
                Spawns the muscle temple avatar effect at the specified position. This is an
                animated visual effect related to the muscle temple power-up system.
            </summary>
            <param name="position">The position where the avatar effect should appear.</param>
        </member>
        <member name="M:EffectsController.SpawnSparklePuff(UnityEngine.Vector3,System.Single)">
            <summary>
                Creates a sparkle puff effect that moves outward from the spawn position with random
                direction.
            </summary>
            <param name="position">The position where the sparkle puff originates.</param>
            <param name="speed">The speed at which the sparkle particles move outward in random directions.</param>
        </member>
        <!-- Animation & Sprite Systems Fields -->
        <member name="F:EffectsController.boomerangWindPrefab">
            <summary>
                Wind trail puff effect for boomerang weapon movement visuals.
            </summary>
        </member>
        <member name="F:EffectsController.electricity1Prefab">
            <summary>
                First electricity spark puff effect variant for electrical damage visuals.
            </summary>
        </member>
        <member name="F:EffectsController.electricity2Prefab">
            <summary>
                Second electricity spark puff effect variant for visual diversity in electrical
                effects.
            </summary>
        </member>
        <member name="F:EffectsController.electricity3Prefab">
            <summary>
                Third electricity spark puff effect used in CreateElectricityEffect method.
            </summary>
        </member>
        <member name="F:EffectsController.fireSpark1Prefab">
            <summary>
                First fire spark shrapnel prefab that creates sparks ejected from fires and
                explosions.
            </summary>
        </member>
        <member name="F:EffectsController.fireSpark2Prefab">
            <summary>
                Second fire spark shrapnel prefab variant for varied spark effects from fires.
            </summary>
        </member>
        <member name="F:EffectsController.flame1Prefab">
            <summary>
                First flame effect prefab variant used for fire and burning visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.flame2Prefab">
            <summary>
                Second flame effect prefab variant used for fire and burning visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.flame3Prefab">
            <summary>
                Third flame effect prefab variant used for fire and burning visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.flameCandle1Prefab">
            <summary>
                First candle flame puff effect prefab for small persistent fire effects.
            </summary>
        </member>
        <member name="F:EffectsController.flameCandle2Prefab">
            <summary>
                Second candle flame puff effect variant for visual variety in small fires.
            </summary>
        </member>
        <member name="F:EffectsController.flameCandle3Prefab">
            <summary>
                Third candle flame puff effect variant for diverse small fire visuals.
            </summary>
        </member>
        <member name="F:EffectsController.flameCandle4Prefab">
            <summary>
                Fourth candle flame puff effect variant for maximum variety in small fire effects.
            </summary>
        </member>
        <member name="F:EffectsController.leaf1Prefab">
            <summary>
                First leaf shrapnel prefab used in CreateLeafBurst for foliage destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.leaf2Prefab">
            <summary>
                Second leaf shrapnel prefab variant for varied foliage destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.puffDisappearPrefab">
            <summary>
                Standard disappearing puff effect for object removal or teleportation.
            </summary>
        </member>
        <member name="F:EffectsController.puffDisappearRingPrefab">
            <summary>
                Ring-shaped disappearing puff effect for enhanced teleportation visuals.
            </summary>
        </member>
        <member name="F:EffectsController.puffNinjaSmokePrefab">
            <summary>
                Ninja smoke puff effect for stealth abilities and smoke bomb visuals.
            </summary>
        </member>
        <member name="F:EffectsController.puffPeckShinePrefab">
            <summary>
                Peck shine puff effect for impact or special ability visual feedback.
            </summary>
        </member>
        <member name="F:EffectsController.sparkleDisappearPrefab">
            <summary>
                Sparkle effect for magical or special disappearing animations.
            </summary>
        </member>
        <!-- Character State & Effects Methods -->
        <member name="M:EffectsController.CreateAmmoBubble(System.Single,System.Single)">
            <summary>
                Displays an ammunition indicator bubble at the specified position. Reuses the
                singleton bubble instance by restarting and repositioning it. Shown when players
                collect special ammunition.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateBloodTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates blood trail particle effects at z-depth 0. This convenience overload calls
                the full 3D version with default z positioning for standard blood trail effects.
            </summary>
            <param name="x">The x-coordinate where the blood trail originates</param>
            <param name="y">The y-coordinate where the blood trail originates</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses 2 variants, 2+ uses 3 variants)</param>
        </member>
        <member name="M:EffectsController.CreateBloodTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates blood trail particle effects with full control. Uses identical logic to
                slime trails but with blood-specific particle emitters. Small particles use 2
                variations, large particles use 3 variations with size halving for proper scaling.
            </summary>
            <param name="x">The x-coordinate where the blood trail originates</param>
            <param name="y">The y-coordinate where the blood trail originates</param>
            <param name="z">The z-coordinate (depth) of the particle</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses small variants, 2+ uses large variants)</param>
        </member>
        <member name="M:EffectsController.CreateEvilFloatParticle(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single dark floating particle for evil or supernatural effects. Randomly
                selects from four dark color variations ranging from pure black to dark gray (0.231,
                0.231, 0.231). Uses special evil float particles for ominous atmospheric effects.
            </summary>
            <param name="x">The x-coordinate where the particle appears</param>
            <param name="y">The y-coordinate where the particle appears</param>
            <param name="force">The force applied to the floating particle</param>
            <param name="xI">The initial x-velocity of the particle</param>
            <param name="yI">The initial y-velocity of the particle</param>
        </member>
        <member name="M:EffectsController.CreateFleshParticles(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a complex mix of flesh particle effects for gore and gibbing. Combines
                multiple particle types: flesh dust dots at 1.4x force, medium flesh chunks at
                reduced force and offset, and three types of small flesh particles with the third
                type using 1.1x force. The most detailed gore effect available.
            </summary>
            <param name="x">The x-coordinate of the flesh origin</param>
            <param name="y">The y-coordinate of the flesh origin</param>
            <param name="count">The total number of particles to distribute among types</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The base force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateFreeLifeBubble(System.Single,System.Single)">
            <summary>
                Displays a free life indicator bubble at the specified position. Reuses the
                singleton bubble instance by restarting and repositioning it. Shown when players
                collect extra life pickups.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateHeroIndicator(Unit)">
            <summary>
                Creates a colored visual indicator above a unit to identify the player. The
                indicator is colored based on the unit's player number and follows the unit's
                position.
            </summary>
            <param name="unit">The unit to attach the hero indicator to. The indicator will be parented to this unit's transform.</param>
        </member>
        <member name="M:EffectsController.CreateKickPlayerBubble(System.Single,System.Single)">
            <summary>
                Creates a new kick player reaction bubble at the specified position. Unlike other
                bubbles, this creates a new instance each time rather than reusing a singleton.
                Returns the bubble for further configuration.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <returns>The created ReactionBubble instance for additional customization</returns>
        </member>
        <member name="M:EffectsController.CreatePromotedBubble(System.Single,System.Single)">
            <summary>
                Displays a promotion indicator bubble at the specified position. Reuses the
                singleton bubble instance by restarting and repositioning it. Shown when players
                achieve promotion milestones.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateSlimeDrip">
            <summary>
                Creates a slime drip particle spawner effect. Instantiates a new spawner from the
                prefab that can be configured to emit slime droplet particles. Returns null if the
                effects controller instance is not available.
            </summary>
            <returns>A ParticleSpawner configured for slime drips, or null if creation fails</returns>
        </member>
        <member name="M:EffectsController.CreateSlimeParticles(BloodColor,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates clustered slime particles with drift behavior. Complex positioning algorithm
                with 60% chance to create new cluster and 40% to continue from previous position.
                Particles drift inward based on force parameter. Creates half the requested count
                plus one, with 0.1x multiplier on offset radii for tighter clustering.
            </summary>
            <param name="color">The blood color type for the slime</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The base count (actual is count/2 + 1)</param>
            <param name="offsetXRadius">The horizontal spread (multiplied by 0.1)</param>
            <param name="offsetYRadius">The vertical spread (multiplied by 0.1)</param>
            <param name="force">The inward drift force</param>
            <param name="xI">The initial x-velocity</param>
            <param name="yI">The initial y-velocity</param>
        </member>
        <member name="M:EffectsController.CreateSlimeParticlesSpray(BloodColor,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a directional spray of slime particles based on blood color type. Particles
                emit in a circular pattern with force variance controlling the spread angle.
                Converts BloodColor enum to appropriate color before creating the spray effect.
            </summary>
            <param name="color">The blood color type for the slime</param>
            <param name="x">The x-coordinate of the spray origin</param>
            <param name="y">The y-coordinate of the spray origin</param>
            <param name="z">The z-coordinate of the spray origin</param>
            <param name="count">The number of slime particles to spray</param>
            <param name="offsetXRadius">The horizontal offset for spray origin</param>
            <param name="offsetYRadius">The vertical offset for spray origin</param>
            <param name="force">The base force for particle velocity</param>
            <param name="xI">The initial x-velocity direction</param>
            <param name="yI">The initial y-velocity direction</param>
            <param name="forceVariance">The spread control (1.0 = full variance)</param>
        </member>
        <member name="M:EffectsController.CreateSlimeParticlesSpray(UnityEngine.Color,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a directional spray of slime particles with explicit color. Emits particles
                in a circular pattern using Math.Point3OnCircle for even distribution. Force
                variance parameter controls how much the particles spread from the main direction.
            </summary>
            <param name="color">The explicit color for the slime particles</param>
            <param name="x">The x-coordinate of the spray origin</param>
            <param name="y">The y-coordinate of the spray origin</param>
            <param name="z">The z-coordinate of the spray origin</param>
            <param name="count">The number of slime particles to spray</param>
            <param name="offsetXRadius">The horizontal offset for spray origin</param>
            <param name="offsetYRadius">The vertical offset for spray origin</param>
            <param name="force">The base force for particle velocity</param>
            <param name="xI">The initial x-velocity direction</param>
            <param name="yI">The initial y-velocity direction</param>
            <param name="forceVariance">The spread control (1.0 = full variance)</param>
        </member>
        <member name="M:EffectsController.CreateSlimeTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates slime trail particle effects at z-depth 0. This convenience overload calls
                the full 3D version with default z positioning for standard slime trail effects.
            </summary>
            <param name="x">The x-coordinate where the slime trail originates</param>
            <param name="y">The y-coordinate where the slime trail originates</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses 2 variants, 2+ uses 3 variants)</param>
        </member>
        <member name="M:EffectsController.CreateSlimeTrailParticle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates slime trail particle effects with full control. Automatically selects
                between small and large variants based on size multiplier (threshold at 2). Small
                particles randomly pick from 2 variations, large particles from 3 variations. Large
                particles have their size halved for proper scaling.
            </summary>
            <param name="x">The x-coordinate where the slime trail originates</param>
            <param name="y">The y-coordinate where the slime trail originates</param>
            <param name="z">The z-coordinate (depth) of the particle</param>
            <param name="force">The initial force applied to the particle</param>
            <param name="xI">The initial x-velocity component</param>
            <param name="yI">The initial y-velocity component</param>
            <param name="lifeM">Life duration multiplier for the particle</param>
            <param name="sizeM">Size multiplier (less than 2 uses small variants, 2+ uses large variants)</param>
        </member>
        <member name="M:EffectsController.CreateWaterDrip">
            <summary>
                Creates a water drip particle spawner effect. Instantiates a new spawner from the
                prefab that can be configured to emit water droplet particles. Returns null if the
                effects controller instance is not available.
            </summary>
            <returns>A ParticleSpawner configured for water drips, or null if creation fails</returns>
        </member>
        <member name="M:EffectsController.GetBloodColor(BloodColor)">
            <summary>
                Converts a BloodColor enum value to its corresponding Unity Color. Returns preset
                color values for different blood types: red (default), green (alien), oil
                (mechanical), or frozen (ice blue).
            </summary>
            <param name="color">The blood color type to convert</param>
            <returns>The Unity Color corresponding to the specified blood type</returns>
        </member>
        <!-- Character State & Effects Fields -->
        <member name="F:EffectsController.AlienEggPop">
            <summary>
                Alien egg hatching animation effect used when alien eggs burst open to release
                facehuggers.
            </summary>
        </member>
        <member name="F:EffectsController.BlackBloodParticlesBig">
            <summary>
                Large black blood particle emitter for major oil or mechanical fluid splatter.
            </summary>
        </member>
        <member name="F:EffectsController.BlackBloodParticlesDots">
            <summary>
                Dot-sized black blood particle emitter used when BloodColor is Oil.
            </summary>
        </member>
        <member name="F:EffectsController.BlackBloodParticlesSmall">
            <summary>
                Small black blood particle emitter for minor oil or mechanical leaks.
            </summary>
        </member>
        <member name="F:EffectsController.FrozenBloodColor">
            <summary>
                The color used for frozen or ice blood effects. Default is light blue (0.19, 0.7,
                1.0).
            </summary>
        </member>
        <member name="F:EffectsController.GreenBloodColor">
            <summary>
                The color used for alien or acid blood effects. Default is pure green.
            </summary>
        </member>
        <member name="F:EffectsController.GreenBloodParticlesBig">
            <summary>
                Large green blood particle emitter for major alien blood splatter effects.
            </summary>
        </member>
        <member name="F:EffectsController.GreenBloodParticlesDots">
            <summary>
                Dot-sized green blood particle emitter used when BloodColor is Green.
            </summary>
        </member>
        <member name="F:EffectsController.GreenBloodParticlesSmall">
            <summary>
                Small green blood particle emitter for minor alien blood effects.
            </summary>
        </member>
        <member name="F:EffectsController.OilBloodColor">
            <summary>
                The color used for oil or mechanical blood effects. Default is dark gray (0.1, 0.1,
                0.1).
            </summary>
        </member>
        <member name="F:EffectsController.PoopBloodParticlesDots">
            <summary>
                Dot-sized sewerage particle emitter used when BloodColor is Sewerage.
            </summary>
        </member>
        <member name="F:EffectsController.PoopParticlesBig">
            <summary>
                Large sewerage particle emitter for major waste splatter effects.
            </summary>
        </member>
        <member name="F:EffectsController.PoopParticlesSmall">
            <summary>
                Small sewerage particle emitter for minor waste effects.
            </summary>
        </member>
        <member name="F:EffectsController.QuicksandBloodColor">
            <summary>
                The color used for sand or dust blood effects. Default is a brown/tan color (0.7,
                0.5, 0.3).
            </summary>
        </member>
        <member name="F:EffectsController.RedBloodColor">
            <summary>
                The color used for standard red blood effects. Default is pure red.
            </summary>
        </member>
        <member name="F:EffectsController.RedBloodParticlesBig">
            <summary>
                Large red blood particle emitter for major blood splatter effects from standard
                enemies.
            </summary>
        </member>
        <member name="F:EffectsController.RedBloodParticlesDots">
            <summary>
                Dot-sized red blood particle emitter used when BloodColor is Red or unspecified.
            </summary>
        </member>
        <member name="F:EffectsController.RedBloodParticlesSmall">
            <summary>
                Small red blood particle emitter for minor blood effects and wounds.
            </summary>
        </member>
        <member name="F:EffectsController.ammoBubble">
            <summary>
                Ammunition reaction bubble effect shown when players collect ammo. Not currently
                used in codebase.
            </summary>
        </member>
        <member name="F:EffectsController.bloodParticlesDripsBlack">
            <summary>
                Black blood drip particle emitter for oil leaking effects from mechanical units.
            </summary>
        </member>
        <member name="F:EffectsController.bloodParticlesDripsGreen">
            <summary>
                Green blood drip particle emitter for alien bleeding effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodParticlesDripsRed">
            <summary>
                Red blood drip particle emitter for continuous bleeding effects from wounds.
            </summary>
        </member>
        <member name="F:EffectsController.broCoveredInAcidMaterial">
            <summary>
                Material applied to bros when they are covered in acid damage effects. Not currently
                used in codebase.
            </summary>
        </member>
        <member name="F:EffectsController.bubbleParticles">
            <summary>
                Particle emitter for underwater bubble effects, emits rising bubbles with varying
                sizes.
            </summary>
        </member>
        <member name="F:EffectsController.freeLifeBubble">
            <summary>
                Free life reaction bubble effect shown when players gain extra lives. Not currently
                used in codebase.
            </summary>
        </member>
        <member name="F:EffectsController.heroIndicator">
            <summary>
                Hero indicator sprite prefab (SpriteSM) used by CreateHeroIndicator() to display
                player-colored visual indicators above hero units for identification.
            </summary>
        </member>
        <member name="F:EffectsController.kickBubble">
            <summary>
                Kick reaction bubble template used to create kick indicator bubbles above players.
            </summary>
        </member>
        <member name="F:EffectsController.kickConfirmMaterial">
            <summary>
                Material for kick indicator bubbles during confirmation phase. Not currently used in
                codebase.
            </summary>
        </member>
        <member name="F:EffectsController.kickConfirmedMaterial">
            <summary>
                Material for kick indicator bubbles when kick is confirmed, used by TestVanDammeAnim
                for visual feedback.
            </summary>
        </member>
        <member name="F:EffectsController.kickdDefaultMaterial">
            <summary>
                Default material for kick indicator bubbles in normal state. Not currently used in
                codebase.
            </summary>
        </member>
        <member name="F:EffectsController.mookCoveredInAcidMaterial">
            <summary>
                Material applied to mooks when they are covered in acid damage effects. Not
                currently used in codebase.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleAvatarEffect">
            <summary>
                Animated texture prefab used by CreateMuscleTempleAvatar() to create visual effects
                related to muscle temple power-ups and avatar transformations.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleFlexEffectAir">
            <summary>
                Air flex visual effect prefab (MuscleTempleFlexEffect) that follows units with
                air/floating muscle temple power-ups, indicating enhanced aerial abilities.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleFlexEffectGolden">
            <summary>
                Golden flex visual effect prefab (MuscleTempleFlexEffect) that follows units with
                golden muscle temple power-ups, creating a golden aura around powered-up characters.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleFlexEffectInvulnerable">
            <summary>
                Invulnerability flex visual effect prefab (MuscleTempleFlexEffect) that follows
                units with invulnerability muscle temple power-ups, indicating temporary damage
                immunity.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleFlexTeleportExplosion">
            <summary>
                Animated texture prefab for the explosion effect that plays when a unit arrives at
                their destination after muscle temple teleportation.
            </summary>
        </member>
        <member name="F:EffectsController.muscleTempleFlexTeleportOut">
            <summary>
                Animated texture prefab for the departure effect that plays when a unit begins
                muscle temple teleportation, indicating the start of the teleport sequence.
            </summary>
        </member>
        <member name="F:EffectsController.promotedBubble">
            <summary>
                Promotion reaction bubble effect shown when players are promoted or level up.
            </summary>
        </member>
        <member name="F:EffectsController.semenParticlesDots">
            <summary>
                Dot-sized particle emitter for specialized white fluid effects.
            </summary>
        </member>
        <member name="F:EffectsController.semenParticlesSmall">
            <summary>
                Small particle emitter for specialized white fluid spray effects.
            </summary>
        </member>
        <member name="F:EffectsController.sparklePuff">
            <summary>
                Sparkle particle effect prefab (Puff) used by CreateSparklePuff() to generate
                sparkle effects with customizable lifetime for various magical or special visual
                feedback.
            </summary>
        </member>
        <member name="F:EffectsController.waterParticlesDrip">
            <summary>
                Water drip particle emitter for water leaking and dripping effects.
            </summary>
        </member>
        <!-- Environmental Interaction Methods -->
        <member name="M:EffectsController.CreateSlimeCover(System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Creates a slime cover on nearby terrain surfaces within a specified radius. Casts
                rays from the center point to grid positions and adds slime to surfaces hit.
            </summary>
            <param name="damage">The damage value or intensity of the slime cover to apply.</param>
            <param name="x">The X coordinate of the center position for slime coverage.</param>
            <param name="y">The Y coordinate of the center position for slime coverage.</param>
            <param name="radius">The radius from the center point to check for surfaces to cover with slime.</param>
            <param name="onlyDownward">If true, only applies slime to surfaces below the center Y position. Default is false.</param>
        </member>
        <member name="M:EffectsController.DeregisterTickingBillboard(OilAccidentTicker)">
            <summary>
                Removes an oil accident ticker billboard from the tracking system. Typically called
                when the billboard is destroyed or no longer needs updates.
            </summary>
            <param name="ticker">The oil accident ticker billboard to deregister</param>
        </member>
        <member name="M:EffectsController.RegisterTickingBillboard(OilAccidentTicker)">
            <summary>
                Registers an oil accident ticker billboard to the tracking system. Sets the ticker's
                initial counter value to match the current accident timer. Used for "days since last
                accident" warning signs that reset when explosions occur nearby.
            </summary>
            <param name="ticker">The oil accident ticker billboard to register</param>
        </member>
        <member name="M:EffectsController.ResetAccidentTicker">
            <summary>
                Resets the global accident timer to zero and updates all registered oil accident
                ticker displays. Called when an explosion or accident occurs to reset all "days
                since last accident" counters in the level.
            </summary>
        </member>
        <member name="M:EffectsController.StartRainAndLightning">
            <summary>
                Activates weather effects including rain particles and lightning. Enables the
                LightningController component, activates rain visual effects that follow the camera,
                and adjusts fog positioning based on level theme (City/America or Hell) and game
                mode. In deathmatch modes, raises fog to y=70 for better visibility.
            </summary>
        </member>
        <!-- Environmental Interaction Properties -->
        <member name="P:EffectsController.BoulderRollPoof">
            <summary>
                Gets the puff effect used when boulders roll. Lazy-loads the Puff component from the
                prefab reference on first access and caches it for subsequent use. Used for
                dust/debris effects from rolling objects.
            </summary>
        </member>
        <!-- Environmental Interaction Fields -->
        <member name="F:EffectsController._oilAccidentTickers">
            <summary>
                Private list tracking all registered OilAccidentTicker objects in the scene, used to
                update oil accident counter displays when accidents occur.
            </summary>
        </member>
        <member name="F:EffectsController._timeSinceAccident">
            <summary>
                Private timer tracking elapsed time since the last oil-related accident, incremented
                in Update() and reset to zero when ResetAccidentTicker() is called.
            </summary>
        </member>
        <member name="F:EffectsController.ashHolder">
            <summary>
                Transform container for ash particle effects that follows the camera in burning
                environments.
            </summary>
        </member>
        <member name="F:EffectsController.backgroundWoodShrapnel1">
            <summary>
                First wood shrapnel variant for background wooden object destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.backgroundWoodShrapnel2">
            <summary>
                Second wood shrapnel variant for background wooden object destruction variety.
            </summary>
        </member>
        <member name="F:EffectsController.backgroundWoodShrapnel3">
            <summary>
                Third wood shrapnel variant for background wooden object destruction diversity.
            </summary>
        </member>
        <member name="F:EffectsController.backgroundWoodShrapnel4">
            <summary>
                Fourth wood shrapnel variant for background wooden object destruction effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTrailPuffBigParticle1">
            <summary>
                First large blood trail particle emitter for heavy bleeding effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTrailPuffBigParticle2">
            <summary>
                Second large blood trail particle variant for major blood splatter trails.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTrailPuffBigParticle3">
            <summary>
                Third large blood trail particle variant for extreme bleeding visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTrailPuffParticle1">
            <summary>
                First blood trail particle emitter used randomly for blood trail variety.
            </summary>
        </member>
        <member name="F:EffectsController.bloodTrailPuffParticle2">
            <summary>
                Second blood trail particle emitter alternated with first for visual diversity.
            </summary>
        </member>
        <member name="F:EffectsController.dustParticles">
            <summary>
                Particle emitter for dust cloud effects from impacts, falls, and environmental
                disturbances.
            </summary>
        </member>
        <member name="F:EffectsController.evilFloatParticles">
            <summary>
                Particle emitter for evil floating ambient particles in dark environments.
            </summary>
        </member>
        <member name="F:EffectsController.fireAndAsh">
            <summary>
                Flag indicating whether fire and ash environmental effects are active, used in
                BurningJungle theme.
            </summary>
        </member>
        <member name="F:EffectsController.fireWorks">
            <summary>
                Array of victory firework effect prefabs launched when levels are completed in
                campaign mode.
            </summary>
        </member>
        <member name="F:EffectsController.fireWorksCount">
            <summary>
                Counter tracking number of fireworks launched, used to vary launch positions and
                prefab selection.
            </summary>
        </member>
        <member name="F:EffectsController.fireWorksCounter">
            <summary>
                Timer that controls the interval between launching victory fireworks.
            </summary>
        </member>
        <member name="F:EffectsController.fireworksOn">
            <summary>
                Static flag controlling whether victory fireworks should be displayed on level
                completion.
            </summary>
        </member>
        <member name="F:EffectsController.flashEffect">
            <summary>
                Full screen flash effect component for bright flashes from explosions and other
                intense effects.
            </summary>
        </member>
        <member name="F:EffectsController.fogObject">
            <summary>
                Transform for standard fog visual effect used in City and America themes.
            </summary>
        </member>
        <member name="F:EffectsController.forceFireworksOn">
            <summary>
                Instance flag to force fireworks display regardless of game state, useful for
                testing or special events.
            </summary>
        </member>
        <member name="F:EffectsController.gustFrequency">
            <summary>
                Frequency value that determines how often wind gusts occur, used by the wind system
                to create periodic wind variations on affected objects.
            </summary>
        </member>
        <member name="F:EffectsController.gustM">
            <summary>
                Gust magnitude multiplier that controls the intensity of individual wind gusts when
                they occur, amplifying the wind effect during gust periods.
            </summary>
        </member>
        <member name="F:EffectsController.hellFogObject">
            <summary>
                Transform for hell-themed red fog effect used in Hell levels.
            </summary>
        </member>
        <member name="F:EffectsController.lightObject">
            <summary>
                GameObject reference for global lighting control in the scene.
            </summary>
        </member>
        <member name="F:EffectsController.lightningController">
            <summary>
                Component that manages lightning strike effects during rain weather conditions.
            </summary>
        </member>
        <member name="F:EffectsController.offsetM">
            <summary>
                Position offset multiplier (default 1.0) used in wind calculations to determine
                spatial variations in wind effects across different positions.
            </summary>
        </member>
        <member name="F:EffectsController.oilParticleParent">
            <summary>
                Parent transform used by oil-related objects (OilTankBlock, DoodadOilParticle,
                DoodadOilSpawner) to organize and manage oil particle effects in the scene
                hierarchy.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffBigParticle1">
            <summary>
                First large smoke plume particle emitter for bigger explosion dust effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffBigParticle2">
            <summary>
                Second large smoke plume particle variant for massive dust clouds.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticle1">
            <summary>
                First smoke plume particle emitter for dust and smoke puff effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticle2">
            <summary>
                Second smoke plume particle variant for visual variety in dust clouds.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticleBlack1">
            <summary>
                First black smoke plume particle emitter for dark smoke effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticleBlack2">
            <summary>
                Second black smoke plume particle variant for visual diversity.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticleHell">
            <summary>
                Hell-themed smoke plume particle emitter for infernal visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticlePink">
            <summary>
                Pink smoke plume particle emitter for special visual effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticlePitchBlack">
            <summary>
                Pitch black smoke plume particle emitter for the darkest smoke effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumePuffParticlePurple">
            <summary>
                Purple smoke plume particle emitter for magical or alien effects.
            </summary>
        </member>
        <member name="F:EffectsController.plumeShrapnelPrefab">
            <summary>
                Shrapnel prefab for smoke plume particle effects from explosions.
            </summary>
        </member>
        <member name="F:EffectsController.rainAndLightning">
            <summary>
                Flag indicating whether rain and lightning weather effects are currently active.
            </summary>
        </member>
        <member name="F:EffectsController.rainFollowTransform">
            <summary>
                Cached transform reference for camera following used by rain and ash effects.
            </summary>
        </member>
        <member name="F:EffectsController.rainHolder">
            <summary>
                Transform container for rain particle effects that follows the camera position.
            </summary>
        </member>
        <member name="F:EffectsController.slimeCoverPrefab">
            <summary>
                Slime ground cover prefab for upward-facing surfaces, used in CreateSlimeCover
                method.
            </summary>
        </member>
        <member name="F:EffectsController.slimeCoverSidesPrefab">
            <summary>
                Slime ground cover prefab for side surfaces (walls), used in CreateSlimeCover
                method.
            </summary>
        </member>
        <member name="F:EffectsController.slimeDripSpawner">
            <summary>
                Particle spawner prefab (ParticleSpawner) used by CreateSlimeDrip() to generate
                slime dripping particle effects from surfaces, creating environmental slime
                interactions.
            </summary>
        </member>
        <member name="F:EffectsController.slimeParticles">
            <summary>
                Particle emitter for slime-related environmental effects and acid splashes.
            </summary>
        </member>
        <member name="F:EffectsController.slimeTrailPuffBigParticle1">
            <summary>
                First large slime trail particle emitter for heavy slime disturbance effects.
            </summary>
        </member>
        <member name="F:EffectsController.slimeTrailPuffBigParticle2">
            <summary>
                Second large slime trail particle variant for major slime impacts.
            </summary>
        </member>
        <member name="F:EffectsController.slimeTrailPuffBigParticle3">
            <summary>
                Third large slime trail particle variant for maximum visual variety in slime
                effects.
            </summary>
        </member>
        <member name="F:EffectsController.slimeTrailPuffParticle1">
            <summary>
                First slime trail particle emitter for movement through slime effects.
            </summary>
        </member>
        <member name="F:EffectsController.slimeTrailPuffParticle2">
            <summary>
                Second slime trail particle variant for diverse slime movement visuals.
            </summary>
        </member>
        <member name="F:EffectsController.summonMagicParticle">
            <summary>
                Particle emitter for magical summoning effects used by warlock portals.
            </summary>
        </member>
        <member name="F:EffectsController.sunObject">
            <summary>
                Transform for sun lighting effect object used in City theme environments.
            </summary>
        </member>
        <member name="F:EffectsController.thickFogObject">
            <summary>
                Transform for thick fog visual effect for enhanced atmospheric density.
            </summary>
        </member>
        <member name="F:EffectsController.waterDripSpawner">
            <summary>
                Particle spawner prefab (ParticleSpawner) used by CreateWaterDrip() to generate
                water dripping particle effects from surfaces, creating environmental water
                interactions.
            </summary>
        </member>
        <member name="F:EffectsController.windGustPattern">
            <summary>
                Animation curve that defines the wind gust intensity pattern over time, used by the
                wind system to create realistic non-linear wind variations.
            </summary>
        </member>
        <member name="F:EffectsController.windStrength">
            <summary>
                Overall wind intensity multiplier that controls the strength of wind effects applied
                to physics-enabled objects like JigglyBit components.
            </summary>
        </member>
        <!-- Status Effects Methods -->
        <member name="M:EffectsController.CreateBlindedEffect(System.Single,System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
                Creates rotating star effects for stunned or blinded units. Uses a cycling counter
                to alternate between three different star prefab variations for visual variety. Each
                call increments the global stunned stars counter to ensure variation across multiple
                uses.
            </summary>
            <param name="x">The x-coordinate for the stars</param>
            <param name="y">The y-coordinate for the stars</param>
            <param name="delay">The delay before stars appear</param>
            <param name="velocity">The velocity parameter (currently unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateCreateTinyPop(System.Single,System.Single)">
            <summary>
                Creates a tiny popping effect for minor impacts or UI feedback. Produces a small
                burst animation at the specified position. Note: Method name contains redundant
                "Create".
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
        </member>
        <member name="M:EffectsController.CreateDistortionHeatWaveEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a heat wave distortion effect and returns the DistortionGrow component for
                custom configuration. Allows fine-tuning of the distortion parameters after creation
                for specific heat shimmer effects.
            </summary>
            <param name="x">The x-coordinate of the heat source</param>
            <param name="y">The y-coordinate of the heat source</param>
            <param name="z">The z-coordinate (depth) of the effect</param>
            <returns>The DistortionGrow component for additional configuration</returns>
        </member>
        <member name="M:EffectsController.CreateDistortionWobbleLargeRingEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a large heat distortion ring effect. Used for major explosions and intense
                heat sources to create dramatic expanding air ripples visible across a wide area.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>
        <member name="M:EffectsController.CreateDistortionWobbleLargeRingFullScreenEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a massive screen-filling distortion effect with extreme parameters. Sets
                alpha to 9 for maximum intensity, growth rate to 1355 for rapid expansion, and
                growth lerp decrease to 0.1. Used for nuclear explosions or other catastrophic
                events that affect the entire screen.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>
        <member name="M:EffectsController.CreateDistortionWobblePinchEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a pinch-style distortion effect that pulls inward rather than expanding.
                Used for implosion effects, black holes, or vacuum-based attacks where the visual
                effect should appear to suck inward.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>
        <member name="M:EffectsController.CreateDistortionWobbleRingEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a medium-sized heat distortion ring effect. Used for standard explosions and
                moderate heat effects to create visible air ripples that expand from the impact
                point.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>
        <member name="M:EffectsController.CreateDistortionWobbleSmallRingEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a small heat distortion ring effect. Used for minor explosions and
                heat-based attacks to create a rippling air distortion that expands outward from the
                origin point.
            </summary>
            <param name="x">The x-coordinate of the distortion center</param>
            <param name="y">The y-coordinate of the distortion center</param>
            <param name="delay">The delay before the distortion appears</param>
        </member>
        <member name="M:EffectsController.CreateElectricShock(System.Single,System.Single,System.Single,System.Single,Vector3)">
            <summary>
                Creates electrical shock visual effects with random variations. Randomly selects
                from three electricity prefabs with equal probability. Used for electrical damage,
                stun effects, and power-related visuals.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="delay">The delay before the shock effect starts</param>
            <param name="velocity">The initial velocity vector for the effect</param>
            <returns>The created Puff component for the electrical effect</returns>
        </member>
        <member name="M:EffectsController.CreateExplosionRangePop(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an explosion range indicator that expands to show blast radius. Instantiates
                the range pop prefab and sets its size based on the explosion range. Also resets the
                accident ticker for oil spill signs.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="range">The explosion radius to visualize</param>
            <returns>The created ExplosionRangePop component for further manipulation</returns>
        </member>
        <member name="M:EffectsController.CreateFreezeDamageEffect(System.Single,System.Single,UnityEngine.Transform)">
            <summary>
                Creates a freeze damage visual effect that can optionally attach to a parent
                transform. Used to show ice crystals or frost effects on frozen units. The effect is
                created at z-depth -10 for proper layering.
            </summary>
            <param name="x">The x-coordinate of the freeze effect</param>
            <param name="y">The y-coordinate of the freeze effect</param>
            <param name="parentTransform">Optional transform to parent the effect to (null for world space)</param>
        </member>
        <member name="M:EffectsController.CreateNinjaSmokeEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a ninja smoke bomb effect for stealth abilities. Produces a cloud of smoke
                at the specified position. Note: Velocity parameters are accepted but unused in the
                current implementation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreatePuffDisappearEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a disappearance puff effect with accompanying ring. Spawns both a main puff
                cloud and a ring effect with 0.25 unit vertical offset. Used for teleportation and
                vanishing abilities.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreatePuffDisappearRingEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates just the ring portion of a disappearance effect. Returns the Puff component
                for further manipulation. Note: Velocity parameters are accepted but unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
            <returns>The created Puff component for the ring effect</returns>
        </member>
        <member name="M:EffectsController.CreatePuffPeckShineEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a shining effect typically used for peck attacks or impacts. Returns the
                Puff component for further manipulation. Note: Velocity parameters are accepted but
                unused.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
            <returns>The created Puff component for the shine effect</returns>
        </member>
        <member name="M:EffectsController.CreateReviveZombieEffect(System.Single,System.Single,Transform)">
            <summary>
                Creates a zombie revival effect at the specified position. The effect is parented to
                the provided transform to follow the reviving unit. Used when necromancer abilities
                raise the undead.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateRevivedZombiePassiveEffect(System.Single,System.Single,System.Single,Transform)">
            <summary>
                Creates a persistent effect for revived zombie units. The effect is parented to the
                zombie transform to provide continuous visual indication of undead status. Typically
                shows as a subtle aura or particle effect.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
            <param name="parentedTransform">The transform to parent the effect to</param>
        </member>
        <member name="M:EffectsController.CreateSparkleDisappearEffect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a sparkly disappearance effect for magical vanishing. Produces a glittering
                particle effect at the specified position. Note: Velocity parameters are accepted
                but unused in the current implementation.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="xI">The horizontal velocity (unused in implementation)</param>
            <param name="yI">The vertical velocity (unused in implementation)</param>
        </member>
        <member name="M:EffectsController.CreateUndeadSelfReviveEffect(System.Single,System.Single,System.Single)">
            <summary>
                Creates a self-revival effect for undead units coming back to life. Unlike other
                revival effects, this is not parented and plays as a one-shot animation at the
                revival location.
            </summary>
            <param name="x">The x-coordinate in world space</param>
            <param name="y">The y-coordinate in world space</param>
            <param name="z">The z-coordinate in world space</param>
        </member>
        <!-- Status Effects Fields -->
        <member name="F:EffectsController.bigDogCoveredInAcidMaterial">
            <summary>
                Material applied to big dog mook units (mega MookDog) when they are covered in acid,
                creating a visual acid effect on their sprite renderer.
            </summary>
        </member>
        <member name="F:EffectsController.bigMookCoveredInAcidMaterial">
            <summary>
                Material applied to big mook units (MookBigGuy and large MookSuicide) when they are
                covered in acid, creating a visual acid effect on their sprite renderer.
            </summary>
        </member>
        <member name="F:EffectsController.distortionHeatWavePrefab">
            <summary>
                Heat wave distortion effect prefab for thermal shimmer effects. Not currently used
                but available for heat-based visuals.
            </summary>
        </member>
        <member name="F:EffectsController.distortionPinchGrowPrefab">
            <summary>
                Pinching distortion effect prefab that creates a warping pinch visual, used by
                CreateDistortionPinch method.
            </summary>
        </member>
        <member name="F:EffectsController.distortionWobbleGrowPrefab">
            <summary>
                Standard wobbling distortion effect prefab for medium reality distortion visuals,
                used by CreateDistortionWobble method.
            </summary>
        </member>
        <member name="F:EffectsController.distortionWobbleLargeGrowPrefab">
            <summary>
                Large wobbling distortion effect prefab for major reality warping, used by
                CreateDistortionWobbleLarge and extreme distortion methods.
            </summary>
        </member>
        <member name="F:EffectsController.distortionWobbleSmallGrowPrefab">
            <summary>
                Small wobbling distortion effect prefab for minor reality warping visuals, used by
                CreateDistortionWobbleSmall method.
            </summary>
        </member>
        <member name="F:EffectsController.dogCoveredInAcidMaterial">
            <summary>
                Material applied to regular dog mook units (MookDog) when they are covered in acid,
                creating a visual acid effect on their sprite renderer.
            </summary>
        </member>
        <member name="F:EffectsController.grenadierMookCoveredInAcidMaterial">
            <summary>
                Material applied to grenadier mook units (MookGrenadier) when they are covered in
                acid, creating a visual acid effect on their sprite renderer.
            </summary>
        </member>
        <member name="F:EffectsController.hellBoomerCoveredInAcidMaterial">
            <summary>
                Material applied to hell boomer mook units (MookHellBoomer) when they are covered in
                acid, creating a visual acid effect on their sprite renderer.
            </summary>
        </member>
        <member name="F:EffectsController.reviveZombiePrefab">
            <summary>
                Zombie revival effect prefab for necromancy or undead resurrection visuals, used by
                CreateReviveZombieEffect method.
            </summary>
        </member>
        <member name="F:EffectsController.revivedZombiePassivePrefab">
            <summary>
                Passive effect prefab for active revived zombies, used by
                CreateRevivedZombiePassiveEffect method.
            </summary>
        </member>
        <member name="F:EffectsController.stunnedStars1Prefab">
            <summary>
                First stunned stars effect variant, rotating stars shown above stunned units.
            </summary>
        </member>
        <member name="F:EffectsController.stunnedStars2Prefab">
            <summary>
                Second stunned stars effect variant, provides visual variety for stun effects.
            </summary>
        </member>
        <member name="F:EffectsController.stunnedStars3Prefab">
            <summary>
                Third stunned stars effect variant, adds additional variety to stun visuals.
            </summary>
        </member>
        <member name="F:EffectsController.stunnedStarsCount">
            <summary>
                Static counter used to cycle through stunned star variants for visual variety.
            </summary>
        </member>
        <member name="F:EffectsController.undeadSelfRevivePrefab">
            <summary>
                Undead self-revival effect prefab that creates visual feedback when undead units
                resurrect themselves.
            </summary>
        </member>
        <!-- Audio System Methods -->
        <member name="M:EffectsController.PlayBloodSquirtSound(System.Single,System.Single,System.Single)">
            <summary>
                Plays blood squirt sound effect from the effort sounds collection. Protected method
                for blood spray and arterial bleeding audio. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>
        <member name="M:EffectsController.PlayExplosionHugeSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Plays huge explosion sound effect from the death sounds collection. Protected method
                used for major explosive events. Returns the AudioSource for further audio
                processing.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>
        <member name="M:EffectsController.PlayExplosionMassiveSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Plays massive explosion sound effect from the death sounds collection. Protected
                method for the largest explosive events. Returns the AudioSource for audio
                manipulation.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>
        <member name="M:EffectsController.PlayExplosionSound(System.Single,System.Single,System.Single)">
            <summary>
                Plays standard explosion sound effect from the death sounds collection. Protected
                method for regular explosive audio feedback. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>
        <member name="M:EffectsController.PlayGlassShatterSound(System.Single,System.Single,System.Single)">
            <summary>
                Plays glass shattering sound effect from the death sounds collection. Protected
                method for glass breaking audio feedback. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>
        <member name="M:EffectsController.PlaySlimeExplosionSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Plays slime explosion sound effect from the death sounds collection. Protected
                method that returns the AudioSource for further manipulation. Used for wet, organic
                explosion audio feedback.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>
        <member name="M:EffectsController.PlaySmallExplosionSound(System.Single,System.Single,System.Single)">
            <summary>
                Plays small explosion sound using attack2 sounds collection. Protected method for
                minor explosive effects. Does not return the AudioSource.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
        </member>
        <member name="M:EffectsController.PlaySmallSlimeExplosionSound(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Plays small slime explosion sound using greeting sounds at 0.7 pitch. Protected
                method that creates a lower-pitched variant for smaller slime effects. Returns the
                AudioSource for manipulation.
            </summary>
            <param name="x">The x-coordinate of the sound source</param>
            <param name="y">The y-coordinate of the sound source</param>
            <param name="volume">The playback volume</param>
            <param name="ignoreFilters">Whether to bypass audio filters</param>
            <returns>The AudioSource playing the sound</returns>
        </member>
        <!-- Audio System Fields -->
        <member name="F:EffectsController.bloodSoundHolder">
            <summary>
                Sound holder containing blood-related audio effects played when blood effects are
                created.
            </summary>
        </member>
        <member name="F:EffectsController.explosionHugeSoundHolder">
            <summary>
                Sound holder containing huge explosion audio effects for massive blast sounds.
            </summary>
        </member>
        <member name="F:EffectsController.explosionMassiveSoundHolder">
            <summary>
                Sound holder containing massive explosion audio effects for extreme blast sounds.
            </summary>
        </member>
        <member name="F:EffectsController.explosionSlimeSoundHolder">
            <summary>
                Sound holder containing slime explosion audio effects for alien/acid burst sounds.
            </summary>
        </member>
        <member name="F:EffectsController.explosionSoundHolder">
            <summary>
                Sound holder containing standard explosion audio effects for blast sounds.
            </summary>
        </member>
        <member name="F:EffectsController.glassSoundHolder">
            <summary>
                Sound holder containing glass breaking sound effects played when glass shatters.
            </summary>
        </member>
        <!-- Helper & Utility Methods -->
        <member name="M:EffectsController.AttachLight(Unit)">
            <summary>
                Attaches a light source to a unit for illumination effects. Creates the light object
                6 units above the unit's position and parents it for movement tracking. Used for
                character lighting or special effects.
            </summary>
            <param name="unit">The unit to attach the light to</param>
        </member>
        <member name="M:EffectsController.CreateBoneParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates bone-colored particles using a specified emitter. Randomly selects bone
                colors from the theme for skeletal or ashen debris effects with appropriate pale
                color variations.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateDustParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates dirt-colored dust particles using a specified emitter. Randomly selects dirt
                colors from the theme for each particle. Uses the same distribution pattern as flesh
                dust but with theme-appropriate dirt coloring.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateDustParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates dust particles with a specified color using a custom emitter. Overrides the
                emitter's default coloring to apply the provided color uniformly to all created
                particles.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
        </member>
        <member name="M:EffectsController.CreateDustParticlesRow(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates particles in a horizontal row pattern using a specified emitter. Particles
                are distributed only along the x-axis while maintaining a constant y-position,
                creating a line effect. Supports separate x and y force components for directional
                control.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the row center</param>
            <param name="y">The y-coordinate of the row (remains constant)</param>
            <param name="count">The number of particles to create in the row</param>
            <param name="offsetXRadius">The horizontal spread radius for the row</param>
            <param name="xForce">The horizontal force component for particles</param>
            <param name="yForce">The vertical force component for particles</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
        </member>
        <member name="M:EffectsController.CreateFleshDustParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates flesh-colored dust particles using a specified emitter. Randomly selects
                flesh colors from the theme for each particle. Distributes particles within the
                offset radius with randomized size and energy values between the emitter's
                configured minimums and maximums.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single particle at the specified 3D position. The most basic particle
                creation method that simply emits one particle at the exact coordinates provided.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleSystem,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single particle using the modern ParticleSystem. This wrapper converts
                coordinates to a Vector3 and calls the vector-based overload for ParticleSystem
                compatibility.
            </summary>
            <param name="emitter">The ParticleSystem to emit from</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleSystem,UnityEngine.Vector3)">
            <summary>
                Creates a single particle using ParticleSystem at a vector position. Uses EmitParams
                for modern particle system control with default parameters.
            </summary>
            <param name="emitter">The ParticleSystem to emit from</param>
            <param name="position">The 3D position for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleSystem,UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
            <summary>
                Creates a single particle with position randomization and initial velocity. The
                particle appears randomly within the specified radius of the position and launches
                with the given velocity.
            </summary>
            <param name="emitter">The ParticleSystem to emit from</param>
            <param name="position">The center position for particle placement</param>
            <param name="radius">The randomization radius around the position</param>
            <param name="velocity">The initial velocity vector for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates a single colored particle at the specified position. Temporarily overrides
                the emitter's renderer color to apply the specified color to the emitted particle.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
            <param name="color">The color to apply to the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a single particle with force-based random velocity. The particle's initial
                velocity is randomized within a unit circle and scaled by the force parameter, then
                combined with the specified initial velocity components.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color)">
            <summary>
                Creates a single colored particle with force-based velocity. Combines color override
                with velocity randomization for colored particles with dynamic movement.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="color">The color to apply to the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a particle with life and size multipliers at z=1. This wrapper adds default
                z-position and zero z-velocity, calling the full 3D version for particles with
                customized lifetime and size.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="lifeM">Lifetime multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a particle with custom z-position, life, and size multipliers. Adds zero
                z-velocity as a default, forwarding to the full implementation with complete 3D
                control.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="lifeM">Lifetime multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticle(ParticleEmitter,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a fully customized particle with 3D position and velocity. The most
                comprehensive single particle creation method, supporting custom lifetime and size
                multipliers along with full 3D velocity control including z-axis movement.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate for the particle</param>
            <param name="y">The y-coordinate for the particle</param>
            <param name="z">The z-coordinate for the particle</param>
            <param name="force">The force multiplier for random velocity</param>
            <param name="xI">The initial x-velocity to add</param>
            <param name="yI">The initial y-velocity to add</param>
            <param name="zI">The initial z-velocity to add</param>
            <param name="lifeM">Lifetime multiplier for the particle</param>
            <param name="sizeM">Size multiplier for the particle</param>
        </member>
        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates white particles using a specified emitter. The generic particle creation
                method that uses white color for all particles. Provides the base implementation for
                themed particle methods.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
            <summary>
                Creates multiple rotating particles with uniform spread. This wrapper uses equal x
                and y offset radii for circular distribution patterns when creating spinning
                particles.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The uniform spread radius for particles</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
            <param name="angularVelocityMin">The minimum rotation speed</param>
            <param name="angularVelocityMax">The maximum rotation speed</param>
        </member>
        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
            <summary>
                Creates multiple rotating particles at z=0 with elliptical spread. This wrapper adds
                default z-position for 2D particle effects with rotation and custom distribution
                patterns.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius</param>
            <param name="yOffsetRadius">The vertical spread radius</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
            <param name="angularVelocityMin">The minimum rotation speed</param>
            <param name="angularVelocityMax">The maximum rotation speed</param>
        </member>
        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
            <summary>
                Creates multiple rotating particles with full 3D control. The comprehensive particle
                creation method supporting elliptical distribution, custom colors, and randomized
                angular velocity for realistic spinning debris effects. Each particle gets a random
                rotation speed between min and max.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="z">The z-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius</param>
            <param name="yOffsetRadius">The vertical spread radius</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color">The color to apply to all particles</param>
            <param name="angularVelocityMin">The minimum rotation speed for particles</param>
            <param name="angularVelocityMax">The maximum rotation speed for particles</param>
        </member>
        <member name="M:EffectsController.CreateParticles(ParticleEmitter,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single)">
            <summary>
                Creates multiple particles with color interpolation between two colors. Each
                particle gets a random color between color1 and color2, creating gradient effects.
                Supports full 3D positioning, elliptical distribution, and randomized angular
                velocity for realistic multi-colored particle effects.
            </summary>
            <param name="emitter">The particle emitter to use</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="z">The z-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="xOffsetRadius">The horizontal spread radius</param>
            <param name="yOffsetRadius">The vertical spread radius</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
            <param name="color1">The first color for interpolation</param>
            <param name="color2">The second color for interpolation</param>
            <param name="angularVelocityMin">The minimum rotation speed for particles</param>
            <param name="angularVelocityMax">The maximum rotation speed for particles</param>
        </member>
        <member name="M:EffectsController.CreateSandParticles(ParticleEmitter,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates sand-colored particles using a specified emitter. Randomly selects sand
                colors from the theme for desert or beach-appropriate particle effects with natural
                sand color variations.
            </summary>
            <param name="emitter">The particle emitter to use for particle creation</param>
            <param name="x">The x-coordinate of the particle origin</param>
            <param name="y">The y-coordinate of the particle origin</param>
            <param name="count">The number of particles to create</param>
            <param name="offsetRadius">The spread radius for particle placement</param>
            <param name="force">The force multiplier for particle velocity</param>
            <param name="xI">The initial x-velocity added to all particles</param>
            <param name="yI">The initial y-velocity added to all particles</param>
        </member>
        <member name="M:EffectsController.GetBloodOverlay">
            <summary>
                Returns a random blood overlay sprite for terrain decoration. Selects randomly from
                the bloodBlockOverlayPrefabs array and instantiates it. Used to add blood decals to
                blocks and surfaces.
            </summary>
            <returns>The transform of the instantiated blood overlay sprite</returns>
        </member>
        <member name="M:EffectsController.InstantiateEffect(UnityEngine.Object)">
            <summary>
                Instantiates an effect object at the origin with default rotation. Supports object
                pooling for IPoolableEffect types.
            </summary>
            <param name="prefab">The effect prefab to instantiate. Can be any Unity Object type.</param>
            <returns>The instantiated effect object, either from the pool or newly created.</returns>
        </member>
        <member name="M:EffectsController.InstantiateEffect(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
                Instantiates an effect object at the specified position and rotation. Supports
                object pooling for IPoolableEffect types to improve performance.
            </summary>
            <param name="prefab">The effect prefab to instantiate. Can be any Unity Object type.</param>
            <param name="pos">The position where the effect should be instantiated.</param>
            <param name="rot">The rotation of the instantiated effect.</param>
            <returns>The instantiated effect object, either from the pool or newly created.</returns>
        </member>
        <member name="M:EffectsController.OnDestroy">
            <summary>
                Unity lifecycle method called when the EffectsController is destroyed. Clears the
                static instance reference.
            </summary>
        </member>
        <!-- Helper & Utility Fields -->
        <member name="F:EffectsController.groundLayer">
            <summary>
                Static layer mask used for ground collision detection in various effect placement
                calculations.
            </summary>
        </member>
        <member name="F:EffectsController.tempOffset">
            <summary>
                Protected static temporary Vector3 storage used internally by shrapnel creation
                methods to calculate random or circular offset positions without allocating new
                Vector3 objects each time.
            </summary>
        </member>
    </members>
</doc>