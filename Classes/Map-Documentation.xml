<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <!-- Combat & Damage Methods -->
        <member name="M:Map.BlindUnits(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Blinds all enemy units within range of a position. Blinded units have impaired
                vision and targeting abilities.
            </summary>
            <param name="playerNum">Player number performing the blind effect</param>
            <param name="x">X position of the blind effect center</param>
            <param name="y">Y position of the blind effect center</param>
            <param name="range">Radius of the blind effect</param>
            <param name="blindTime">Duration of the blindness in seconds (default 9)</param>
        </member>
        <member name="M:Map.BurnBlocksAround(System.Int32,System.Int32,System.Int32,System.Boolean,UnityEngine.GameObject)">
            <summary>
                Burns blocks in the four cardinal directions (up, down, left, right) from a center
                position using raycasting. Can force burn non-oily blocks or only burn oily blocks
                based on the forced parameter.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="collumn">Grid column position of the center</param>
            <param name="row">Grid row position of the center</param>
            <param name="forced">If true, burns all blocks; if false, only burns oily blocks</param>
            <param name="ignoreGameObject">Optional GameObject to ignore during raycasting</param>
            <returns>Number of blocks that were burned</returns>
        </member>
        <member name="M:Map.BurnDamageBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
                Burns and damages a block at the specified grid position, sending both Damage and
                ForceBurn messages to all objects within a 6 unit radius. Used for guaranteed fire
                spreading to blocks.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
        </member>
        <member name="M:Map.BurnLargeObjects(System.Int32,System.Int32,System.Int32)">
            <summary>
                Burns large objects at a specific grid position by sending fire damage messages to
                all objects within a 7 unit radius sphere. Commonly used for spreading fire to
                destructible scenery.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
            <returns>True if any objects were found and damaged, false otherwise</returns>
        </member>
        <member name="M:Map.BurnLargeObjects(System.Int32,System.Single,System.Single)">
            <summary>
                Burns large objects at a specific world position by sending fire damage messages to
                all objects within a 7 unit radius sphere. Overload that accepts world coordinates
                instead of grid coordinates.
            </summary>
            <param name="damage">Amount of fire damage to apply</param>
            <param name="x">World X position</param>
            <param name="y">World Y position</param>
            <returns>True if any objects were found and damaged, false otherwise</returns>
        </member>
        <member name="M:Map.BurnUnitsAround_Local(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Sets units on fire within a specified range from a position. Only affects units when
                the Demonstration.enemiesSetOnFire flag is enabled. Damage can be blocked by
                non-penetrating fire hitting units. Additionally can set ground blocks on fire if
                setGroundAlight is true.
            </summary>
            <param name="firedBy">The object that caused the fire</param>
            <param name="playerNum">Player number of the fire source</param>
            <param name="damage">Burn damage to apply</param>
            <param name="range">Radius of the fire effect</param>
            <param name="x">X position of the fire center</param>
            <param name="y">Y position of the fire center</param>
            <param name="penetrates">Whether fire goes through units or is blocked by the first unit hit</param>
            <param name="setGroundAlight">Whether to also set nearby ground blocks on fire</param>
        </member>
        <member name="M:Map.CanRollOntoUnits(System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks if a rolling object at the specified grid position can roll onto units in
                that location. Returns false if any heavy units are present that would block the
                roll.
            </summary>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
            <param name="direction">Direction of the roll (not used in current implementation)</param>
            <returns>True if the object can roll onto units at this position, false if blocked by heavy units</returns>
        </member>
        <member name="M:Map.CheckForCorpse(System.Single,System.Single,System.Single,System.Single,System.Single@)">
            <summary>
                Searches for the nearest corpse within the specified area. Performs line-of-sight
                checks to ensure the corpse is accessible. Used for abilities that interact with
                dead units, such as resurrection or corpse manipulation.
            </summary>
            <param name="x">The X coordinate to search from.</param>
            <param name="y">The Y coordinate to search from.</param>
            <param name="xRange">The maximum horizontal search distance.</param>
            <param name="yRange">The maximum vertical search distance.</param>
            <param name="corpseX">Output parameter that returns the X coordinate of the found corpse.</param>
            <returns>The nearest accessible corpse unit, or null if none found.</returns>
        </member>
        <member name="M:Map.CollectUnits(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
                Collects all units within range that match the specified criteria into a list. Used
                for area effects that need to process multiple units, such as chain lightning or
                area scans.
            </summary>
            <param name="damageSender">The object collecting units (used for team checks).</param>
            <param name="playerNum">The player number performing the collection, used for team filtering.</param>
            <param name="range">The square radius from the center point for detection.</param>
            <param name="x">The X coordinate of the collection center point.</param>
            <param name="y">The Y coordinate of the collection center point.</param>
            <param name="penetrates">If true, continues collecting all units; if false, stops at the first unit.</param>
            <param name="onlyLiving">If true, only collects living units; if false, includes dead units.</param>
            <param name="alreadyHitUnits">List to populate with collected units, also excludes units already in the list.</param>
            <returns>True if at least one unit was collected, false otherwise.</returns>
        </member>
        <member name="M:Map.ConstrainToBlocks(System.Single,System.Single,System.Single)">
            <summary>
                Checks if a sphere at the specified position overlaps with any solid blocks on the
                ground layer.
            </summary>
            <param name="x">The x-coordinate of the sphere center</param>
            <param name="y">The y-coordinate of the sphere center</param>
            <param name="size">The radius of the sphere to check</param>
            <returns>True if the sphere overlaps with any blocks on the ground layer; false otherwise</returns>
            <remarks>
                This method uses Unity's physics system to check for collisions with blocks. It's
                typically used to determine if a position is constrained by nearby terrain, useful
                for movement validation or spawn checks. The method uses Map.groundLayer as the
                layer mask for the physics check.
            </remarks>
        </member>
        <member name="M:Map.CrushUnitsAgainstWalls(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Checks units within range of a crushing force and either damages them if they're
                against a wall or pushes them away from the crusher position. Used for environmental
                crushers and moving walls.
            </summary>
            <param name="damageSender">The object causing the crushing damage</param>
            <param name="x">X position of the crusher</param>
            <param name="y">Y position of the crusher</param>
            <param name="range">Range of the crushing effect</param>
            <param name="xDirection">Horizontal direction of crushing force (1 for right, -1 for left, 0 for none)</param>
            <param name="yDirection">Vertical direction of crushing force (1 for up, -1 for down, 0 for none)</param>
        </member>
        <member name="M:Map.CrushUnitsAgainstWallsHorizontal(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Crushes units horizontally against walls within a specified size range. Uses
                raycasting to detect if there's a solid wall in the crush direction before applying
                damage.
            </summary>
            <param name="damageSender">The object causing the crushing damage</param>
            <param name="x">X position of the crusher</param>
            <param name="y">Y position of the crusher</param>
            <param name="crusherSize">Half-height of the crushing area</param>
            <param name="direction">Horizontal crushing direction (1 for right, -1 for left)</param>
        </member>
        <member name="M:Map.CrushUnitsAgainstWallsVertical(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Crushes units vertically against walls within a specified size range. Checks if
                units are positioned correctly relative to the crusher and uses raycasting to verify
                wall presence before applying crush damage.
            </summary>
            <param name="damageSender">The object causing the crushing damage</param>
            <param name="x">X position of the crusher</param>
            <param name="y">Y position of the crusher</param>
            <param name="crusherSize">Half-width of the crushing area</param>
            <param name="direction">Vertical crushing direction (1 for up, -1 for down)</param>
        </member>
        <member name="M:Map.DamageBackground(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Applies damage to both foreground and background blocks within a circular radius.
            </summary>
            <param name="damageSender">The entity causing the damage (used for damage attribution).</param>
            <param name="damage">The amount of damage to apply to affected blocks.</param>
            <param name="radius">The radius of the damage area in world units.</param>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <remarks>
                Iterates through all blocks within the damage radius and applies damage using the
                DestroyBackground damage type. Both foreground and background blocks are affected.
                The damage falls off based on distance from the center point.
            </remarks>
        </member>
        <member name="M:Map.DecapitateUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Attempts to decapitate the first eligible unit found within the specified area.
                Prioritizes headshot-capable units and applies decapitation effects, used for
                special finishing moves or precision attacks.
            </summary>
            <param name="damageSender">The object that initiated the decapitation attempt.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict if decapitation occurs.</param>
            <param name="damageType">The type of damage being inflicted.</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the attack center point.</param>
            <param name="y">The Y coordinate of the attack center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="knock">Whether to apply knockback force.</param>
            <returns>The unit that was decapitated, or null if no eligible unit was found.</returns>
        </member>
        <member name="M:Map.DoLevelEndExplosions">
            <summary>
                Coroutine that continuously generates random explosions across the visible screen
                area.
            </summary>
            <returns>An IEnumerator for the coroutine execution</returns>
            <remarks>
                This infinite coroutine creates explosions at random screen positions during the
                level-ending sequence. For each explosion attempt, it converts a random screen
                position to world coordinates with some overflow (140% screen width/height, centered
                at 80%). It then checks if the position contains solid blocks, background blocks, or
                ladders before creating an explosion there. The coroutine waits 0.1-0.4 seconds
                between explosions, creating a dramatic ending effect. Up to 50 position attempts
                are made per cycle to find a valid explosion location.
            </remarks>
        </member>
        <member name="M:Map.ExplodeUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates an explosion that damages and knocks back units within range. Units within
                killRange take full damage, while units between killRange and range are only knocked
                back. Also handles oil ignition and worm deaths.
            </summary>
            <param name="damageSender">The object causing the explosion</param>
            <param name="damage">Base damage amount</param>
            <param name="damageType">Type of damage to apply</param>
            <param name="range">Maximum range of the explosion effect</param>
            <param name="killRange">Range within which units take damage (units beyond this but within range are only knocked back)</param>
            <param name="x">X position of explosion center</param>
            <param name="y">Y position of explosion center</param>
            <param name="force">Knockback force multiplier</param>
            <param name="yI">Additional upward impulse for knockback</param>
            <param name="playerNum">Player number for damage ownership</param>
            <param name="forceTumble">Whether to force units to tumble when knocked back</param>
            <param name="knockSelf">Whether the damage sender can knock itself back</param>
            <param name="knockFriendlies">Whether to knock back friendly units</param>
            <returns>Number of units killed by the explosion</returns>
        </member>
        <member name="M:Map.FivePointPalmExplodingHeartTechnique(NetworkedUnit,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Applies the legendary Five Point Palm Exploding Heart Technique to units and certain
                destructible objects. This martial arts move plants a delayed explosion effect that
                triggers after a countdown, inspired by Kill Bill. Also affects DamageRelay objects,
                BossBlockPieces, and BossBlockRocketBatteries.
            </summary>
            <param name="damageSender">The networked unit performing the technique (must be networked for proper synchronization).</param>
            <param name="playerNum">The player number who performed the technique.</param>
            <param name="damage">The initial damage dealt by the palm strike.</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the palm strike center point.</param>
            <param name="y">The Y coordinate of the palm strike center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="penetrates">If true, the technique continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <returns>True if at least one unit or object was affected, false otherwise.</returns>
        </member>
        <member name="M:Map.FreezeUnits(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Freezes units within range of a position. Units that can be frozen will be frozen
                for the specified duration. Units that cannot be frozen will take 8 freeze damage
                instead. Returns true if any units were affected.
            </summary>
            <param name="firedBy">The object causing the freeze effect</param>
            <param name="playerNum">Player number performing the freeze</param>
            <param name="x">X position of the freeze center</param>
            <param name="y">Y position of the freeze center</param>
            <param name="range">Radius of the freeze effect</param>
            <param name="freezeTime">Duration of the freeze in seconds</param>
            <returns>True if at least one unit was frozen or damaged, false otherwise</returns>
        </member>
        <member name="M:Map.GeLivingtUnit(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Gets the first living, non-stealthed unit within the specified rectangular area. The
                method name contains a typo (should be GetLivingUnit) but is preserved for
                compatibility. Uses slightly expanded hit detection based on unit size for more
                forgiving targeting.
            </summary>
            <param name="playerNum">The player number searching for units, used for team filtering.</param>
            <param name="xRange">The horizontal radius from the center point for detection.</param>
            <param name="yRange">The vertical radius from the center point for detection.</param>
            <param name="x">The X coordinate of the search center point.</param>
            <param name="y">The Y coordinate of the search center point.</param>
            <returns>The first eligible living unit found, or null if none found.</returns>
        </member>
        <member name="M:Map.GetFirstUnit(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
                Finds the first unit within range that matches the specified criteria. Used for
                targeted abilities that need to select a single unit, such as grappling hooks or
                homing projectiles.
            </summary>
            <param name="damageSender">The object searching for a unit (used for team checks).</param>
            <param name="playerNum">The player number performing the search, used for team filtering.</param>
            <param name="range">The square radius from the center point for detection.</param>
            <param name="x">The X coordinate of the search center point.</param>
            <param name="y">The Y coordinate of the search center point.</param>
            <param name="onlyLiving">If true, only finds living units; if false, includes dead units.</param>
            <param name="includeSuicide">If true, includes suicide bomber units even if dead.</param>
            <param name="alreadyHitUnits">List of units to exclude from the search.</param>
            <returns>The first eligible unit found, or null if none found.</returns>
        </member>
        <member name="M:Map.GetNearbyMook(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
                Finds the nearest enemy mook in a specified horizontal direction. Uses Manhattan
                distance and filters by direction, health status, and unit type.
            </summary>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <param name="direction">The horizontal direction to search (1 for right, -1 for left)</param>
            <param name="canBeDead">Whether to include dead mooks in the search</param>
            <returns>The nearest mook matching criteria, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearbyMookVertical(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
                Finds the nearest enemy mook in a specified vertical direction. Uses Manhattan
                distance and filters by direction, health status, and unit type.
            </summary>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <param name="direction">The vertical direction to search (1 for up, -1 for down)</param>
            <param name="canBeDead">Whether to include dead mooks in the search</param>
            <returns>The nearest mook matching criteria, or null if none found</returns>
        </member>
        <member name="M:Map.HeadShotUnit(UnityEngine.MonoBehaviour,Unit,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Boolean,System.Single,System.Single)">
            <summary>
                Applies headshot damage to a unit with special headshot mechanics. Checks damage
                policies before applying damage and handles knockback separately.
            </summary>
            <param name="damageSender">The object that caused the headshot</param>
            <param name="unit">The unit to headshot</param>
            <param name="damage">The amount of damage to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="direction">The direction of the hit (-1 for left, 1 for right)</param>
            <param name="knock">Whether to apply knockback to the unit</param>
            <param name="xHit">The X position where the headshot hit</param>
            <param name="yHit">The Y position where the headshot hit</param>
        </member>
        <member name="M:Map.HitAllLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Damages all living units regardless of team within a rectangular area. Used for
                environmental hazards or attacks that damage everyone, including allies, except the
                damage sender's own player number.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number who caused the damage (units with this playerNum are immune).</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitAllLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
                Damages all living units regardless of team, tracking which units have been hit.
                Allows for damage effects that need to avoid hitting the same unit multiple times
                across multiple calls.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number who caused the damage (units with this playerNum are immune).</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="alreadyHit">List of units to skip and to add newly hit units to.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitClosestUnit(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Finds and damages the closest unit within range, checking line of sight. Prioritizes
                living units over dead ones but can optionally hit dead units if no living targets
                exist.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="playerNum">The player number of the attacker (determines which units are enemies)</param>
            <param name="damage">The amount of damage to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="knock">Whether to apply knockback</param>
            <param name="canGib">If false, dead units receive 0 damage (prevents gibbing)</param>
            <param name="firedLocally">Whether this damage was initiated locally (unused in this method)</param>
            <param name="checkIfUnitIsLocallyOwned">Whether to check unit ownership (unused in this method)</param>
            <param name="hitDead">Whether dead units can be targeted (default true)</param>
            <returns>The unit that was hit, or null if no valid target was found</returns>
        </member>
        <member name="M:Map.HitDeadUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Damages only dead units (corpses) within a square area. Used for attacks that can
                destroy or further damage corpses, such as explosives that gib bodies or effects
                that prevent resurrection.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="damage">The amount of damage to inflict on each corpse.</param>
            <param name="damageType">The type of damage being inflicted (affects corpse reactions).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to corpses.</param>
            <param name="yI">The vertical impulse force to apply to corpses.</param>
            <param name="penetrates">If true, damage continues through corpses; if false, stops at the first corpse hit.</param>
            <param name="knock">Whether to apply knockback force to corpses.</param>
            <returns>True if at least one corpse was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitHellUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Damages only hell-type enemy units within a square area. Used for attacks that
                specifically target demonic enemies while ignoring regular units, with options to
                filter by unit state and position.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="ignoreDeadUnits">If true, only damages living units.</param>
            <param name="onlyGroundUnits">If true, only hits units that are on the ground. Default is false.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is true.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitLivingHeroes(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Selectively damages either heroes or non-hero units based on the hitHeroes
                parameter. Used for attacks that need to differentiate between player characters and
                enemies, such as mind control effects or faction-specific attacks.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="hitHeroes">If true, only damages hero units; if false, only damages non-hero units.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Damages only living units within a square area. This overload uses equal horizontal
                and vertical range for a square hit area, commonly used for explosions and
                area-of-effect attacks.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is true.</param>
            <param name="onlyGroundUnits">If true, only hits units that are on the ground. Default is false.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitLivingUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Damages only living units within a rectangular area. Provides separate control over
                horizontal and vertical hit ranges, useful for attacks with non-square areas of
                effect.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is true.</param>
            <param name="onlyGroundUnits">If true, only hits units that are on the ground. Default is false.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Damages units within a square range using basic hit detection. Convenience overload
                that delegates to the canGib version with gibbing enabled by default.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="avoidID">Unit to avoid damaging (unless it catches friendly bullets)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The hit detection range (used for both horizontal and vertical axes)</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">Whether damage penetrates through units</param>
            <param name="knock">Whether to apply knockback</param>
            <returns>True if any units were hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Damages units within a square range with gibbing control. Convenience overload that
                delegates to the rectangular version with equal x/y ranges and headshots enabled by
                default.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="avoidID">Unit to avoid damaging (unless it catches friendly bullets)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The base damage amount</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The damage range (used for both axes)</param>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">Whether damage penetrates through units</param>
            <param name="knock">Whether to apply knockback</param>
            <param name="canGib">Whether units can be gibbed when killed</param>
            <returns>True if any units were hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Damages units within a rectangular area with separate x/y ranges and headshot
                control. Convenience overload that delegates to the full implementation with default
                blood color tracking and no hit unit list.
            </summary>
            <param name="damageSender">The object causing the damage.</param>
            <param name="avoidID">Unit to avoid damaging (unless it catches friendly bullets)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="canHeadShot">Whether this damage can trigger headshots for increased damage (default: true)</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,BloodColor@,System.Collections.Generic.List{Unit},System.Boolean)">
            <summary>
                Core implementation of HitUnits with full parameter control. This is the main
                implementation that handles all unit damage logic, with options for blood color
                tracking, hit unit lists, and circular vs rectangular damage areas. Most other
                HitUnits overloads delegate to this method.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="avoidID">Optional unit to exclude from damage, unless they have CatchFriendlyBullets enabled.</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="canHeadShot">Whether this damage can trigger headshots for increased damage.</param>
            <param name="bloodColor">Output parameter that returns the blood color of the last unit hit.</param>
            <param name="hitUnits">Optional list to populate with all units that were hit by this damage.</param>
            <param name="onlyDamageInRadius">If true, applies damage only to units within a circular radius instead of rectangular area.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
                Damages units along a line segment between two points. Standalone implementation for
                line-based damage detection, useful for beam weapons, laser attacks, or linear area
                effects. Always applies upward knockback.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="avoidID">Unit to avoid damaging (currently not implemented in this overload)</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="startPos">The starting position of the line segment</param>
            <param name="endPos">The ending position of the line segment</param>
            <param name="width">The width of the line for hit detection (perpendicular distance from line)</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit},System.Boolean,System.Boolean)">
            <summary>
                Damages units within a square range with hit tracking and corpse filtering.
                Convenience overload that delegates to the corpse damage version with equal damage
                values for living and dead units.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on each hit unit.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitUnits">List of units to skip and to add newly hit units to.</param>
            <param name="ignoreDeadUnits">If true, only damages living units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit},System.Boolean)">
            <summary>
                Damages units with separate damage values for living and dead units. Convenience
                overload that delegates to the rectangular version with equal x/y ranges. Useful for
                explosions that need different corpse damage.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on living units</param>
            <param name="corpseDamage">The amount of damage to inflict on dead units (corpses)</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="range">The square radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitUnits">List of units to skip and to add newly hit units to.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots (default: false)</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Unit},System.Boolean,System.Boolean)">
            <summary>
                Core implementation for damage with separate corpse damage values and rectangular
                areas. This is a standalone implementation (not a delegation) that handles all the
                damage logic for cases where living and dead units need different damage amounts.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on living units.</param>
            <param name="corpseDamage">The amount of damage to inflict on dead units (corpses).</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitUnits">List of units to skip and to add newly hit units to.</param>
            <param name="ignoreDeadUnits">If true, only damages living units.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{BroforceObject},System.Boolean)">
            <summary>
                Damages units with BroforceObject list tracking for mixed object types. Standalone
                implementation that tracks hit objects as BroforceObject instead of Unit, allowing
                for more flexible hit tracking across different game object types.
            </summary>
            <param name="damageSender">The object that is causing the damage..</param>
            <param name="playerNum">The player number dealing damage (used for team damage rules)</param>
            <param name="damage">The amount of damage to inflict on living units.</param>
            <param name="corpseDamage">The amount of damage to inflict on dead units (corpses).</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the damage center point.</param>
            <param name="y">The Y coordinate of the damage center point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="alreadyHitObjects">List of BroforceObjects to skip and to add newly hit units to.</param>
            <param name="canHeadshot">Whether this damage can trigger headshots. Default is false.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Damages all units within a square range regardless of team. Convenience overload
                that delegates to the rectangular version with equal x/y ranges. No avoidID
                parameter means all units can be damaged.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The hit detection range (used for both horizontal and vertical axes)</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Damages all units within a rectangular area regardless of team. Standalone
                implementation without avoidID that hits all units in range. Includes special
                penetration logic that reduces penetration chance based on unit mass.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="xRange">The horizontal range of the damage area</param>
            <param name="yRange">The vertical range of the damage area</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,BloodColor@)">
            <summary>
                Damages all units within a square range and tracks blood color. Convenience overload
                that delegates to the rectangular version with equal x/y ranges. Used when visual
                blood effects are needed.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="range">The range in both X and Y directions</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <param name="bloodColor">Output parameter that returns the blood color of the last unit hit</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnits(UnityEngine.MonoBehaviour,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,BloodColor@)">
            <summary>
                Damages all units within a rectangular area and tracks blood color. Standalone
                implementation without team filtering that includes blood color tracking for visual
                effects and special penetration reduction based on unit mass.
            </summary>
            <param name="damageSender">The object that is causing the damage.</param>
            <param name="damage">The amount of damage to inflict on each hit unit</param>
            <param name="damageType">The type of damage being dealt (affects unit reactions and effects)</param>
            <param name="xRange">The horizontal range of the damage area</param>
            <param name="yRange">The vertical range of the damage area</param>
            <param name="x">The X coordinate of the damage center point</param>
            <param name="y">The Y coordinate of the damage center point</param>
            <param name="xI">The horizontal knockback force</param>
            <param name="yI">The vertical knockback force</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at first non-dead unit</param>
            <param name="knock">Whether to apply knockback to damaged units</param>
            <param name="bloodColor">Output parameter that will contain the blood color of the last hit unit</param>
            <returns>True if at least one unit was hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitUnitsWithArrow(UnityEngine.MonoBehaviour,Arrow,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Specialized hit detection for arrow projectiles that destroys the arrow on impact.
                Handles headshot detection and applies appropriate damage based on hit location,
                simulating realistic arrow physics where the projectile stops on impact.
            </summary>
            <param name="damageSender">The object that is causing the damage. (typically the bow or crossbow).</param>
            <param name="arrow">The arrow projectile instance that will be destroyed on hit.</param>
            <param name="playerNum">The player number who shot the arrow, used for team damage rules.</param>
            <param name="damage">The amount of damage to inflict on hit.</param>
            <param name="damageType">The type of damage being inflicted (typically Bullet for arrows).</param>
            <param name="xRange">The horizontal hit detection range from the arrow's position.</param>
            <param name="yRange">The vertical hit detection range from the arrow's position.</param>
            <param name="x">The X coordinate of the arrow.</param>
            <param name="y">The Y coordinate of the arrow.</param>
            <param name="xI">The horizontal velocity/force of the arrow for knockback.</param>
            <param name="yI">The vertical velocity/force of the arrow for knockback.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <returns>Always returns false after processing hits (arrow is destroyed on impact).</returns>
        </member>
        <member name="M:Map.InseminateUnits(AlienFaceHugger,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attempts to implant alien parasites into eligible units within range. Used by
                AlienFaceHugger enemies to infect heroes with chest-bursting aliens. Only affects
                non-replicant heroes that can be inseminated.
            </summary>
            <param name="inseminator">The AlienFaceHugger performing the insemination.</param>
            <param name="playerNum">The player number of the face hugger, used for team damage rules.</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the insemination attempt center point.</param>
            <param name="y">The Y coordinate of the insemination attempt center point.</param>
            <param name="xI">The horizontal velocity of the face hugger (affects insemination angle).</param>
            <param name="yI">The vertical velocity of the face hugger (affects insemination angle).</param>
            <returns>True if a unit was successfully inseminated, false otherwise.</returns>
        </member>
        <member name="M:Map.KnockAndDamageUnit(UnityEngine.MonoBehaviour,Unit,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
                Applies knockback and damage to a unit. This is a convenience overload that calls
                the more detailed version with default hit position parameters (-100, -100).
            </summary>
            <param name="damageSender">The object causing the damage</param>
            <param name="unit">The unit to knock and damage</param>
            <param name="damage">Amount of damage to apply</param>
            <param name="damageType">Type of damage being applied</param>
            <param name="xI">Horizontal knockback velocity</param>
            <param name="yI">Vertical knockback velocity</param>
            <param name="direction">Direction of the attack (-1 for left, 1 for right, 0 for no specific direction)</param>
            <param name="knock">Whether to apply knockback to the unit</param>
        </member>
        <member name="M:Map.KnockAndDamageUnit(UnityEngine.MonoBehaviour,Unit,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>
                Applies knockback and damage to a unit with full control over hit position. Handles
                damage policy validation to determine if damage should be applied based on the
                relationship between sender and target. Validates knockback velocity values to
                prevent NaN issues.
            </summary>
            <param name="damageSender">The object causing the damage</param>
            <param name="unit">The unit to knock and damage</param>
            <param name="damage">Amount of damage to apply</param>
            <param name="damageType">Type of damage being applied</param>
            <param name="xI">Horizontal knockback velocity (will be set to 0 if NaN)</param>
            <param name="yI">Vertical knockback velocity (will be set to 0 if NaN)</param>
            <param name="direction">Direction of the attack (-1 for left, 1 for right, 0 for no specific direction)</param>
            <param name="knock">Whether to apply knockback to the unit</param>
            <param name="hitX">X position where the hit occurred</param>
            <param name="hitY">Y position where the hit occurred</param>
            <param name="sendPosAndVelocityAcrossNetwork">Whether to synchronize position and velocity (networking functionality excluded for modding)</param>
        </member>
        <member name="M:Map.KnockMooks(UnityEngine.MonoBehaviour,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Applies knockback to enemy units (mooks) without dealing damage. Used for crowd
                control effects that push enemies away without harming them, such as sonic booms or
                force pushes.
            </summary>
            <param name="damageSender">The object that initiated the knockback.</param>
            <param name="damageType">The type of force being applied (affects knockback behavior).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the knockback center point.</param>
            <param name="y">The Y coordinate of the knockback center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="penetrates">If true, knockback continues through units; if false, stops at the first unit hit.</param>
            <param name="livingUnits">If true, only affects living units; if false, affects all units.</param>
            <param name="onlyGroundUnits">If true, only affects units on the ground. Default is true.</param>
            <returns>True if at least one unit was knocked back, false otherwise.</returns>
        </member>
        <member name="M:Map.KnockUnits(UnityEngine.MonoBehaviour,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Applies knockback to all units (not just enemies) without dealing damage. More
                general version of KnockMooks that affects any unit regardless of allegiance, used
                for universal force effects.
            </summary>
            <param name="damageSender">The object that initiated the knockback.</param>
            <param name="damageType">The type of force being applied (affects knockback behavior).</param>
            <param name="xRange">The horizontal radius from the center point for hit detection.</param>
            <param name="yRange">The vertical radius from the center point for hit detection.</param>
            <param name="x">The X coordinate of the knockback center point.</param>
            <param name="y">The Y coordinate of the knockback center point.</param>
            <param name="xI">The horizontal impulse force to apply.</param>
            <param name="yI">The vertical impulse force to apply.</param>
            <param name="penetrates">If true, knockback continues through units; if false, stops at the first unit hit.</param>
            <param name="livingUnits">If true, only affects living units; if false, affects all units.</param>
            <param name="onlyGroundUnits">If true, only affects units on the ground. Default is true.</param>
            <returns>True if at least one unit was knocked back, false otherwise.</returns>
        </member>
        <member name="M:Map.MakeAllBlocksUltraTough">
            <summary>
                Sets all blocks in the map to have extremely high health, making them virtually
                indestructible.
            </summary>
            <remarks>
                This method iterates through all blocks in the map grid and sets their health to
                1,000,000. It's typically called before the level-ending explosion sequence when
                destruction recording is enabled, ensuring that the terrain remains intact for
                replay or recording purposes despite the visual explosion effects. Only non-null
                blocks are affected.
            </remarks>
        </member>
        <member name="M:Map.MakeLevelEndExplosion(UnityEngine.Vector3)">
            <summary>
                Creates a single explosion at the specified position using a pooled explosive
                object.
            </summary>
            <param name="pos">The world position where the explosion should occur</param>
            <remarks>
                This method pulls an explosive from the LevelEndExplosionBank pool, resets its
                state, positions it, and triggers the explosion. The explosive is moved from the
                bank to the active list for tracking. If the bank is empty,
                PopulateLevelEndExplosionBank() is called to refill it. This pooling system ensures
                smooth performance during the rapid explosion sequence at level end.
            </remarks>
        </member>
        <member name="M:Map.PopulateLevelEndExplosionBank">
            <summary>
                Pre-allocates a pool of hidden explosive objects for use in the level-ending
                explosion sequence.
            </summary>
            <remarks>
                This method creates a bank of 10 HiddenExplosives instances that are reused during
                the level-end explosion sequence. The explosives are instantiated from the
                hiddenExplosivePrefabReference asset, deactivated, and marked with DontDestroyOnLoad
                to persist across scenes. This pooling approach avoids the performance cost of
                instantiating explosives during the intense ending sequence.
            </remarks>
        </member>
        <member name="M:Map.RegisterTargetableObject(TargetableObject)">
            <summary>
                Registers an object that can be targeted by AI units, homing projectiles, or
                auto-aim systems. Targetable objects include enemies, destructible props, or any
                gameplay element that can be selected as a valid target for attacks.
            </summary>
            <param name="target">The TargetableObject to register for targeting systems.</param>
        </member>
        <member name="M:Map.RemoveTargetableObject(TargetableObject)">
            <summary>
                Removes an object from the targetable tracking system, typically when it is
                destroyed or should no longer be considered a valid target. This prevents AI and
                homing projectiles from continuing to target defunct objects.
            </summary>
            <param name="target">The TargetableObject to remove from targeting consideration.</param>
        </member>
        <member name="M:Map.ReviveDeadUnits(System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Boolean,TestVanDammeAnim,System.Boolean)">
            <summary>
                Attempts to revive dead units or remove acid from acid-covered units within a
                circular range. Returns true if any units were successfully revived.
            </summary>
            <param name="x">X position of the revival center</param>
            <param name="y">Y position of the revival center</param>
            <param name="range">Radius within which to revive units</param>
            <param name="playerNum">Player number to assign to revived units</param>
            <param name="maxReviveCount">Maximum number of units to revive</param>
            <param name="isPlayerControlled">Whether revived units should be player-controlled</param>
            <param name="reviveSource">The source object performing the revival</param>
            <param name="reviveBros">Whether hero units (Bros) can be revived (default true)</param>
            <returns>True if at least one unit was successfully revived, false otherwise</returns>
        </member>
        <member name="M:Map.RollOntoUnits(System.Int32,System.Int32,System.Int32)">
            <summary>
                Causes units at the specified grid position to be rolled onto, applying the RollOnto
                effect to all non-heavy units in the area.
            </summary>
            <param name="collumn">Grid column position</param>
            <param name="row">Grid row position</param>
            <param name="direction">Direction of the roll to apply to affected units</param>
        </member>
        <member name="M:Map.StartLevelEndExplosions">
            <summary>
                Begins the local level-ending explosion sequence on this client.
            </summary>
            <remarks>
                This private method is called via RPC from StartLevelEndExplosionsOverNetwork(). It
                sets the explosionsHaveStarted flag and starts the DoLevelEndExplosions coroutine
                which continuously creates explosions across the screen. This method ensures the
                explosion sequence only starts once per level completion.
            </remarks>
        </member>
        <member name="M:Map.StartLevelEndExplosionsOverNetwork">
            <summary>
                Initiates the level-ending explosion sequence across all networked clients.
            </summary>
            <remarks>
                This method checks if explosions have already started to prevent duplicate
                triggering. If the map data is set to record destruction, it first makes all blocks
                ultra-tough to preserve the terrain structure during the ending sequence. The method
                then sends an RPC to all clients to synchronize the explosion start. The actual
                explosion sequence is handled by StartLevelEndExplosions() on each client.
            </remarks>
        </member>
        <member name="M:Map.StunUnits(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Stuns all enemy units within range of a position. Only affects units that are
                enemies of the specified player number.
            </summary>
            <param name="playerNum">Player number performing the stun</param>
            <param name="x">X position of the stun center</param>
            <param name="y">Y position of the stun center</param>
            <param name="range">Radius of the stun effect</param>
            <param name="stunTime">Duration of the stun in seconds</param>
        </member>
        <member name="M:Map.TearGasUnits(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Applies tear gas effect to all enemy units within range. Tear gas causes units to be
                temporarily incapacitated.
            </summary>
            <param name="playerNum">Player number applying the tear gas</param>
            <param name="x">X position of the tear gas center</param>
            <param name="y">Y position of the tear gas center</param>
            <param name="range">Radius of the tear gas effect</param>
            <param name="tearGasTime">Duration of the tear gas effect in seconds (default 9)</param>
        </member>
        <member name="M:Map.WhipUnits(UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour,System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Single@)">
            <summary>
                Specialized damage method for whip-like attacks that deal variable damage based on
                distance. Creates visual effects and applies damage that scales with the unit's
                position relative to the whip's reach, simulating the physics of a whip strike.
            </summary>
            <param name="damageSender">The object that is causing the damage. (typically the whip weapon).</param>
            <param name="avoidID">Optional unit to exclude from damage.</param>
            <param name="playerNum">The player number who caused the damage, used for team damage rules.</param>
            <param name="damage">The base damage amount, which will be scaled by distance.</param>
            <param name="damageType">The type of damage being inflicted (affects unit reactions and effects).</param>
            <param name="xRange">The horizontal reach of the whip attack.</param>
            <param name="yRange">The vertical reach of the whip attack.</param>
            <param name="whipDirection">The direction of the whip strike (1 for right, -1 for left).</param>
            <param name="x">The X coordinate of the whip's origin point.</param>
            <param name="y">The Y coordinate of the whip's origin point.</param>
            <param name="xI">The horizontal impulse force to apply to hit units.</param>
            <param name="yI">The vertical impulse force to apply to hit units.</param>
            <param name="penetrates">If true, damage continues through units; if false, stops at the first unit hit.</param>
            <param name="knock">Whether to apply knockback force to hit units.</param>
            <param name="canGib">Whether dead units can be gibbed (blown apart) by this damage.</param>
            <param name="maxDamageM">Output parameter that returns the maximum damage multiplier achieved during the whip strike.</param>
            <returns>True if at least one unit was hit, false otherwise.</returns>
        </member>
        <!-- Combat & Damage Fields -->
        <member name="F:Map.enemyDeathListeners">
            <summary>
                List of triggers that respond to enemy deaths. Listeners are registered via
                RegisterEnemyDeathListener and removed via RemoveEnemyDeathListener. Used for
                mission objectives, wave spawning, and event triggering based on enemy elimination.
                Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.explosionsHaveStarted">
            <summary>
                Tracks whether level end explosions have been initiated. Set to true when
                StartLevelEndExplosions is called to prevent multiple coroutines from running the
                continuous explosion effects. Used to ensure the explosion sequence only starts once
                per level.
            </summary>
        </member>
        <member name="F:Map.nearestDist">
            <summary>
                Temporary storage for the nearest distance found during proximity searches. Used by
                various nearest entity search methods (GetNearestUnit, GetNearestCheckpoint, etc.)
                to track the shortest distance while iterating through candidates. Optimizes
                performance by avoiding repeated distance allocations.
            </summary>
        </member>
        <member name="F:Map.targetableObjects">
            <summary>
                List of objects that can be targeted by AI and auto-aim systems. Objects are
                registered via RegisterTargetableObject and removed via RemoveTargetableObject. Used
                by GetNearestTargetableObject for finding valid targets within range, considering
                player allegiance and boss target priorities. Initialized in Awake() and set to null
                in OnDestroy().
            </summary>
        </member>
        <!-- Position & Physics Methods -->
        <member name="M:Map.AddSlime(SlimeGroundCover,System.Int32,System.Int32,System.Int32,DirectionEnum)">
            <summary>
                Adds slime to a block surface in the specified direction if the block is solid, has
                an open face, and isn't immune to slime. Creates new slime or adds to existing slime
                coverage.
            </summary>
            <param name="slimePrefab">The SlimeGroundCover prefab to instantiate if no slime exists on the surface.</param>
            <param name="slimeAmount">The amount of slime damage/thickness to add to the surface.</param>
            <param name="collumn">The column index of the block to add slime to.</param>
            <param name="row">The row index of the block to add slime to.</param>
            <param name="direction">The direction face of the block where slime should be added (Up, Down, Left, or Right).</param>
            <returns>True if slime was successfully added; false if the block is invalid, immune to slime, or doesn't have an open face.</returns>
            <remarks>
                Slime can only be added to solid blocks with an adjacent empty space. If slime
                already exists on the surface, the amount is added to it. Otherwise, a new
                SlimeGroundCover instance is created.
            </remarks>
        </member>
        <member name="M:Map.AddTaggedObject(UnityEngine.GameObject,System.String)">
            <summary>
                Registers a GameObject with a string tag for later retrieval. Tags are
                case-insensitive and stored in uppercase for consistent lookup.
            </summary>
            <param name="obj">The GameObject to register with the specified tag.</param>
            <param name="tag">The string identifier to associate with the object. Must not be null or empty.</param>
            <remarks>
                Used by the trigger and scripting system to reference specific objects in the map.
                Tagged objects can be retrieved, damaged, or manipulated through other tag-based
                methods.
            </remarks>
        </member>
        <member name="M:Map.CallFakeHelicopter(UnityEngine.Vector2,System.Single)">
            <summary>
                Summons a fake helicopter to the specified position after a delay. The fake
                helicopter is a visual-only helicopter used for cinematic sequences that doesn't
                interact with gameplay.
            </summary>
            <param name="position">The target position for the helicopter</param>
            <param name="delay">The delay in seconds before the helicopter appears</param>
            <remarks>
                Creates a single shared instance of HelicopterFake if one doesn't exist. The fake
                helicopter is typically used for background effects or scripted sequences where a
                full helicopter entity isn't needed.
            </remarks>
        </member>
        <member name="M:Map.CheckCheckPoint(System.Single,System.Single,System.Single,TestVanDammeAnim)">
            <summary>
                Checks and activates checkpoints near a moving character. Considers character
                velocity for predictive checkpoint activation, triggers perks and time bonuses.
            </summary>
            <param name="xI">The character's horizontal velocity</param>
            <param name="x">The character's X coordinate</param>
            <param name="y">The character's Y coordinate</param>
            <param name="activatingCharacter">The character activating the checkpoint</param>
            <returns>True if a visible checkpoint was newly activated, false otherwise</returns>
        </member>
        <member name="M:Map.CheckPersistBlocksPastLevelLoad">
            <summary>
                Checks whether blocks should be persisted after a level load and either maintains or
                destroys them accordingly. This method is called after level transitions to handle
                the persistence state.
            </summary>
            <remarks>
                Only processes persistence if loading time optimizations are active. Sets
                hasPersistedPastLevelLoad to true if persistence is enabled, otherwise calls
                DestroyPersistantBlocks to clear any persisted blocks.
            </remarks>
        </member>
        <member name="M:Map.ClearPersistenBlocksInstant">
            <summary>
                Immediately clears all persisted blocks without waiting for a level transition. This
                provides a way to force-clear persistence state during gameplay.
            </summary>
            <remarks>
                Resets the hasPersistedPastLevelLoad flag and calls DestroyPersistantBlocks to
                remove all persisted blocks immediately.
            </remarks>
        </member>
        <member name="M:Map.ConstrainToBlocks(UnityEngine.MonoBehaviour,System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Boolean@,System.Boolean@,System.Boolean)">
            <summary>
                Constrains movement to prevent objects from passing through solid blocks,
                calculating collision responses and bounce directions. Handles multi-frame movements
                by breaking them into smaller steps.
            </summary>
            <param name="obj">The MonoBehaviour object being constrained (used for special handling of grenades).</param>
            <param name="x">The current X position of the object.</param>
            <param name="y">The current Y position of the object.</param>
            <param name="size">The collision radius of the object.</param>
            <param name="xIT">Input/Output: The attempted X movement. Modified to valid movement amount on collision.</param>
            <param name="yIT">Input/Output: The attempted Y movement. Modified to valid movement amount on collision.</param>
            <param name="bounceX">Output: Set to true if horizontal movement should be reversed (bounce).</param>
            <param name="bounceY">Output: Set to true if vertical movement should be reversed (bounce).</param>
            <param name="strictlyGround">If true, only collides with ground layer; if false, includes other collision layers.</param>
            <returns>True if a collision occurred and movement was constrained; false if movement is unobstructed.</returns>
            <remarks>
                Handles large movements (&gt;16 units) by recursively breaking them into smaller
                steps. Checks collisions at destination position and adjusts movement to stop at
                block boundaries.
            </remarks>
        </member>
        <member name="M:Map.Create4AmmoAndRevives(UnityEngine.Vector3,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a 2x2 arrangement of ammunition and revival crates at the specified
                position. The arrangement includes two ammo crates (top), one revive crate
                (bottom-left), and one damage crate (bottom-right).
            </summary>
            <param name="pos">The position for the top-left crate</param>
            <param name="collumn">The column index for block array placement</param>
            <param name="row">The row index for block array placement</param>
            <param name="setupBlocks">Whether to run block setup logic (connections to adjacent blocks)</param>
            <remarks>
                Sets the active theme to jungle theme for crate selection. Each crate is properly
                registered in the blocks array, networked, and initialized. If setupBlocks is true,
                establishes connections to adjacent blocks and runs FirstFrame initialization.
            </remarks>
        </member>
        <member name="M:Map.CreateExitPortal(UnityEngine.Vector2)">
            <summary>
                Creates a hero level exit portal at the specified position, typically used for level
                completion.
            </summary>
            <param name="position">The base position where the portal should be created.</param>
            <remarks>
                The portal is instantiated at an offset position (x+16, y+112) from the provided
                coordinates to properly align with the game's grid system. The portal is registered
                with the networking system using a deterministic ID for multiplayer synchronization.
            </remarks>
        </member>
        <member name="M:Map.CreateExitPortal(UnityEngine.Vector2)">
            <summary>
                Creates a hero level exit portal at the specified position. The portal is positioned
                with a vertical offset of 112 units and a horizontal offset of 16 units from the
                provided coordinates.
            </summary>
            <param name="position">The base position where the portal should be created</param>
            <remarks>
                The portal is instantiated from the exitPortalPrefabReference asset and registered
                with the game's networking system using a deterministic network ID. This ensures the
                portal is properly synchronized across all clients in multiplayer sessions.
            </remarks>
        </member>
        <member name="M:Map.CreateRemoteControlCar(System.Single,System.Single)">
            <summary>
                Creates and networks a remote control explosive car at the specified position.
            </summary>
            <param name="x">The x-coordinate for spawning the car</param>
            <param name="y">The y-coordinate for spawning the car</param>
            <returns>The created RemoteControlExplosiveCar instance</returns>
            <remarks>
                This method instantiates a networked remote control car from the
                remoteCarPrefabReference asset. The car is created at the specified coordinates with
                identity rotation. The Networking.Instantiate call ensures the car is properly
                synchronized across all clients. These cars are typically used as player-controlled
                explosive devices in gameplay.
            </remarks>
        </member>
        <member name="M:Map.CrossProduct(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Calculates the 2D cross product (scalar) of vectors formed by three points.
            </summary>
            <param name="pointA">The origin point for both vectors</param>
            <param name="pointB">The end point of the first vector</param>
            <param name="pointC">The end point of the second vector</param>
            <returns>The scalar cross product of vectors AB and AC</returns>
            <remarks>
                This method computes the 2D cross product (z-component) of vectors from point A to
                points B and C. The result's magnitude represents twice the area of the triangle
                formed by the three points, and its sign indicates the winding order (clockwise or
                counterclockwise). This is used in geometric calculations, particularly for
                determining which side of a line a point lies on and in distance calculations. Note
                the unusual array notation (e.g., pointB[0]) instead of pointB.x, which may be a
                decompilation artifact.
            </remarks>
        </member>
        <member name="M:Map.DamageBackground(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Damages background and foreground blocks within a circular radius. This method is
                used for explosive damage that affects the destructible terrain behind the main play
                area.
            </summary>
            <param name="damageSender">The MonoBehaviour that is causing the damage (used for damage attribution)</param>
            <param name="damage">The amount of damage to apply to blocks</param>
            <param name="radius">The radius of the damage effect in world units</param>
            <param name="x">The X coordinate of the damage center</param>
            <param name="y">The Y coordinate of the damage center</param>
            <remarks>
                Calculates which grid cells fall within the damage radius and applies damage to both
                background and foreground blocks. Uses MapController.Damage_Networked to ensure
                damage is synchronized across all clients. The damage type is specifically set to
                DestroyBackground.
            </remarks>
        </member>
        <member name="M:Map.DamageDoodadByTag(System.String,System.Int32)">
            <summary>
                Damages all doodads (environmental objects) with the specified tag. Handles both
                Unit components and generic damage message receivers.
            </summary>
            <param name="tag">The tag identifying which doodads to damage (case-insensitive).</param>
            <param name="damage">The amount of damage to apply to each matching doodad.</param>
            <returns>True if at least one doodad with the tag was found (even if it couldn't be damaged); false if no matching doodads exist.</returns>
            <remarks>
                Iterates through all doodads in MapData.DoodadList with matching tags. For objects
                with Unit components, calls the Damage method directly. For others, sends a "Damage"
                message with a DamageObject parameter.
            </remarks>
        </member>
        <member name="M:Map.DestroyPersistantBlocks">
            <summary>
                Destroys all persisted blocks and clears the persistence system. This removes both
                foreground and background persistent blocks and their container GameObject.
            </summary>
            <remarks>
                Iterates through all persistent block arrays and destroys each block's GameObject
                before clearing the arrays and destroying the persistent container. Also resets the
                hasPersistedPastLevelLoad flag.
            </remarks>
        </member>
        <member name="M:Map.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Calculates the Euclidean distance between two 2D points using manual calculation.
                This method provides a basic distance calculation used internally for geometric
                operations.
            </summary>
            <param name="pointA">The first point in 2D space</param>
            <param name="pointB">The second point in 2D space</param>
            <returns>The Euclidean distance between the two points</returns>
            <remarks>
                This method manually calculates distance using the formula: sqrt((x2-x1)² +
                (y2-y1)²). It's primarily used by the LineToPointDistance2D method for calculating
                perpendicular distances from points to line segments.
            </remarks>
        </member>
        <member name="M:Map.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Calculates the Euclidean distance between two 2D points using the standard distance
                formula.
            </summary>
            <param name="pointA">The first point in 2D space.</param>
            <param name="pointB">The second point in 2D space.</param>
            <returns>The distance between the two points as a float value.</returns>
            <remarks>
                This is a utility method used internally for various geometric calculations in the
                map system, particularly for line-to-point distance calculations. It uses the
                standard formula: sqrt((x2-x1)^2 + (y2-y1)^2).
            </remarks>
        </member>
        <member name="M:Map.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Calculates the Euclidean distance between two 2D points using manual calculation.
                This method provides a basic distance calculation used internally for geometric
                operations.
            </summary>
            <param name="pointA">The first point in 2D space</param>
            <param name="pointB">The second point in 2D space</param>
            <returns>The Euclidean distance between the two points</returns>
            <remarks>
                This method manually calculates distance using the formula: sqrt((x2-x1)² +
                (y2-y1)²). It's primarily used by the LineToPointDistance2D method for calculating
                perpendicular distances from points to line segments.
            </remarks>
        </member>
        <member name="M:Map.DoesForegroundBlockHaveBackground(GroundType)">
            <summary>
                Determines if a foreground block type should have a background layer rendered behind
                it. Most solid blocks have backgrounds, while bridges, ladders, and decorative
                elements do not.
            </summary>
            <param name="foregroundType">The ground type to check.</param>
            <returns>True if this ground type should have a background; false for transparent or pass-through blocks like ladders, bridges, and decorative elements.</returns>
        </member>
        <member name="M:Map.DoesForegroundBlockHaveBackground(TerrainType)">
            <summary>
                Determines if a foreground terrain type should have a background layer rendered
                behind it. Used during map generation to determine background placement.
            </summary>
            <param name="foregroundType">The terrain type to check.</param>
            <returns>True if this terrain type should have a background; false for transparent or pass-through terrain like ladders, bridges, and air.</returns>
        </member>
        <member name="M:Map.DontPersistBlocks">
            <summary>
                Disables block persistence for the next level load. This prevents blocks from being
                maintained between level transitions, ensuring a fresh map state.
            </summary>
            <remarks>
                Sets the persistPastLevelLoad flag to false. This method should be called when you
                want to ensure all blocks are cleared and recreated on the next level load,
                typically when transitioning to a completely different area.
            </remarks>
        </member>
        <member name="M:Map.DotProduct(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Calculates the dot product of vectors formed by three points, used for angle
                calculations.
            </summary>
            <param name="pointA">The first point defining the start of the first vector</param>
            <param name="pointB">The second point, end of first vector and start of second vector</param>
            <param name="pointC">The third point defining the end of the second vector</param>
            <returns>The dot product of vectors AB and BC</returns>
            <remarks>
                This helper method computes the dot product between two vectors formed by three
                sequential points. It creates vector AB (from A to B) and vector BC (from B to C),
                then returns their dot product. This is commonly used in distance calculations and
                determining angles between line segments, particularly in the line-to-point distance
                calculations used elsewhere in the map system.
            </remarks>
        </member>
        <member name="M:Map.FindHoleToJumpThroughAndAppear(System.Single,System.Single,System.Single@,System.Single@,System.Int32@)">
            <summary>
                Searches for a suitable floor opening where a character can jump through and appear
                from below. Used for dramatic entrance animations and spawn mechanics.
            </summary>
            <param name="xPos">The X coordinate around which to search for jump-through points.</param>
            <param name="yPos">The Y coordinate around which to search for jump-through points.</param>
            <param name="characterX">When successful, contains the X coordinate where the character should appear (centered in the empty column).</param>
            <param name="characterY">When successful, contains the Y coordinate where the character should appear (one block below the floor).</param>
            <param name="jumpDirection">When successful, contains the horizontal direction to jump: 1 for right, -1 for left.</param>
            <returns>True if a suitable jump-through location was found; false otherwise.</returns>
            <remarks>
                Searches within 9 columns on each side and up to 3 rows above. A valid location must
                have a solid floor block with at least 4 empty blocks below on one side.
            </remarks>
        </member>
        <member name="M:Map.FindLadderNearPosition(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
                Searches for a ladder block near the specified position and returns the optimal
                climbing position. Uses a default search range of 8 units, prioritizing ladders to
                the right of the position.
            </summary>
            <param name="xPos">The X coordinate of the search origin position.</param>
            <param name="yPos">The Y coordinate of the search origin position.</param>
            <param name="characterX">When successful, contains the X coordinate where the character should be positioned to climb the ladder (centered on the ladder at blockX + 8).</param>
            <param name="characterY">When successful, contains the Y coordinate where the character should be positioned (same as yPos).</param>
            <returns>True if a ladder was found within range; false if no ladder exists or the position is out of bounds.</returns>
            <remarks>
                Searches for all ladder types (normal, desert, city, metal, alien). The search
                prioritizes ladders in front (3/4 of range to the right) before checking behind
                (remaining 1/4 to the left).
            </remarks>
        </member>
        <member name="M:Map.FindLadderNearPosition(System.Single,System.Single,System.Int32,System.Single@,System.Single@)">
            <summary>
                Searches for a ladder block near the specified position within a custom range and
                returns the optimal climbing position. Prioritizes ladders in front of the search
                position.
            </summary>
            <param name="xPos">The X coordinate of the search origin position.</param>
            <param name="yPos">The Y coordinate of the search origin position.</param>
            <param name="range">The horizontal search range in grid units. The method searches from -range/4 to +range columns.</param>
            <param name="characterX">When successful, contains the X coordinate where the character should be positioned to climb the ladder.</param>
            <param name="characterY">When successful, contains the Y coordinate where the character should be positioned (same as yPos).</param>
            <returns>True if a ladder was found within range; false if no ladder exists or the position is out of bounds.</returns>
            <remarks>
                The search is asymmetric: it first checks 3/4 of the range to the right (forward),
                then 1/4 to the left (behind). This prioritization helps AI units find ladders in
                their movement direction.
            </remarks>
        </member>
        <member name="M:Map.FindLargeBlockDimensions(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,TerrainType,TerrainType[,])">
            <summary>
                Analyzes a terrain region to find the dimensions of a contiguous area of the same
                terrain type. Used for optimizing terrain mesh generation by combining adjacent
                blocks.
            </summary>
            <param name="x">The starting column position to analyze.</param>
            <param name="y">The starting row position to analyze.</param>
            <param name="firstCollumn">Output parameter containing the leftmost column of the contiguous area.</param>
            <param name="firstRow">Output parameter containing the bottom row of the contiguous area.</param>
            <param name="collumns">Output parameter containing the width of the contiguous area in columns.</param>
            <param name="rows">Output parameter containing the height of the contiguous area in rows.</param>
            <param name="currentTerrain">The terrain type to match when finding contiguous blocks.</param>
            <param name="terrainTypes">The 2D array of terrain types to analyze.</param>
            <remarks>
                Protected method that expands from the starting position in all four directions
                until it finds different terrain types or map boundaries. Validates that all corners
                match to ensure rectangular regions.
            </remarks>
        </member>
        <member name="M:Map.FindStartLocation">
            <summary>
                Determines the starting location for the level based on game mode and spawn point
                configuration. Handles different spawn strategies for various game modes.
            </summary>
            <returns>A Vector3 representing the world position where gameplay should begin.</returns>
            <remarks>
                For Suicide Horde mode, uses the first spawn point. For other modes, attempts to
                find spawn points or falls back to calculating a position based on map dimensions
                and highest solid block.
            </remarks>
        </member>
        <member name="M:Map.GetAmmoCrateFrequency">
            <summary>
                Calculates the spawn frequency for ammunition crates based on game mode and player
                progression. Higher values mean less frequent spawns.
            </summary>
            <returns>A float representing the spawn frequency multiplier for ammo crates.</returns>
            <remarks>
                Hardcore mode: 23x base frequency. Death match: 15x frequency. World map campaign:
                30 minus (2 per unlocked pickup, max 15). Default: 23x. All values are multiplied by
                MapData.ammoCrateFrequencyMultiplier.
            </remarks>
        </member>
        <member name="M:Map.GetBlockCenter(GridPoint)">
            <summary>
                Converts a grid point to its world position center coordinates.
            </summary>
            <param name="gridPoint">The grid point containing column and row indices</param>
            <returns>The world position at the center of the specified grid cell</returns>
            <remarks>
                This overload provides a convenient way to get world coordinates from a GridPoint
                object. It simply delegates to the GetBlockCenter(int, int) method using the
                gridPoint's column and row values. This is useful when working with grid-based game
                logic that needs to convert grid positions to world positions for spawning or
                positioning objects.
            </remarks>
        </member>
        <member name="M:Map.GetBlocksXY(System.Single@,System.Single@,System.Int32,System.Int32)">
            <summary>
                Converts grid coordinates to world position using reference parameters. More
                efficient version for when you need both x and y coordinates.
            </summary>
            <param name="x">Reference parameter that will contain the world x coordinate</param>
            <param name="y">Reference parameter that will contain the world y coordinate</param>
            <param name="row">The row index in the grid</param>
            <param name="collumn">The column index in the grid</param>
        </member>
        <member name="M:Map.GetBlocksXYPosition(System.Int32,System.Int32)">
            <summary>
                Converts grid coordinates (column, row) to world position. Used for positioning
                objects on the map grid.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector3 representing the world position of the grid cell</returns>
        </member>
        <member name="M:Map.GetCheckPoint(System.Int32)">
            <summary>
                Retrieves a checkpoint by its ID number. Performs bounds checking to ensure the
                requested ID is valid.
            </summary>
            <param name="id">The checkpoint ID to retrieve (0-based index).</param>
            <returns>The CheckPoint object with the specified ID, or null if the ID is out of bounds.</returns>
        </member>
        <member name="M:Map.GetCheckPointAirHeight(System.Int32)">
            <summary>
                Retrieves the extra height offset for airdrop spawning at a specific checkpoint.
                This value is added to the default spawn height for airdrop checkpoints.
            </summary>
            <param name="id">The checkpoint ID to query.</param>
            <returns>The airDropExtraHeight value from the checkpoint if it exists, or 16f as the default height if the ID is invalid.</returns>
        </member>
        <member name="M:Map.GetCollumn(System.Single)">
            <summary>
                Converts a world x coordinate to a grid column index. Each grid cell is 16 units
                wide.
            </summary>
            <param name="x">The world x coordinate</param>
            <returns>The column index in the grid</returns>
        </member>
        <member name="M:Map.GetDoodadByTag(System.String)">
            <summary>
                Retrieves a single GameObject by its tag, searching both the persistent doodad list
                and dynamically tagged objects. Returns the first match found.
            </summary>
            <param name="tag">The tag to search for (case-insensitive).</param>
            <returns>The first GameObject found with the specified tag, or null if no object has that tag.</returns>
            <remarks>
                First searches the MapData.DoodadList for persistent level objects, then checks the
                dynamic taggedObjects dictionary. Used by triggers and scripts to find specific
                objects.
            </remarks>
        </member>
        <member name="M:Map.GetDoodadsByTag(System.String)">
            <summary>
                Retrieves all GameObjects with the specified tag, including both persistent doodads
                and dynamically tagged objects.
            </summary>
            <param name="tag">The tag to search for (case-insensitive).</param>
            <returns>A List containing all GameObjects with the specified tag. Returns an empty list if no matches are found.</returns>
            <remarks>
                Searches both the MapData.DoodadList for level-placed objects and the taggedObjects
                dictionary for dynamically added objects. Unlike GetDoodadByTag, this returns all
                matches rather than just the first.
            </remarks>
        </member>
        <member name="M:Map.GetGroundHeight(System.Single,System.Single)">
            <summary>
                Finds the height of the ground directly below the specified position using
                raycasting. Performs multiple raycasts to ensure accurate ground detection even near
                edges.
            </summary>
            <param name="x">The X coordinate from which to cast rays downward.</param>
            <param name="y">The Y coordinate from which to start the raycast.</param>
            <returns>The Y coordinate of the ground surface if found; 0 if no ground is detected below the position.</returns>
            <remarks>
                Performs three raycasts: at the exact position, 16 units to the right, and 16 units
                to the left. This ensures ground detection even when the character is partially off
                a platform. Uses groundLayerStrict for precise collision.
            </remarks>
        </member>
        <member name="M:Map.GetLeafColor">
            <summary>
                Gets the leaf color defined by the current map theme.
            </summary>
            <returns>The Color value for leaves in the active theme</returns>
            <remarks>
                This method returns the theme-specific leaf color used for vegetation rendering.
                Different themes (jungle, forest, etc.) can define unique leaf colors to match their
                visual style. The color is typically used by particle systems, vegetation sprites,
                or environmental effects to maintain consistent theming throughout the level.
            </remarks>
        </member>
        <member name="M:Map.GetMaxCollumns">
            <summary>
                Gets the maximum number of columns in the current map, representing the map's width
                in grid units.
            </summary>
            <returns>The total number of columns in the map grid (Map.Width).</returns>
            <remarks>
                Provides a consistent interface for accessing map dimensions. The map uses a
                column-based grid system where each column is 16 units wide.
            </remarks>
        </member>
        <member name="M:Map.GetMaxRows">
            <summary>
                Gets the maximum number of rows in the current map, representing the map's height in
                grid units.
            </summary>
            <returns>The total number of rows in the map grid (Map.Height).</returns>
            <remarks>
                Provides a consistent interface for accessing map dimensions. The map uses a
                row-based grid system where each row is 16 units tall.
            </remarks>
        </member>
        <member name="M:Map.GetNearbyCheckPoint(System.Single,System.Single,System.Single)">
            <summary>
                Finds the nearest checkpoint within range that isn't blocked by a unit. Used for
                spawn point determination and checkpoint activation checks.
            </summary>
            <param name="radius">The search radius</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>The nearest unblocked checkpoint within range, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestCheckPoint(System.Int32,System.Single,System.Single)">
            <summary>
                Finds the nearest checkpoint within range of a position using Manhattan distance.
                Searches through all registered checkpoints regardless of activation state.
            </summary>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <returns>The nearest checkpoint, or null if none found within range</returns>
        </member>
        <member name="M:Map.GetNearestCheckPointToRight(System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest checkpoint that is to the right of the specified position. Used
                for checkpoint discovery and progression tracking.
            </summary>
            <param name="x">The x coordinate of the starting position</param>
            <param name="y">The y coordinate of the starting position</param>
            <param name="onlyUnactivatedCheckpoints">Whether to only consider checkpoints that haven't been activated yet</param>
            <returns>The nearest checkpoint to the right, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestRescueBro(System.Single,System.Single)">
            <summary>
                Finds the nearest rescue bro (caged prisoner) to the specified position. Used for
                locating prisoners that can be freed to gain extra lives.
            </summary>
            <param name="x">The x coordinate of the search position</param>
            <param name="y">The y coordinate of the search position</param>
            <returns>The nearest RescueBro object, or null if none found or HeroController is not available</returns>
        </member>
        <member name="M:Map.GetRow(System.Single)">
            <summary>
                Converts a world y coordinate to a grid row index. Each grid cell is 16 units tall.
            </summary>
            <param name="y">The world y coordinate</param>
            <returns>The row index in the grid</returns>
        </member>
        <member name="M:Map.GetRowCollumn(System.Single,System.Single,System.Int32@,System.Int32@)">
            <summary>
                Converts world position to grid coordinates using reference parameters. Used to find
                which grid cell contains a given world position.
            </summary>
            <param name="x">The world x coordinate</param>
            <param name="y">The world y coordinate</param>
            <param name="row">Reference parameter that will contain the row index</param>
            <param name="collumn">Reference parameter that will contain the column index</param>
        </member>
        <member name="M:Map.GetSpawnPoint(System.Int32)">
            <summary>
                Retrieves the SpawnPoint object for the specified player number. Uses modulo
                arithmetic with spawnPointOffset to cycle through available spawn points if there
                are fewer spawn points than players.
            </summary>
            <param name="playerNum">The player number (0-based) requesting a spawn point.</param>
            <returns>The SpawnPoint object for the player, or null if no valid spawn points exist or playerNum is negative.</returns>
        </member>
        <member name="M:Map.GetSpawnPointPosition(System.Int32)">
            <summary>
                Retrieves the world position of a spawn point for the specified player number. Uses
                modulo arithmetic with spawnPointOffset to cycle through available spawn points if
                there are fewer spawn points than players.
            </summary>
            <param name="playerNum">The player number (0-based) requesting a spawn position.</param>
            <returns>The Vector3 position of the spawn point, or (-1000, -1000, -1000) if no valid spawn points exist or playerNum is negative.</returns>
        </member>
        <member name="M:Map.GetUnitXOffset">
            <summary>
                Generates a pseudo-random horizontal offset for unit positioning.
            </summary>
            <returns>A horizontal offset value between -5 and +5 units with complex distribution</returns>
            <remarks>
                This method creates varied unit spawn positions to prevent overlap when multiple
                units spawn at the same location. It uses a deterministic sequence based on
                unitOffsetCount that combines multiple modulo operations to create an irregular but
                repeatable pattern. The formula produces offsets that cluster around certain values
                while still covering the full -5 to +5 range, creating natural-looking unit spread.
                The counter increments with each call, ensuring unique offsets for sequential
                spawns.
            </remarks>
        </member>
        <member name="M:Map.HasSandStormTrigger">
            <summary>
                Checks whether the current map contains any sandstorm or sandworm trigger actions.
                This is used to determine if desert-specific environmental effects should be
                prepared.
            </summary>
            <returns>True if the map contains sandstorm or sandworm triggers, false otherwise</returns>
            <remarks>
                Iterates through all triggers in the MapData and checks their actions for Sandstorm
                or CallSandworm types. These triggers create environmental hazards specific to
                desert-themed levels.
            </remarks>
        </member>
        <member name="M:Map.HasThisMapGotAliens">
            <summary>
                Checks whether the current map contains alien enemies. This is used to determine if
                alien-specific gameplay mechanics should be enabled.
            </summary>
            <returns>True if the map contains aliens, false otherwise</returns>
            <remarks>
                Returns the value of the hasAliens static field, which is set during map loading
                based on the presence of alien spawn points or alien-themed elements.
            </remarks>
        </member>
        <member name="M:Map.InsideWall(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Checks if a position is inside a wall or solid terrain using a reduced radius
                collision check.
            </summary>
            <param name="x">The X coordinate of the position to check.</param>
            <param name="y">The Y coordinate of the position to check.</param>
            <param name="size">The size of the object. The actual check uses size/2 as the radius.</param>
            <param name="strictlyGround">If true, only checks ground layers; if false, includes additional collision layers.</param>
            <returns>True if the position overlaps solid terrain; false if the position is clear.</returns>
            <remarks>
                Uses half the provided size for the collision check, making it more permissive than
                IsOverGround. Useful for checking if objects are embedded in terrain.
            </remarks>
        </member>
        <member name="M:Map.IsBackgroundBlock(System.Int32,System.Int32)">
            <summary>
                Checks if a background block exists at the specified grid position. Background
                blocks are visual elements rendered behind the main terrain.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if a background block exists at this position; false if the position is out of bounds or no background block exists.</returns>
        </member>
        <member name="M:Map.IsBlockCompatible(GroundType,System.Int32,System.Int32)">
            <summary>
                Checks if the terrain at the specified position is compatible with the given ground
                type for blending. Combines boundary checking with terrain compatibility rules.
            </summary>
            <param name="compareGroundType">The ground type to check compatibility with.</param>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is out of bounds or the terrain is compatible; false if incompatible terrain exists.</returns>
        </member>
        <member name="M:Map.IsBlockDestroyed(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position has been destroyed. Destroyed blocks
                no longer provide collision or visual representation.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is out of bounds, empty, or the block is marked as destroyed; false if an intact block exists.</returns>
        </member>
        <member name="M:Map.IsBlockEmpty(System.Int32,System.Int32)">
            <summary>
                Checks if the specified grid position has no block. Empty positions allow free
                movement and projectile passage.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is empty (no block) or out of bounds; false if a block exists.</returns>
        </member>
        <member name="M:Map.IsBlockFacingOpen(System.Int32,System.Int32,DirectionEnum)">
            <summary>
                Checks if a solid block has an open (non-solid) adjacent block in the specified
                direction. Used for determining valid surfaces for slime attachment and other
                directional mechanics.
            </summary>
            <param name="c">The column index of the block to check.</param>
            <param name="r">The row index of the block to check.</param>
            <param name="direction">The direction to check for an open adjacent block (Up, Down, Left, or Right).</param>
            <returns>True if the block at (c,r) is solid and has a non-solid block in the specified direction; false otherwise.</returns>
            <remarks>
                Protected method used internally by slime placement and other surface-attachment
                systems. Ensures the base block is solid before checking the adjacent space.
            </remarks>
        </member>
        <member name="M:Map.IsBlockFloor(System.Int32,System.Int32)">
            <summary>
                Determines if a block position represents a floor tile by checking if it's solid
                with at least two empty blocks above it. Used for pathfinding and spawn placement.
            </summary>
            <param name="c">The column index of the block to check.</param>
            <param name="r">The row index of the block to check.</param>
            <returns>True if the block is solid and has two empty blocks directly above it; false otherwise.</returns>
            <remarks>
                Protected method used by AI pathfinding and spawn systems to identify walkable
                surfaces with sufficient clearance for character movement.
            </remarks>
        </member>
        <member name="M:Map.IsBlockLadder(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position is a ladder that units can climb.
                Checks the original map data for any ladder terrain type.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position contains any type of climbable ladder; false otherwise.</returns>
        </member>
        <member name="M:Map.IsBlockLadder(System.Single,System.Single)">
            <summary>
                Checks if the position contains a ladder that units can climb. Convenience overload
                that converts world coordinates to grid position.
            </summary>
            <param name="x">The world X coordinate to check.</param>
            <param name="y">The world Y coordinate to check.</param>
            <returns>True if the position contains any type of climbable ladder; false otherwise.</returns>
        </member>
        <member name="M:Map.IsBlockQuicksand(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position is quicksand. Quicksand blocks slow
                movement and can trap units that stay too long.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position contains an intact quicksand block; false if out of bounds, empty, or destroyed.</returns>
        </member>
        <member name="M:Map.IsBlockQuicksand(System.Single,System.Single)">
            <summary>
                Checks if the position contains quicksand. Convenience overload that converts world
                coordinates to grid position.
            </summary>
            <param name="x">The world X coordinate to check.</param>
            <param name="y">The world Y coordinate to check.</param>
            <returns>True if the position contains an intact quicksand block; false otherwise.</returns>
        </member>
        <member name="M:Map.IsBlockSandbag(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position is a sandbag. Sandbags provide cover
                and can be destroyed by explosions.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the position contains a sandbag block; false otherwise.</returns>
        </member>
        <member name="M:Map.IsBlockSolid(GridPoint)">
            <summary>
                Checks if the block at a grid point position is solid and blocks movement.
                Convenience overload that accepts a GridPoint structure.
            </summary>
            <param name="gp">The grid point containing column and row coordinates.</param>
            <returns>True if the block is solid and blocks movement; false if empty or passable.</returns>
        </member>
        <member name="M:Map.IsBlockSolid(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified grid position is solid and blocks movement.
                Solid blocks prevent units from passing through, except for ladder types which are
                climbable.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the block is solid and blocks movement (including out-of-bounds positions); false if empty, destroyed, or a climbable ladder type.</returns>
        </member>
        <member name="M:Map.IsBlockSolidTerrain(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position is solid terrain (earth, rock, metal,
                etc). Used to distinguish terrain blocks from other solid objects.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the block is solid terrain or position is out of bounds; false if empty, destroyed, or non-terrain block type.</returns>
        </member>
        <member name="M:Map.IsBlockSolidTerrain(GroundType,System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position is solid according to the ground type
                rules. Overload that accepts a ground type parameter (though it's not used in the
                implementation).
            </summary>
            <param name="groundType">The ground type parameter (unused in current implementation).</param>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the position is out of bounds or contains a solid ground type; false if empty or non-solid.</returns>
        </member>
        <member name="M:Map.IsBlockSolidToWater(System.Int32,System.Int32)">
            <summary>
                Checks if the block at the specified position blocks water flow. Bridges and ladders
                allow water to pass through, while solid blocks contain it.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the block prevents water flow (including out-of-bounds); false if water can pass through or no block exists.</returns>
        </member>
        <member name="M:Map.IsCheckPointAnAirdrop(System.Int32)">
            <summary>
                Determines whether a checkpoint with the specified ID is configured as an airdrop
                checkpoint. Airdrop checkpoints spawn players from above rather than on the ground.
            </summary>
            <param name="id">The checkpoint ID to check.</param>
            <returns>True if the checkpoint exists and has its airDropCheckPoint flag set, false otherwise.</returns>
        </member>
        <member name="M:Map.IsCitizenNearby(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Checks if any citizen (civilian NPC) is within a rectangular range of the specified
                position. Used for AI decisions and player actions that need to consider nearby
                civilians.
            </summary>
            <param name="x">The X coordinate to check from</param>
            <param name="y">The Y coordinate to check from</param>
            <param name="xRange">The horizontal search range in world units</param>
            <param name="yRange">The vertical search range in world units</param>
            <returns>True if at least one citizen is within the specified range, false otherwise</returns>
            <remarks>
                Iterates through the citizens list backwards and checks each citizen's position
                against the provided range. The rectangular check uses absolute distance comparisons
                for efficiency.
            </remarks>
        </member>
        <member name="M:Map.IsCollumnEmpty(System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks if a vertical column of blocks is completely empty (non-solid) within the
                specified row span. Supports both upward and downward checking based on rowSpan
                sign.
            </summary>
            <param name="c">The column index to check.</param>
            <param name="r">The starting row index.</param>
            <param name="rowSpan">The number of rows to check. Negative values check downward, positive values check upward.</param>
            <returns>True if all blocks in the specified column range are non-solid or out of bounds; false if any solid block exists.</returns>
            <remarks>
                Protected method used by jump-through detection and vertical clearance checks.
                Bounds checking ensures out-of-bounds positions are treated as empty.
            </remarks>
        </member>
        <member name="M:Map.IsForegroundBlock(System.Int32,System.Int32)">
            <summary>
                Checks if a foreground block exists at the specified grid position. Foreground
                blocks are the main terrain elements that units interact with.
            </summary>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if a foreground block exists at this position; false if the position is out of bounds or no foreground block exists.</returns>
        </member>
        <member name="M:Map.IsGround(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Checks if a grid position contains solid ground by testing for colliders at the
                block's center position.
            </summary>
            <param name="collumn">The column index of the grid position to check.</param>
            <param name="row">The row index of the grid position to check.</param>
            <param name="strictlyGround">If true, only checks ground layers; if false, includes additional collision layers.</param>
            <returns>True if ground exists at the specified grid position; false otherwise.</returns>
            <remarks>
                Performs a sphere overlap check with a 6-unit radius at the block's center. Used for
                pathfinding and terrain queries at the grid level.
            </remarks>
        </member>
        <member name="M:Map.IsGroundEmpty(UnityEngine.Texture2D,System.Int32,System.Int32)">
            <summary>
                Checks if a pixel in a terrain texture represents empty space based on its alpha
                channel. Used during map generation from image data.
            </summary>
            <param name="tex">The texture to sample.</param>
            <param name="x">The X coordinate of the pixel to check.</param>
            <param name="y">The Y coordinate of the pixel to check.</param>
            <returns>True if the pixel's alpha value is less than 0.94 (mostly transparent); false if opaque.</returns>
            <remarks>
                Protected method used during map loading to distinguish between solid terrain
                (opaque pixels) and empty space (transparent pixels) in level textures.
            </remarks>
        </member>
        <member name="M:Map.IsGroundTypeSolid(GroundType)">
            <summary>
                Determines if a ground type represents solid terrain that blocks movement. Central
                method for defining which terrain types are considered solid obstacles.
            </summary>
            <param name="groundType">The ground type to check.</param>
            <returns>True if the ground type is solid and blocks movement; false for passable types like ladders, bridges, and decorative elements.</returns>
        </member>
        <member name="M:Map.IsMapOpenAboveCrate(System.Int32,System.Int32)">
            <summary>
                Checks if the map area above a crate position is sufficiently open for gameplay
                purposes.
            </summary>
            <param name="collumn">The column coordinate of the crate.</param>
            <param name="row">The row coordinate of the crate.</param>
            <returns>True if the area above is open enough; false if too many solid blocks are present.</returns>
            <remarks>
                Examines up to 3 tiles above the crate position and counts solid blocks in the upper
                portion of the map. Returns false if more than 4 solid blocks are found, indicating
                a confined space. Ladder and bridge tiles are not counted as solid blocks.
            </remarks>
        </member>
        <member name="M:Map.IsMapOpenAboveCrate(System.Int32,System.Int32)">
            <summary>
                Determines if the map area above a crate position is sufficiently open for spawn
                mechanics. Checks if there are fewer than 5 solid blocks in the upper portion of the
                map above the specified position.
            </summary>
            <param name="collumn">The column index of the crate position</param>
            <param name="row">The row index of the crate position</param>
            <returns>True if the area above is considered open (less than 5 solid blocks), false if it's too enclosed</returns>
            <remarks>
                Used to determine suitable spawn locations for items or enemies from crates. Checks
                from 9 rows below the map height to the top, counting non-empty, non-ladder, and
                non-bridge ground types. Returns true if the position is out of bounds (considered
                open).
            </remarks>
        </member>
        <member name="M:Map.IsNearActivatedCheckPoint(System.Single,System.Single,UnityEngine.Vector2@,System.Boolean@)">
            <summary>
                Checks if a position is near the current active checkpoint. Returns checkpoint
                position and airdrop status for spawn determination.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="checkPointPos">Output parameter for the checkpoint position</param>
            <param name="spawnViaAirdrop">Output parameter indicating if spawn should be via airdrop</param>
            <returns>True if near the current active checkpoint, false otherwise</returns>
        </member>
        <member name="M:Map.IsNearActivatedCheckPoint(System.Single,System.Single)">
            <summary>
                Checks if a position is near the current active checkpoint. Simplified overload that
                doesn't return checkpoint details.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <returns>True if near the current active checkpoint, false otherwise</returns>
        </member>
        <member name="M:Map.IsNearActivatedCheckPoint(System.Single,System.Single,System.Boolean@)">
            <summary>
                Checks if a position is near any activated checkpoint. Returns airdrop status but
                checks all activated checkpoints, not just the current one.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="spawnViaAirdrop">Output parameter indicating if spawn should be via airdrop</param>
            <returns>True if near any activated checkpoint, false otherwise</returns>
        </member>
        <member name="M:Map.IsOverBackground(System.Single,System.Single)">
            <summary>
                Checks if a world position has a background block at its grid location. Note:
                parameters are named incorrectly in implementation.
            </summary>
            <param name="x">The X coordinate in world units (despite being used as Y in GetCollumn).</param>
            <param name="y">The Y coordinate in world units (despite being used as Y in second GetCollumn).</param>
            <returns>True if a background block exists at the calculated grid position; false otherwise.</returns>
            <remarks>
                WARNING: This method has a bug where both parameters are converted using GetCollumn,
                when the second should use GetRow. This may cause incorrect results.
            </remarks>
        </member>
        <member name="M:Map.IsOverGround(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Checks if a position with the specified radius overlaps any ground blocks. Used for
                collision detection and grounding checks.
            </summary>
            <param name="x">The X coordinate of the center position to check.</param>
            <param name="y">The Y coordinate of the center position to check.</param>
            <param name="size">The radius of the sphere to check for ground overlap.</param>
            <param name="strictlyGround">If true, only checks against ground layers; if false, includes additional collision layers.</param>
            <returns>True if the sphere at the specified position overlaps any ground; false otherwise.</returns>
            <remarks>
                Uses Physics.OverlapSphere to detect collisions. The strictlyGround parameter
                determines whether to use groundLayerStrict (Ground and IndestructibleGround only)
                or the broader groundLayer mask.
            </remarks>
        </member>
        <member name="M:Map.IsTerrainCompatible(GroundType,GroundType)">
            <summary>
                Determines if two ground types are compatible for terrain blending or connection.
                Compatible terrains can connect seamlessly without visual breaks.
            </summary>
            <param name="sourceGroundType">The first ground type to compare.</param>
            <param name="otherGroundType">The second ground type to compare.</param>
            <returns>True if the ground types are compatible and can blend together; false if they should remain separate.</returns>
        </member>
        <member name="M:Map.IsTerrainTheSame(GroundType,System.Int32,System.Int32)">
            <summary>
                Checks if the terrain at the specified position matches the given ground type. Used
                for terrain consistency checks during modifications.
            </summary>
            <param name="sourceGroundType">The ground type to compare against.</param>
            <param name="collumn">The column index to check.</param>
            <param name="row">The row index to check.</param>
            <returns>True if the terrain at the position matches the source ground type; false if different or out of bounds.</returns>
        </member>
        <member name="M:Map.LineToPointDistance2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
            <summary>
                Calculates the minimum distance from a point to a line or line segment in 2D space.
                This method supports both infinite lines and finite line segments.
            </summary>
            <param name="pointA">The first point defining the line</param>
            <param name="pointB">The second point defining the line</param>
            <param name="pointC">The point to measure distance from</param>
            <param name="isSegment">If true, treats the line as a finite segment; if false, treats it as an infinite line</param>
            <returns>The minimum distance from pointC to the line/segment defined by pointA and pointB</returns>
            <remarks>
                For line segments, the method checks if the closest point on the line falls within
                the segment bounds. If not, it returns the distance to the nearest endpoint. Uses
                CrossProduct and DotProduct helper methods for calculations.
            </remarks>
        </member>
        <member name="M:Map.LineToPointDistance2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
            <summary>
                Calculates the shortest distance from a point to a line or line segment in 2D space.
            </summary>
            <param name="pointA">The starting point of the line or line segment.</param>
            <param name="pointB">The ending point of the line or line segment.</param>
            <param name="pointC">The point to calculate the distance from.</param>
            <param name="isSegment">If true, treats the line as a finite segment; if false, treats it as an infinite line.</param>
            <returns>The shortest distance from pointC to the line or line segment.</returns>
            <remarks>
                When isSegment is true, the method checks if the closest point on the line falls
                outside the segment bounds and returns the distance to the nearest endpoint instead.
                Uses cross product for perpendicular distance calculation and dot product for
                segment boundary checks.
            </remarks>
        </member>
        <member name="M:Map.LineToPointDistance2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
            <summary>
                Calculates the minimum distance from a point to a line or line segment in 2D space.
                This method supports both infinite lines and finite line segments.
            </summary>
            <param name="pointA">The first point defining the line</param>
            <param name="pointB">The second point defining the line</param>
            <param name="pointC">The point to measure distance from</param>
            <param name="isSegment">If true, treats the line as a finite segment; if false, treats it as an infinite line</param>
            <returns>The minimum distance from pointC to the line/segment defined by pointA and pointB</returns>
            <remarks>
                For line segments, the method checks if the closest point on the line falls within
                the segment bounds. If not, it returns the distance to the nearest endpoint. Uses
                CrossProduct and DotProduct helper methods for calculations.
            </remarks>
        </member>
        <member name="M:Map.LoadArea">
            <summary>
                Handles the loading and offset management for map areas during level transitions.
                Updates the load offset values based on whether the map is in editing mode.
            </summary>
            <remarks>
                Protected method that manages map area loading offsets. In normal gameplay, it
                preserves offset progression. In editing mode, all offsets are reset to zero. Part
                of the larger map loading system.
            </remarks>
        </member>
        <member name="M:Map.MakeBlockPersist(Block)">
            <summary>
                Marks a specific block for persistence by transferring it to the persistent blocks
                container. This is a helper method used by PersistBlocks to process individual
                blocks.
            </summary>
            <param name="block">The block to make persistent</param>
            <remarks>
                Simply calls the Persist method to reparent the block's GameObject to the persistent
                container.
            </remarks>
        </member>
        <member name="M:Map.Persist(UnityEngine.GameObject)">
            <summary>
                Transfers a GameObject to the persistent blocks container by changing its parent.
                This ensures the object survives scene transitions when persistence is enabled.
            </summary>
            <param name="go">The GameObject to make persistent</param>
            <remarks>
                Reparents the GameObject to the PersistentBlocks.Instance transform, which is marked
                as DontDestroyOnLoad to survive scene changes.
            </remarks>
        </member>
        <member name="M:Map.PersistBlocks">
            <summary>
                Enables block persistence and transfers all current foreground and background blocks
                to the persistent storage system. This allows blocks to survive level transitions
                when loading time optimizations are active.
            </summary>
            <remarks>
                Creates a persistent GameObject container if needed and iterates through all map
                blocks, marking matching persistent blocks for retention. Respects the
                dontPersistedPastLevelLoadThisLevel flag to handle special cases where persistence
                should be skipped.
            </remarks>
        </member>
        <member name="M:Map.PlaceGround(GroundType,System.Int32,System.Int32,Block[,]@,System.Boolean)">
            <summary>
                Places a ground block of the specified type at the given grid position. Handles
                block instantiation, theme application, and map state updates.
            </summary>
            <param name="placeGroundType">The type of ground block to place (Earth, Metal, Wood, etc.).</param>
            <param name="x">The column index where the block should be placed.</param>
            <param name="y">The row index where the block should be placed.</param>
            <param name="newBlocks">Reference to the 2D array of blocks being built/modified.</param>
            <param name="addToRegistry">Whether to add the block to the global block registry (default true).</param>
            <returns>The newly created Block instance, or null if placing an empty block type.</returns>
            <remarks>
                Updates highest solid block tracking for non-ladder blocks. Applies appropriate
                Z-depth offsets based on block type. Uses the active theme to determine which prefab
                to instantiate.
            </remarks>
        </member>
        <member name="M:Map.PushBlock(System.Int32,System.Int32,System.Single)">
            <summary>
                Attempts to push a block at the specified grid position with the given horizontal
                force. Blocks can only be pushed if editing mode is disabled and the block supports
                push mechanics.
            </summary>
            <param name="collumn">The column index of the block to push.</param>
            <param name="row">The row index of the block to push.</param>
            <param name="xI">The horizontal force to apply. Positive values push right, negative values push left.</param>
            <returns>True if the block was successfully pushed; false if the block can't be pushed, is already broken, or editing mode is active.</returns>
        </member>
        <member name="M:Map.PushBlock(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attempts to push a block by raycasting from a position in the specified direction.
                Uses physics raycasting to find pushable blocks along the ray.
            </summary>
            <param name="x">The X coordinate to start the raycast from.</param>
            <param name="y">The Y coordinate to start the raycast from.</param>
            <param name="xI">The horizontal force to apply. Positive values raycast right, negative values raycast left.</param>
            <param name="distance">The maximum distance to check for pushable blocks.</param>
            <returns>True if a block was found and successfully pushed; false if no pushable block was found or editing mode is active.</returns>
        </member>
        <member name="M:Map.RegisterCheckPoint(CheckPoint)">
            <summary>
                Registers a checkpoint with the map's checkpoint system and assigns it a sequential
                ID based on the current count of checkpoints. Checkpoints serve as respawn locations
                and progress markers throughout a level. Initializes the checkpoints list if it
                doesn't exist.
            </summary>
            <param name="checkPoint">The CheckPoint object to register, which will have its checkPointID set to the current checkpoint count.</param>
        </member>
        <member name="M:Map.RegisterSpawnPoint(SpawnPoint)">
            <summary>
                Registers a spawn point with the map's spawn system. Spawn points determine where
                players respawn after death or at the start of a level. Initializes the spawn points
                list if it doesn't exist.
            </summary>
            <param name="spawnPoint">The SpawnPoint object to register.</param>
        </member>
        <member name="M:Map.RemoveCheckPoint(CheckPoint)">
            <summary>
                Removes a checkpoint from the map's checkpoint tracking system. Note that this may
                invalidate checkpoint IDs for checkpoints registered after the removed one.
            </summary>
            <param name="checkPoint">The CheckPoint object to remove.</param>
        </member>
        <member name="M:Map.ReplaceCageWithAmmoAndRevives(Cage)">
            <summary>
                Replaces a single cage with ammunition and revival crates at the same position. This
                helper method handles the transformation of individual cages.
            </summary>
            <param name="cage">The cage to replace with crates</param>
            <remarks>
                Preserves the cage's position and column information before destroying it, then
                calls Create4AmmoAndRevives to spawn the replacement crates. The cage is properly
                collapsed and destroyed before replacement.
            </remarks>
        </member>
        <member name="M:Map.ReplaceCagesWithAmmoAndRevives">
            <summary>
                Replaces all cages in the current map with ammunition and revival crates. This is
                typically used in specific game modes or when transitioning to different gameplay
                scenarios.
            </summary>
            <remarks>
                Iterates through the cages list backwards and calls ReplaceCageWithAmmoAndRevives
                for each valid cage. This transformation affects all cages in the level
                simultaneously.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromHorizontalSuperCheckPoint(System.Int32)">
            <summary>
                Configures the map to start from a horizontal super checkpoint with a specific
                X-axis offset.
            </summary>
            <param name="xLoadOffset">The horizontal offset in grid units for loading the level.</param>
            <remarks>
                Used for horizontal level transitions where the player needs to spawn at a specific
                X coordinate. If the offset differs from the last load offset, it triggers a reset
                of persistent blocks. The offset is clamped to a minimum of 0 to prevent negative
                values.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromHorizontalSuperCheckPoint(System.Int32)">
            <summary>
                Sets up a horizontal super checkpoint with a specific X-axis load offset. This is
                used for horizontal level transitions where the map needs to load at a specific
                horizontal position.
            </summary>
            <param name="xLoadOffset">The horizontal offset for loading the level, clamped to non-negative values</param>
            <remarks>
                If the offset differs from the last load offset, persistence is disabled for this
                level to ensure a clean transition. The offset determines where in the level the
                player spawns horizontally.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromSuperCheckPoint">
            <summary>
                Configures the map to start from a super checkpoint on the next level load.
            </summary>
            <remarks>
                Super checkpoints are special spawn points that persist across level transitions,
                typically used for major progression points or after boss battles. This method
                simply sets the flag without specifying offset values.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromSuperCheckPoint">
            <summary>
                Marks that the next level load should start from a super checkpoint. This affects
                spawn positioning and level initialization.
            </summary>
            <remarks>
                Sets the startFromSuperCheckPoint flag to true. Super checkpoints are special
                checkpoint types that typically mark major progression points or area transitions.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromVerticalSuperCheckPoint(System.Int32)">
            <summary>
                Configures the map to start from a vertical super checkpoint with a specific Y-axis
                offset.
            </summary>
            <param name="yLoadOffset">The vertical offset in grid units for loading the level.</param>
            <remarks>
                Used for vertical level transitions where the player needs to spawn at a specific Y
                coordinate. Similar to horizontal checkpoints, changing the offset resets persistent
                blocks. The offset is clamped to a minimum of 0.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromVerticalSuperCheckPoint(System.Int32)">
            <summary>
                Sets up a vertical super checkpoint with a specific Y-axis load offset. This is used
                for vertical level transitions where the map needs to load at a specific vertical
                position.
            </summary>
            <param name="yLoadOffset">The vertical offset for loading the level, clamped to non-negative values</param>
            <remarks>
                If the offset differs from the last load offset, persistence is disabled for this
                level to ensure a clean transition. The offset determines where in the level the
                player spawns vertically.
            </remarks>
        </member>
        <member name="M:Map.SetTryReduceLoadingTimes(System.Boolean)">
            <summary>
                Enables or disables the loading time optimization system. When enabled, the map will
                attempt to persist certain blocks between level loads to reduce loading times.
            </summary>
            <param name="actuallyTry">True to enable loading time optimizations, false to disable them</param>
            <remarks>
                This optimization system works in conjunction with the block persistence methods
                (PersistBlocks, DontPersistBlocks) to maintain certain map elements across level
                transitions.
            </remarks>
        </member>
        <member name="M:Map.TryingToReduceLoadingTimes">
            <summary>
                Checks whether the loading time optimization system is currently active. Returns
                true only if optimizations are enabled, the level editor is not active, and the
                asset pool is not disabled.
            </summary>
            <returns>True if loading time optimizations are active and available, false otherwise</returns>
            <remarks>
                This method verifies multiple conditions to ensure optimizations are appropriate for
                the current game state. It's used by various persistence-related methods to
                determine whether to maintain blocks between level loads.
            </remarks>
        </member>
        <member name="M:Map.WasBlockEarth(System.Int32,System.Int32)">
            <summary>
                Checks if the original map data at the specified position contained earth-like
                terrain. Uses map load offsets to check the original terrain type before any
                modifications.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the original terrain was earth-like (including various earth, stone, and background types); false otherwise.</returns>
        </member>
        <member name="M:Map.WasBlockOriginallyAir(System.Int32,System.Int32)">
            <summary>
                Checks if the original map data at the specified position was air or empty. Used to
                determine if a position was originally passable before modifications.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the original terrain was air or empty; true for out-of-bounds positions.</returns>
        </member>
        <member name="M:Map.WasBlockOriginallySolid(System.Int32,System.Int32)">
            <summary>
                Checks if the original map data at the specified position contained solid terrain.
                Comprehensive check for all solid terrain types in the original map data.
            </summary>
            <param name="collumn">The column index to check (relative to current map offset).</param>
            <param name="row">The row index to check (relative to current map offset).</param>
            <returns>True if the original terrain was any solid type or position is out of bounds; false if originally empty or air.</returns>
        </member>
        <!-- Position & Physics Fields -->
        <member name="F:Map.TileSize">
            <summary>
                The size of a single tile in the map grid system, measured in world units. This
                constant defines the fundamental unit of measurement for the Map's grid-based
                coordinate system.
            </summary>
            <remarks>
                Set to 16 units, this value is used throughout the codebase for converting between
                grid coordinates and world positions. Related constants include HalfTileSize (8) for
                half-tile calculations.
            </remarks>
        </member>
        <member name="F:Map.TileSize">
            <summary>
                The standard tile size in pixels used throughout the map grid system.
            </summary>
            <remarks>
                This constant defines the base unit of the map's grid system. All block positions,
                collision checks, and grid calculations use this 16-pixel tile size as the
                fundamental measurement unit.
            </remarks>
        </member>
        <member name="F:Map.TileSize">
            <summary>
                The size of a single tile in the map grid system, measured in world units. This
                constant defines the fundamental unit of measurement for the Map's grid-based
                coordinate system.
            </summary>
            <remarks>
                Set to 16 units, this value is used throughout the codebase for converting between
                grid coordinates and world positions. Related constants include HalfTileSize (8) for
                half-tile calculations.
            </remarks>
        </member>
        <member name="F:Map.barrierLayer">
            <summary>
                LayerMask for the MobileBarriers layer. Used to detect movable barriers and
                obstacles that can block movement or projectiles but may be pushable or
                destructible.
            </summary>
        </member>
        <member name="F:Map.cameraBlockers">
            <summary>
                List of objects that block or influence camera movement. Camera blockers are
                registered via RegisterCameraBlocker and removed via RemoveCameraBlocker. Used by
                the camera system to prevent viewing certain areas or to create cinematic
                boundaries. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.checkPoints">
            <summary>
                Static list tracking all checkpoint objects in the current map. Checkpoints are
                added via RegisterCheckPoint() and removed via DeregisterCheckPoint(). Used for
                respawn mechanics and progress tracking.
            </summary>
        </member>
        <member name="F:Map.defaultLayer">
            <summary>
                LayerMask for Unity's Default layer. Used for general-purpose collision detection
                with objects that haven't been assigned to a specific gameplay layer.
            </summary>
        </member>
        <member name="F:Map.exitPortalPrefabReference">
            <summary>
                Reference to the level exit portal prefab. Used by CreateExitPortal() to instantiate
                exit portals at specified positions. The portal is placed 112 units above the given
                position with a 16-unit horizontal offset.
            </summary>
        </member>
        <member name="F:Map.fragileLayer">
            <summary>
                LayerMask for the DirtyHippie layer. Despite the unusual name, this layer is used
                for fragile or easily breakable objects in the game world that can be destroyed by
                minimal force.
            </summary>
        </member>
        <member name="F:Map.groundAndDamageableObjects">
            <summary>
                LayerMask combining Ground, IndestructibleGround, LargeObjects, and FLUI layers.
                Extended ground collision mask that includes damageable objects, used for
                comprehensive collision detection in combat and damage calculations.
            </summary>
        </member>
        <member name="F:Map.groundLayer">
            <summary>
                LayerMask combining Ground, IndestructibleGround, and LargeObjects layers. Used for
                general ground collision detection including destructible terrain, permanent
                terrain, and large solid objects. This is the primary collision mask for most
                ground-based physics queries.
            </summary>
        </member>
        <member name="F:Map.groundLayerStrict">
            <summary>
                LayerMask combining only Ground and IndestructibleGround layers, excluding
                LargeObjects. Used for strict terrain-only collision detection when large objects
                should be ignored, such as certain movement or placement checks.
            </summary>
        </member>
        <member name="F:Map.hangingLayer">
            <summary>
                LayerMask for the Hanging layer. Used to detect overhead bars, ropes, and other
                objects that units can hang from or traverse hand-over-hand.
            </summary>
        </member>
        <member name="F:Map.highestSolidBlock">
            <summary>
                Tracks the Y coordinate of the highest solid block placed on the map. Updated during
                PlaceGround when placing solid blocks (excluding ladders and empty spaces). Used by
                CollapseTop to determine where to start collapsing terrain from the top. Minimum
                value is clamped to 11 during collapse operations.
            </summary>
        </member>
        <member name="F:Map.highestSolidBlockLadder">
            <summary>
                Tracks the Y coordinate 5 blocks above the highest solid block. Updated alongside
                highestSolidBlock during PlaceGround operations. Set to highestSolidBlock + 5 when a
                new highest solid block is placed.
            </summary>
        </member>
        <member name="F:Map.ladderLayer">
            <summary>
                LayerMask for the Ladders layer. Used to detect climbable ladder objects that allow
                vertical movement when units interact with them.
            </summary>
        </member>
        <member name="F:Map.largeObjectsLayer">
            <summary>
                LayerMask for the LargeObjects layer only. Used to specifically detect collision
                with large environmental objects that are separate from terrain, such as vehicles,
                large props, or destructible structures.
            </summary>
        </member>
        <member name="F:Map.maxCollumnActive">
            <summary>
                The rightmost column index currently active in the block deactivation system.
                Defaults to 256. Updated by RunDeactivationOffscreen() to optimize performance by
                deactivating off-screen blocks.
            </summary>
        </member>
        <member name="F:Map.maxUnitX">
            <summary>
                Maximum X position of active units used for extending the visible area. The
                offscreen deactivation system tracks unit positions to ensure blocks near active
                units remain loaded. Reset to -100001f when recalculating boundaries and updated via
                ExtendDisableToUnitPosition.
            </summary>
        </member>
        <member name="F:Map.maxUnitY">
            <summary>
                Maximum Y position of active units used for extending the visible area. The
                offscreen deactivation system tracks unit positions to ensure blocks near active
                units remain loaded. Reset to -100001f when recalculating boundaries and updated via
                ExtendDisableToUnitPosition.
            </summary>
        </member>
        <member name="F:Map.minCollumnActive">
            <summary>
                The leftmost column index currently active in the block deactivation system. Updated
                by RunDeactivationOffscreen() to track which blocks should be active based on camera
                position.
            </summary>
        </member>
        <member name="F:Map.minRowActive">
            <summary>
                The bottom row index currently active in the block deactivation system. Updated by
                RunDeactivationOffscreen() to track which blocks should be active based on camera
                position.
            </summary>
        </member>
        <member name="F:Map.minUnitX">
            <summary>
                Minimum X position of active units used for extending the visible area. The
                offscreen deactivation system tracks unit positions to ensure blocks near active
                units remain loaded. Reset to 100001f when recalculating boundaries and updated via
                ExtendDisableToUnitPosition.
            </summary>
        </member>
        <member name="F:Map.minUnitY">
            <summary>
                Minimum Y position of active units used for extending the visible area. The
                offscreen deactivation system tracks unit positions to ensure blocks near active
                units remain loaded. Reset to 100001f when recalculating boundaries and updated via
                ExtendDisableToUnitPosition.
            </summary>
        </member>
        <member name="F:Map.nearestCheckPoint">
            <summary>
                Temporary storage for the nearest checkpoint found during proximity searches. Used
                by GetNearestCheckpoint methods to track the closest checkpoint while iterating
                through all checkpoints. This field optimizes performance during frequent checkpoint
                proximity checks.
            </summary>
        </member>
        <member name="F:Map.platformLayer">
            <summary>
                LayerMask for the Platform layer. Used to detect one-way platforms that units can
                jump through from below but stand on from above, common in platformer gameplay
                mechanics.
            </summary>
        </member>
        <member name="F:Map.spawnPointInvisiblePrefabReference">
            <summary>
                Reference to the invisible spawn point prefab. Instantiated for spawn points that
                should function without visual indicators. Used via
                spawnPointInvisiblePrefabReference.Asset during map generation.
            </summary>
        </member>
        <member name="F:Map.spawnPointOffset">
            <summary>
                Random offset applied to spawn point selection to vary player starting positions.
                Initialized to a random value between 0 and 55 during map setup. Used when
                calculating spawn positions by adding this offset to the player number before modulo
                operation with total spawn points.
            </summary>
        </member>
        <member name="F:Map.spawnPointPrefabReference">
            <summary>
                Reference to the standard visible spawn point prefab. Instantiated when placing
                regular spawn points that show a visual indicator. Typically paired with an empty
                cage doodad placed above it.
            </summary>
        </member>
        <member name="F:Map.spawnPoints">
            <summary>
                List of player spawn points in the map. Spawn points are registered via
                RegisterSpawnPoint. Used by GetSpawnPointPos and GetSpawnPoint to determine where
                players spawn, cycling through points based on player number and spawnPointOffset.
                Critical for multiplayer spawn distribution. Initialized in Awake() and set to null
                in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.startFromSuperCheckPoint">
            <summary>
                Indicates whether the player should start from a super checkpoint position instead
                of normal spawn points. When true, uses superCheckpointStartPos for the player's
                starting location. Reset to false during ClearSuperCheckpointStatus.
            </summary>
        </member>
        <member name="F:Map.superCheckpointStartPos">
            <summary>
                The grid position where players spawn when starting from a super checkpoint. Used in
                conjunction with startFromSuperCheckPoint to override normal spawn behavior. Both
                column and row are set to -1 when cleared, indicating no super checkpoint is active.
            </summary>
        </member>
        <member name="F:Map.switchesLayer">
            <summary>
                LayerMask for the Switches layer. Used to detect interactive switch objects that can
                trigger events, open doors, or activate mechanisms when interacted with by units.
            </summary>
        </member>
        <member name="F:Map.unitLayer">
            <summary>
                LayerMask for the Units layer. Used to detect collision with units (enemies,
                players, NPCs) for combat targeting, movement blocking, and interaction checks.
            </summary>
        </member>
        <member name="F:Map.unitOffsetCount">
            <summary>
                Counter used by GetUnitXOffset() to generate pseudo-random X position offsets for
                units. Incremented each time an offset is requested to create variation in unit
                placement.
            </summary>
        </member>
        <member name="F:Map.victoryLayer">
            <summary>
                LayerMask for the Finish layer. Used to detect level completion triggers and victory
                zones that end the level when reached by players.
            </summary>
        </member>
        <member name="F:Map.waterLayer">
            <summary>
                LayerMask for the Water layer. Used to detect water volumes for swimming mechanics,
                drowning checks, and water-specific physics interactions.
            </summary>
        </member>
        <!-- Environmental Objects Methods -->
        <member name="M:Map.BloodyDoodads(System.Single,System.Single,System.Single)">
            <summary>
                Applies blood effects to decal doodads within a circular range of the specified
                position. Iterates through decal doodads up to the count of destroyable doodads and
                calls the Bloody() method on doodads within range, decreasing the iteration index
                when a doodad is bloodied to account for potential list modifications.
            </summary>
            <param name="x">The X coordinate of the blood effect center.</param>
            <param name="y">The Y coordinate of the blood effect center.</param>
            <param name="range">The radius within which doodads will be bloodied.</param>
        </member>
        <member name="M:Map.CallFakeHelicopter(UnityEngine.Vector2,System.Single)">
            <summary>
                Summons a fake helicopter to the specified position after a delay. The fake
                helicopter is a visual-only helicopter used for cinematic sequences that doesn't
                interact with gameplay.
            </summary>
            <param name="position">The target position for the helicopter</param>
            <param name="delay">The delay in seconds before the helicopter appears</param>
            <remarks>
                Creates a single shared instance of HelicopterFake if one doesn't exist. The fake
                helicopter is typically used for background effects or scripted sequences where a
                full helicopter entity isn't needed.
            </remarks>
        </member>
        <member name="M:Map.DamageBackground(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Damages background and foreground blocks within a circular radius. This method is
                used for explosive damage that affects the destructible terrain behind the main play
                area.
            </summary>
            <param name="damageSender">The MonoBehaviour that is causing the damage (used for damage attribution)</param>
            <param name="damage">The amount of damage to apply to blocks</param>
            <param name="radius">The radius of the damage effect in world units</param>
            <param name="x">The X coordinate of the damage center</param>
            <param name="y">The Y coordinate of the damage center</param>
            <remarks>
                Calculates which grid cells fall within the damage radius and applies damage to both
                background and foreground blocks. Uses MapController.Damage_Networked to ensure
                damage is synchronized across all clients. The damage type is specifically set to
                DestroyBackground.
            </remarks>
        </member>
        <member name="M:Map.DamageDoodads(System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean@,UnityEngine.MonoBehaviour)">
            <summary>
                Damages destroyable doodads within a circular range, applying damage based on player
                permissions and doodad properties. Checks if doodads can be damaged by mooks (if
                playerNum is negative) or heroes, respects immunity flags, and tracks whether
                impenetrable doodads were hit.
            </summary>
            <param name="damage">The amount of damage to apply to doodads.</param>
            <param name="damageType">The type of damage being applied.</param>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <param name="xI">The horizontal force component for the damage.</param>
            <param name="yI">The vertical force component for the damage.</param>
            <param name="range">The radius within which doodads will be damaged.</param>
            <param name="playerNum">The player number causing the damage (negative values indicate mook damage).</param>
            <param name="hitImpenetrableDoodad">Output parameter set to true if an impenetrable doodad was hit.</param>
            <param name="sender">The MonoBehaviour that caused the damage (optional).</param>
            <returns>True if at least one doodad was damaged, false otherwise.</returns>
        </member>
        <member name="M:Map.DamageStaticDoodads(System.Single,System.Single,System.Single,System.Single,System.Single,UnityEngine.MonoBehaviour)">
            <summary>
                Damages static doodads within a circular range by causing them to collapse. Iterates
                through the static doodads list in reverse order and collapses any doodads within
                the specified range.
            </summary>
            <param name="x">The X coordinate of the damage center.</param>
            <param name="y">The Y coordinate of the damage center.</param>
            <param name="xI">The horizontal force component (currently unused in implementation).</param>
            <param name="yI">The vertical force component (currently unused in implementation).</param>
            <param name="range">The radius within which static doodads will be damaged.</param>
            <param name="sender">The MonoBehaviour that caused the damage (optional, currently unused).</param>
            <returns>True if at least one static doodad was damaged, false otherwise.</returns>
        </member>
        <member name="M:Map.DisturbAlienEggs(System.Single,System.Single,System.Int32)">
            <summary>
                Alerts alien eggs within a 64-unit radius of a position. Used to trigger alien egg
                reactions when players get too close.
            </summary>
            <param name="x">The X coordinate to check from</param>
            <param name="y">The Y coordinate to check from</param>
            <param name="playerNum">The player number disturbing the eggs (unused in current implementation)</param>
        </member>
        <member name="M:Map.DisturbWildLife(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Disturbs wildlife and alerts units within hearing range of a sound. Wildlife uses
                hearing range multipliers, units check their hearing capabilities and player
                allegiance.
            </summary>
            <param name="x">The X coordinate of the disturbance</param>
            <param name="y">The Y coordinate of the disturbance</param>
            <param name="range">The base range of the disturbance</param>
            <param name="playerNum">The player number causing the disturbance (-1 skips unit alerts)</param>
        </member>
        <member name="M:Map.GeTargetableObjectsInRange(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Gets all enemy targetable objects within a circular range. Uses Manhattan distance
                (sum of X and Y distances) for range calculation.
            </summary>
            <param name="playerNum">The player number searching for targets</param>
            <param name="range">The maximum Manhattan distance to search within</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>A list of all targetable objects within range that are enemies of the specified player</returns>
        </member>
        <member name="M:Map.GetDoodadVariationAmount(DoodadType)">
            <summary>
                Gets the number of available variations for a specific doodad type. Used to
                determine valid variation indices when spawning doodads.
            </summary>
            <param name="type">The type of doodad to check variations for</param>
            <returns>The number of available variations for the doodad type</returns>
        </member>
        <member name="M:Map.GetNearbyMookSwitch(System.Single,System.Single)">
            <summary>
                Finds any switch that can be activated by mooks (enemies) within range. Filters for
                switches with mook activation permissions.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The nearest mook-activatable switch, checking both registered list and physics overlaps, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearbySwitch(System.Single,System.Single)">
            <summary>
                Finds any switch within interaction range of the specified position. Checks both
                registered switches list and physics overlaps.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The nearest switch within 16 units horizontally and 24 units vertically, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearbyTeleportDoor(System.Single,System.Single)">
            <summary>
                Finds any teleport door within interaction range of the specified position. Used for
                teleporter entrance detection.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The nearest teleport door within 32 units horizontally and 24 units vertically, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestAcid(System.Single,System.Single,System.Single)">
            <summary>
                Finds the nearest acid pool within the specified range that doesn't fully submerge
                units. Iterates through all registered acid pools and returns the first one within
                range that either is null or doesn't submerge units (SubMergesUnit returns false).
            </summary>
            <param name="x">The X coordinate to search from.</param>
            <param name="y">The Y coordinate to search from.</param>
            <param name="range">The maximum distance to search for acid pools.</param>
            <returns>The nearest DoodadAcidPool within range that doesn't fully submerge units, or null if none found.</returns>
        </member>
        <member name="M:Map.GetNextClosestTargetableObject(System.Int32,DirectionEnum,System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.List{TargetableObject})">
            <summary>
                Finds the next closest targetable object (destructible environment pieces) in a
                specified direction. Used for target cycling systems.
            </summary>
            <param name="playerNum">The player number searching for targets</param>
            <param name="direction">The direction to search in (Up, Down, Left, Right, or Any)</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="alreadyFoundTargets">List of targets to exclude from the search</param>
            <returns>The next closest targetable object in the specified direction, or null if none found</returns>
        </member>
        <member name="M:Map.GetNextClosestTargetableObjectOnScreen(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the closest targetable object that is currently visible on screen. Can
                optionally filter for boss-specific targets only.
            </summary>
            <param name="playerNum">The player number searching for targets</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="onlyBossTargets">If true, only returns objects marked as boss targets</param>
            <returns>The closest on-screen targetable object, or null if none found</returns>
        </member>
        <member name="M:Map.GetOtherZiplinePoint(ZiplinePoint)">
            <summary>
                Finds and returns the paired endpoint for a given zipline point.
            </summary>
            <param name="zipLinePoint">The zipline point to find a pair for</param>
            <returns>The other endpoint of the zipline, or null if no valid pair exists</returns>
            <remarks>
                This complex method searches through the map's doodad list to find zipline
                connections. It first locates the input point in the doodad list, then checks its
                TagAsGridPoint for a tagged connection. If found, it searches for another zipline at
                those coordinates. If no tag exists, it searches backwards through previous doodads
                for an unpaired zipline. This system allows both explicit zipline connections (via
                tags) and implicit pairing (sequential in the doodad list). The method ensures
                ziplines are properly connected in pairs for gameplay functionality.
            </remarks>
        </member>
        <member name="M:Map.GetStaticDoodad(System.Int32,System.Int32)">
            <summary>
                Retrieves a static doodad at the specified grid coordinates. Iterates through all
                registered static doodads to find one matching the given column and row position.
            </summary>
            <param name="collumn">The column coordinate in the map grid to search. Note: Parameter name contains a typo ("collumn").</param>
            <param name="row">The row coordinate in the map grid to search.</param>
            <returns>The Doodad at the specified grid position, or null if no static doodad exists at that location.</returns>
        </member>
        <member name="M:Map.HurtWildLife(System.Single,System.Single,System.Single)">
            <summary>
                Damages wildlife within range of a position. Only affects already disturbed
                wildlife, with vertical range 3x the horizontal range.
            </summary>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="range">The horizontal range for damaging wildlife</param>
        </member>
        <member name="M:Map.IsInSubstance(System.Single,System.Single,System.Single)">
            <summary>
                Checks if a position is within a substance (submerging) doodad like water, acid, or
                quicksand. Iterates through all grass/blood doodads and finds those that submerge
                units within range.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="range">The range to check for substance doodads</param>
            <returns>The first substance doodad found at the position, or null if none found</returns>
        </member>
        <member name="M:Map.JiggleDoodads(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Applies jiggle physics to doodads within range of a position. Forces are calculated
                based on distance from center and applied to grass/blood doodads, also triggers
                slime jiggling.
            </summary>
            <param name="x">The X coordinate of the jiggle origin</param>
            <param name="y">The Y coordinate of the jiggle origin</param>
            <param name="xRange">The horizontal range of the jiggle effect</param>
            <param name="yRange">The vertical range of the jiggle effect</param>
            <param name="force">The force multiplier (multiplied by 100 before applying)</param>
        </member>
        <member name="M:Map.JiggleSlime(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Jiggles slime doodads that contain a position within their bounds. Checks if
                position is within slime bounds (accounting for width/height) and applies horizontal
                force.
            </summary>
            <param name="x">The X coordinate to check for slime</param>
            <param name="y">The Y coordinate to check for slime</param>
            <param name="xRange">The horizontal range (unused in current implementation)</param>
            <param name="yRange">The vertical range (unused in current implementation)</param>
        </member>
        <member name="M:Map.PassThroughScenery(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Checks if a position passes through damageable scenery and knocks it. Used to
                interact with destructible environmental objects like crates or barrels.
            </summary>
            <param name="x">The X coordinate to check</param>
            <param name="y">The Y coordinate to check</param>
            <param name="xI">The horizontal velocity for knocking</param>
            <param name="yI">The vertical velocity for knocking</param>
            <returns>True if any scenery was knocked, false otherwise</returns>
        </member>
        <member name="M:Map.PlaceDoodad(DoodadInfo)">
            <summary>
                Places a doodad (decorative or interactive object) in the map based on the provided
                doodad information. Handles spawning of all doodad types including enemies, traps,
                checkpoints, cages, vehicles, decorations, and special objects. Applies variation
                selection, position adjustment, and game mode specific modifications.
            </summary>
            <param name="doodad">The doodad information containing type, position, variation, and other spawn data</param>
            <returns>The instantiated GameObject for the doodad, or null if spawning conditions aren't met</returns>
        </member>
        <member name="M:Map.RegisterAlienEggExplosive(AlienEggExplosive)">
            <summary>
                Registers an alien egg explosive with the map's tracking system. Alien eggs are
                environmental hazards that can explode when damaged or triggered, spawning
                facehuggers or dealing area damage to nearby units.
            </summary>
            <param name="egg">The AlienEggExplosive object to register.</param>
        </member>
        <member name="M:Map.RegisterAlienTelepathyTrigger(AlienTelepathyTrigger)">
            <summary>
                Registers an alien telepathy trigger with the map's tracking system. These triggers
                are special environmental objects that activate telepathic alien behaviors when
                players enter their trigger zones, potentially alerting or controlling nearby alien
                units.
            </summary>
            <param name="alien">The AlienTelepathyTrigger object to register.</param>
        </member>
        <member name="M:Map.RegisterCage(Cage)">
            <summary>
                Registers a cage object with the map's tracking system. Cages are interactive
                objects that typically contain prisoners or power-ups that can be freed by
                destroying the cage. Initializes the cages list if it doesn't exist.
            </summary>
            <param name="cage">The Cage object to register for tracking.</param>
        </member>
        <member name="M:Map.RegisterCameraBlocker(CameraBlockers)">
            <summary>
                Registers a camera blocker object that restricts camera movement in specific areas.
                Camera blockers are used to create boundaries that prevent the camera from moving
                beyond certain points, typically used for level boundaries or cinematic sequences.
            </summary>
            <param name="cB">The CameraBlockers object to register.</param>
        </member>
        <member name="M:Map.RegisterDamageableScenerye(DamageableScenery)">
            <summary>
                Registers a DamageableScenery object with the map's scenery tracking system.
                Prevents duplicate registrations and initializes the damageableScenery list if it
                doesn't exist. Note: Method name contains a typo ("Scenerye").
            </summary>
            <param name="tree">The DamageableScenery to register.</param>
        </member>
        <member name="M:Map.RegisterDecalDoodad(Doodad)">
            <summary>
                Registers a decal doodad with the map's tracking system. Decal doodads are visual
                elements like blood splatters or burn marks that can be applied to surfaces and
                affected by environmental effects. Initializes the decal doodads list if it doesn't
                exist.
            </summary>
            <param name="doodad">The Doodad object representing a decal to register.</param>
        </member>
        <member name="M:Map.RegisterDestroyableDoodad(Doodad)">
            <summary>
                Registers a destroyable doodad (decorative object) with the map's tracking system.
                Doodads include environmental props like barrels, crates, signs, and other
                destructible scenery that adds visual detail and can be destroyed for effect.
            </summary>
            <param name="doodad">The Doodad object to register as destroyable.</param>
        </member>
        <member name="M:Map.RegisterGrassAndBlood(Doodad)">
            <summary>
                Registers a grass or blood doodad with the map's substance tracking system. If the
                doodad is an acid pool (DoodadAcidPool), it is also added to the specialized acid
                pools list for additional tracking. Prevents duplicate registrations by checking if
                the doodad already exists in the list.
            </summary>
            <param name="doodad">The Doodad object to register, which can be grass, blood, acid, or other liquid substances.</param>
        </member>
        <member name="M:Map.RegisterHelicopter(Helicopter)">
            <summary>
                Registers a helicopter with the map by setting it as the newest helicopter
                reference. This static reference is used by various systems to interact with the
                most recently spawned helicopter on the map.
            </summary>
            <param name="heli">The Helicopter object to register as the newest helicopter.</param>
        </member>
        <member name="M:Map.RegisterJigglyBit(Doodad)">
            <summary>
                Registers a jiggly slime doodad with the map's tracking system. Jiggly bits are
                special doodads that exhibit physics-based jiggling behavior when affected by
                explosions or other forces.
            </summary>
            <param name="doodad">The Doodad object representing jiggly slime to register.</param>
        </member>
        <member name="M:Map.RegisterMookDoor(MookDoor)">
            <summary>
                Registers a MookDoor with the map's door tracking system. Initializes the mookDoors
                list if it doesn't exist.
            </summary>
            <param name="door">The MookDoor to register.</param>
        </member>
        <member name="M:Map.RegisterStaticDoodad(Doodad)">
            <summary>
                Registers a static doodad with the map's tracking system. Static doodads are
                non-moving environmental objects that can be damaged or collapsed but don't have
                special behaviors like jiggly physics. Initializes the static doodads list if it
                doesn't exist.
            </summary>
            <param name="doodad">The Doodad object to register as a static environmental element.</param>
        </member>
        <member name="M:Map.RegisterSwitch(Switch)">
            <summary>
                Registers a Switch with the map's switch tracking system. Initializes the switches
                list if it doesn't exist.
            </summary>
            <param name="swit">The Switch to register.</param>
        </member>
        <member name="M:Map.RegisterTeleportDoor(TeleportDoor)">
            <summary>
                Registers a TeleportDoor with the map's teleport system. Adds the door to the
                general teleportDoors list and also to either entranceDoors or exitDoors based on
                the door's isEntranceDoor property.
            </summary>
            <param name="teleportDoor">The TeleportDoor to register.</param>
        </member>
        <member name="M:Map.RegisterTreeFoliage(TreeFoliage)">
            <summary>
                Registers a tree foliage object with the map's tracking system for environmental
                effects. Tree foliage includes palm trees and other vegetation that can shake when
                affected by explosions or other forces, creating visual feedback for nearby impacts.
            </summary>
            <param name="tree">The TreeFoliage object to register for tracking.</param>
        </member>
        <member name="M:Map.RemoveAlienEggExplosive(AlienEggExplosive)">
            <summary>
                Removes an alien egg explosive from the map's tracking system, typically after it
                has exploded or been destroyed. This ensures the egg is no longer considered for
                gameplay interactions or AI targeting.
            </summary>
            <param name="egg">The AlienEggExplosive object to remove from tracking.</param>
        </member>
        <member name="M:Map.RemoveAlienTelepathyTrigger(AlienTelepathyTrigger)">
            <summary>
                Removes an alien telepathy trigger from the map's tracking system, typically when
                the trigger is destroyed or no longer needed. This prevents the trigger from
                continuing to affect alien behavior after it should be inactive.
            </summary>
            <param name="alien">The AlienTelepathyTrigger object to remove from tracking.</param>
        </member>
        <member name="M:Map.RemoveCage(Cage)">
            <summary>
                Removes a cage from the map's tracking system, typically after it has been destroyed
                and its contents freed. Checks if the cages list exists before attempting removal.
            </summary>
            <param name="cage">The Cage object to remove from tracking.</param>
        </member>
        <member name="M:Map.RemoveCameraBlocker(CameraBlockers)">
            <summary>
                Removes a camera blocker from the map's tracking system, allowing the camera to move
                freely through the previously blocked area. This is typically called when a blocker
                is destroyed or when transitioning between level sections.
            </summary>
            <param name="cB">The CameraBlockers object to remove from tracking.</param>
        </member>
        <member name="M:Map.RemoveDecalDoodad(Doodad)">
            <summary>
                Removes a decal doodad from the map's tracking system, typically when cleaning up
                visual effects or when the decal is no longer needed.
            </summary>
            <param name="doodad">The Doodad object representing a decal to remove.</param>
        </member>
        <member name="M:Map.RemoveDestroyableDoodad(Doodad)">
            <summary>
                Removes a destroyable doodad from the map's tracking system. This method is
                typically called when a doodad is destroyed or no longer needs to be tracked for
                damage calculations.
            </summary>
            <param name="doodad">The Doodad object to remove from the destroyable doodads list.</param>
        </member>
        <member name="M:Map.RemoveGrassOrBlood(Doodad)">
            <summary>
                Removes a grass or blood doodad from the map's substance tracking system. If the
                doodad is an acid pool, it is also removed from the specialized acid pools list.
                Only removes the doodad if it exists in the tracking list.
            </summary>
            <param name="doodad">The Doodad object to remove from substance tracking.</param>
        </member>
        <member name="M:Map.RemoveJigglyBit(Doodad)">
            <summary>
                Removes a jiggly slime doodad from the map's tracking system, typically when the
                jiggly bit is destroyed or no longer needs physics simulation.
            </summary>
            <param name="doodad">The Doodad object representing jiggly slime to remove.</param>
        </member>
        <member name="M:Map.RemoveMookDoor(MookDoor)">
            <summary>
                Removes a MookDoor from the map's door tracking system.
            </summary>
            <param name="door">The MookDoor to remove.</param>
        </member>
        <member name="M:Map.RemoveStaticDoodad(Doodad)">
            <summary>
                Removes a static doodad from the map's tracking system, typically when it has been
                destroyed or collapsed.
            </summary>
            <param name="doodad">The Doodad object to remove from static doodad tracking.</param>
        </member>
        <member name="M:Map.RemoveSwitch(Switch)">
            <summary>
                Removes a Switch from the map's switch tracking system. This method can be called
                via network RPC.
            </summary>
            <param name="swit">The Switch to remove.</param>
        </member>
        <member name="M:Map.RemoveTeleportDoor(TeleportDoor)">
            <summary>
                Removes a TeleportDoor from all relevant tracking lists (teleportDoors,
                entranceDoors, or exitDoors based on the door's type).
            </summary>
            <param name="teleportDoor">The TeleportDoor to remove.</param>
        </member>
        <member name="M:Map.ResetZiplines">
            <summary>
                Resets all ziplines in the map and re-establishes their connections.
            </summary>
            <remarks>
                This method performs a complete reset of the zipline system in three passes: 1.
                Resets all zipline points to their default state 2. Connects ziplines that have
                explicit tag connections (TagAsGridPoint) 3. Connects remaining untagged ziplines in
                pairs based on their order in the doodad list The method ensures every zipline point
                calls SetupZipline() after finding its pair. The alternating counter in the third
                pass creates implicit pairs from sequential ziplines in the doodad list. This is
                typically called during map initialization or reset.
            </remarks>
        </member>
        <member name="M:Map.SetOilAlight(UnityEngine.Vector2,UnityEngine.Vector3)">
            <summary>
                Sets oil particles on fire by raycasting in a specific direction from an origin
                point. Used internally by explosions to ignite nearby oil.
            </summary>
            <param name="direction">Direction to check for oil particles</param>
            <param name="origin">Starting position for the raycast</param>
        </member>
        <member name="M:Map.ShakeTrees(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Shakes tree foliage within a specified range from a position. Applies force to trees
                based on their distance from the center position, also triggers doodad jiggling.
            </summary>
            <param name="x">The X coordinate of the shake origin</param>
            <param name="y">The Y coordinate of the shake origin</param>
            <param name="xRange">The horizontal range of the shake effect</param>
            <param name="yRange">The vertical range of the shake effect</param>
            <param name="force">The force multiplier for the shake effect</param>
        </member>
        <!-- Environmental Objects Fields -->
        <member name="F:Map.LevelEndExplosionActiveList">
            <summary>
                List of currently active HiddenExplosives objects creating level end explosion
                effects. Objects are moved here from the bank when MakeLevelEndExplosion is called
                and returned to the bank during map cleanup. Initialized with capacity of 10.
            </summary>
        </member>
        <member name="F:Map.LevelEndExplosionBank">
            <summary>
                Pool of inactive HiddenExplosives objects used for level end explosion effects.
                Pre-populated with 10 instances during map initialization to avoid runtime
                instantiation. Objects are moved to the active list when triggered and returned to
                this bank when the map is destroyed.
            </summary>
        </member>
        <member name="F:Map.LevelEndExplosionBankSizeInc">
            <summary>
                The initial size and increment value for the level end explosion object pool. Set to
                10, this determines how many HiddenExplosives objects are pre-instantiated in the
                bank during initialization.
            </summary>
        </member>
        <member name="F:Map.acidPools">
            <summary>
                List of acid pool hazards that damage units on contact. Acid pools are registered
                via RegisterAcidPool and removed via RemoveAcidPool. Used for environmental hazard
                mechanics and damage-over-time effects. Initialized in Awake() and set to null in
                OnDestroy().
            </summary>
        </member>
        <member name="F:Map.alienTelepathyTriggers">
            <summary>
                List of triggers for alien telepathy events. Triggers are registered via
                RegisterAlienTelepathyTrigger and removed via RemoveAlienTelepathyTrigger. Used for
                alien-specific gameplay mechanics and mind control effects. Initialized in Awake()
                and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.cages">
            <summary>
                Static list tracking all cage objects containing prisoners or collectibles. Cages
                are registered via RegisterCage() and removed via RemoveCage(). Used for rescue
                objectives and collectible tracking.
            </summary>
        </member>
        <member name="F:Map.damageableScenery">
            <summary>
                List of scenery objects that can take damage and be destroyed. Scenery is registered
                via RegisterDamageableScenery and removed via RemoveDamageableScenery. Used for
                destructible environment elements larger than doodads. Initialized in Awake() and
                set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.decalDoodads">
            <summary>
                List of decorative doodads that render as decals (e.g., blood splatters, scorch
                marks). Doodads are registered via RegisterDecalDoodad and removed via
                RemoveDecalDoodad. Used for visual environmental effects that don't affect gameplay.
                Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.destroyableDoodads">
            <summary>
                List of doodads that can be destroyed by damage (e.g., crates, barrels, destructible
                props). Doodads are registered via RegisterDestroyableDoodad and removed via
                RemoveDestroyableDoodad. Used for environmental destruction and chain reaction
                mechanics. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.entranceDoors">
            <summary>
                Subset of teleportDoors that serve as entrance portals. Entrance doors are added
                when RegisterTeleportDoor is called with an entrance-type door and removed via
                RemoveTeleportDoor. Used for level transitions and spawn point mechanics.
                Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.exitDoors">
            <summary>
                Subset of teleportDoors that serve as exit portals. Exit doors are added when
                RegisterTeleportDoor is called with an exit-type door and removed via
                RemoveTeleportDoor. Used for level completion and transition mechanics. Initialized
                in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.exitPortalNID">
            <summary>
                Network ID for the level exit portal. Allocated deterministically during map setup
                and used to register the exit portal GameObject when created via CreateExitPortal.
                The portal spawns at the specified position offset by (16, 112) pixels.
            </summary>
        </member>
        <member name="F:Map.grassAndBlood">
            <summary>
                List of grass and blood effect doodads. These are visual elements registered via
                RegisterGrassAndBloodDoodad and removed via RemoveGrassAndBloodDoodad. Used for
                organic environmental decoration and gore effects. Initialized in Awake() and set to
                null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.jigglySlime">
            <summary>
                List of jiggly slime doodads with physics-based movement. Slime doodads are
                registered via RegisterJigglySlime and removed via RemoveJigglySlime. Used for
                organic environmental effects with bouncy physics properties. Initialized in Awake()
                and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.mookDoors">
            <summary>
                Static list of all MookDoor objects in the map. Doors are registered via
                RegisterMookDoor() and removed via DeRegisterMookDoor(). Used for managing
                interactive door mechanics that enemies can open or players can destroy.
            </summary>
        </member>
        <member name="F:Map.remoteCarPrefabReference">
            <summary>
                Reference to the remote control explosive car prefab. This prefab reference allows
                the map to instantiate remote controlled explosive vehicles when required by map
                data or gameplay events.
            </summary>
        </member>
        <member name="F:Map.ropePrefabReference">
            <summary>
                Reference to the Predabro rope prefab used for spawning rope objects in the map.
                This prefab reference allows the map to instantiate rope elements when needed for
                gameplay mechanics.
            </summary>
        </member>
        <member name="F:Map.staticDoodads">
            <summary>
                List of static non-interactive doodads for decoration. Static doodads are registered
                via RegisterStaticDoodad and removed via RemoveStaticDoodad. Used for immutable
                environmental props that provide visual detail. Initialized in Awake() and set to
                null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.switches">
            <summary>
                List of all interactive switches in the map. Switches are registered via
                RegisterSwitch (which includes null-check initialization) and removed via
                RemoveSwitch. Used for puzzle mechanics and triggered events. The RegisterSwitch
                method initializes this list if null. Set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.teleportDoors">
            <summary>
                Master list of all teleport doors regardless of type. Doors are registered via
                RegisterTeleportDoor and removed via RemoveTeleportDoor. This list contains all
                doors, while entranceDoors and exitDoors contain type-specific subsets. Initialized
                in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.treeFoliage">
            <summary>
                List of tree foliage objects for jungle/forest environments. Tree foliage is
                registered via RegisterTreeFoliage and removed via RemoveTreeFoliage. Used for
                environmental decoration with potential physics interactions. Initialized in Awake()
                and set to null in OnDestroy().
            </summary>
        </member>
        <!-- Unit Management Methods -->
        <member name="M:Map.CallFakeHelicopter(UnityEngine.Vector2,System.Single)">
            <summary>
                Summons a fake helicopter to enter the scene at the specified position after a
                delay.
            </summary>
            <param name="position">The target position where the helicopter should appear.</param>
            <param name="delay">The delay in seconds before the helicopter enters.</param>
            <remarks>
                Creates a singleton fake helicopter instance if one doesn't exist. Fake helicopters
                are typically used for scripted sequences or cutscenes where player interaction is
                not required. The helicopter is reused across multiple calls.
            </remarks>
        </member>
        <member name="M:Map.Create4AmmoAndRevives(UnityEngine.Vector3,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a 2x2 arrangement of ammunition and revival crates at the specified
                position. The arrangement includes two ammo crates (top), one revive crate
                (bottom-left), and one damage crate (bottom-right).
            </summary>
            <param name="pos">The position for the top-left crate</param>
            <param name="collumn">The column index for block array placement</param>
            <param name="row">The row index for block array placement</param>
            <param name="setupBlocks">Whether to run block setup logic (connections to adjacent blocks)</param>
            <remarks>
                Sets the active theme to jungle theme for crate selection. Each crate is properly
                registered in the blocks array, networked, and initialized. If setupBlocks is true,
                establishes connections to adjacent blocks and runs FirstFrame initialization.
            </remarks>
        </member>
        <member name="M:Map.Create4AmmoAndRevives(UnityEngine.Vector3,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a 2x2 arrangement of power-up crates at the specified position.
            </summary>
            <param name="pos">The base position for the crate arrangement.</param>
            <param name="collumn">The column coordinate for block registration.</param>
            <param name="row">The row coordinate for block registration.</param>
            <param name="setupBlocks">Whether to perform block setup and initialization.</param>
            <remarks>
                Creates two ammo crates on top, one revival crate and one damage boost crate on
                bottom. Each crate is properly registered in the block grid and with the networking
                system. The jungle theme is temporarily set to ensure consistent crate types.
            </remarks>
        </member>
        <member name="M:Map.GetNearestEnemyUnit(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest enemy unit that can be damaged by the specified player. This is a
                convenience overload that calls the full GetNearestEnemyUnit with equal X and Y
                ranges.
            </summary>
            <param name="playerNum">Player number for damage checking</param>
            <param name="range">Maximum search range (used for both X and Y)</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest enemy unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestEnemyUnit(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Int32,Unit)">
            <summary>
                Finds the nearest enemy unit within specified X and Y ranges that can be damaged by
                the player. Supports directional filtering and unit exclusion.
            </summary>
            <param name="playerNum">Player number for damage checking</param>
            <param name="xRange">Maximum horizontal search range</param>
            <param name="yRange">Maximum vertical search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <param name="xDirection">Direction filter (1 for right only, -1 for left only, 0 for both)</param>
            <param name="ignoreUnit">Optional unit to exclude from the search</param>
            <returns>The nearest enemy unit matching all criteria, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestEvilUnit(System.Int32,System.Single,System.Single)">
            <summary>
                Finds the nearest evil unit (enemy) within range that is still alive. Uses Manhattan
                distance for proximity calculations and checks the IsEvil() flag on units.
            </summary>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <returns>The nearest evil unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestHero(Unit,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest hero (player character) within specified ranges, with optional
                direction filtering. Searches through the BroBase.bros list rather than general
                units.
            </summary>
            <param name="ignore">Unit to exclude from the search</param>
            <param name="direction">Direction filter (1 for right only, -1 for left only, 0 for both)</param>
            <param name="xRange">Maximum horizontal search range</param>
            <param name="yRange">Maximum vertical search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead heroes in the search</param>
            <returns>The nearest hero matching the criteria, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestUnit(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest unit belonging to a specific player within range using Manhattan
                distance. Similar to GetNearestUnitWithXBias but uses a local variable for tracking
                instead of static fields.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest unit matching the criteria, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestUnitWithXBias(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest unit belonging to a specific player within range, using Manhattan
                distance (sum of X and Y distances) for calculations. Biases search horizontally.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest unit matching the criteria, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestVisibleDeadUnit(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Finds the nearest dead unit belonging to a specific player that has line of sight
                from the search position. Uses raycasting to ensure no solid terrain blocks the
                path.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <returns>The nearest visible dead unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestVisibleUnit(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest unit belonging to a specific player that has line of sight from
                the search position. Uses raycasting to ensure visibility.
            </summary>
            <param name="playerNum">Player number to match</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest visible unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearestVisibleUnitDamagebleBy(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Finds the nearest enemy unit that has line of sight from the search position and can
                be damaged by the specified player. Combines visibility checking with damage
                relationship checking.
            </summary>
            <param name="playerNum">Player number for damage checking</param>
            <param name="range">Maximum search range</param>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="includeDead">Whether to include dead units in the search</param>
            <returns>The nearest visible enemy unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetNextClosestUnit(System.Int32,DirectionEnum,System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.List{Unit})">
            <summary>
                Finds the next closest enemy unit in a specified direction, excluding units already
                found. Used for cycling through targets.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="direction">The direction to search in (Up, Down, Left, Right, or Any)</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="alreadyFoundUnits">List of units to exclude from the search</param>
            <returns>The next closest unit in the specified direction, or null if none found</returns>
        </member>
        <member name="M:Map.GetNextClosestUnitOnScreen(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Finds the closest enemy unit that is currently visible on screen. Used for
                auto-targeting systems that should only target visible enemies.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <returns>The closest on-screen enemy unit, or null if none found</returns>
        </member>
        <member name="M:Map.GetUnitCountInRange(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Counts the number of units within a rectangular range without creating a list. More
                efficient than GetUnitsInRange when only the count is needed.
            </summary>
            <param name="xRange">Maximum horizontal distance from center</param>
            <param name="yRange">Maximum vertical distance from center</param>
            <param name="x">X position of rectangle center</param>
            <param name="y">Y position of rectangle center</param>
            <param name="includeDead">Whether to include dead units in the count</param>
            <returns>Number of units within the specified range</returns>
        </member>
        <member name="M:Map.GetUnitsInRange(System.Int32,System.Single,System.Single,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
                Populates a list with all units within a circular range of a position. Uses squared
                distance for efficiency and adds a 6 unit vertical offset to unit positions for
                center-of-mass calculations.
            </summary>
            <param name="range">Radius of the search circle</param>
            <param name="x">X position of circle center</param>
            <param name="y">Y position of circle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <param name="unitsInRange">List to populate with found units (not cleared before adding)</param>
        </member>
        <member name="M:Map.GetUnitsInRange(System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
                Returns a new list containing all units within a circular range of a position.
                Creates and returns a new list rather than populating an existing one.
            </summary>
            <param name="range">Radius of the search circle</param>
            <param name="x">X position of circle center</param>
            <param name="y">Y position of circle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <returns>New list containing all units within range</returns>
        </member>
        <member name="M:Map.GetUnitsInRange(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Collections.Generic.List{Unit})">
            <summary>
                Populates a list with all units within a rectangular range of a position. Uses
                separate X and Y ranges for rectangular area searches.
            </summary>
            <param name="xRange">Maximum horizontal distance from center</param>
            <param name="yRange">Maximum vertical distance from center</param>
            <param name="x">X position of rectangle center</param>
            <param name="y">Y position of rectangle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <param name="unitsInRange">List to populate with found units (not cleared before adding)</param>
        </member>
        <member name="M:Map.GetUnitsInRange(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Returns a new list containing all units within a rectangular range of a position.
                Creates and returns a new list rather than populating an existing one.
            </summary>
            <param name="xRange">Maximum horizontal distance from center</param>
            <param name="yRange">Maximum vertical distance from center</param>
            <param name="x">X position of rectangle center</param>
            <param name="y">Y position of rectangle center</param>
            <param name="includeDead">Whether to include dead units</param>
            <returns>New list containing all units within the rectangular range</returns>
        </member>
        <member name="M:Map.IsCitizenNearby(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Checks if any citizen (civilian NPC) is within a rectangular range of the specified
                position. Used for AI decisions and player actions that need to consider nearby
                civilians.
            </summary>
            <param name="x">The X coordinate to check from</param>
            <param name="y">The Y coordinate to check from</param>
            <param name="xRange">The horizontal search range in world units</param>
            <param name="yRange">The vertical search range in world units</param>
            <returns>True if at least one citizen is within the specified range, false otherwise</returns>
            <remarks>
                Iterates through the citizens list backwards and checks each citizen's position
                against the provided range. The rectangular check uses absolute distance comparisons
                for efficiency.
            </remarks>
        </member>
        <member name="M:Map.IsCitizenNearby(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Checks if any citizen (civilian NPC) is within the specified rectangular range.
            </summary>
            <param name="x">The X coordinate of the search center.</param>
            <param name="y">The Y coordinate of the search center.</param>
            <param name="xRange">The horizontal search range in world units.</param>
            <param name="yRange">The vertical search range in world units.</param>
            <returns>True if at least one citizen is found within range; false otherwise.</returns>
            <remarks>
                Iterates through all registered citizens and checks their distance from the center
                point. Used for gameplay mechanics that need to detect civilian presence, such as
                rescue missions or collateral damage prevention.
            </remarks>
        </member>
        <member name="M:Map.IsEnemyUnitNearby(System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Checks if any enemy unit exists within a directional range with optional line of
                sight checking. Used for AI threat detection.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xDirection">The horizontal direction constraint (-1 for left only, 1 for right only, 0 for both)</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <param name="testForVisible">If true, performs line of sight check to each potential target</param>
            <returns>True if at least one enemy unit is found that meets all criteria, false otherwise</returns>
        </member>
        <member name="M:Map.IsEnemyUnitNearby(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Checks if any enemy unit exists within the specified range in any direction.
                Simplified version without directional constraints.
            </summary>
            <param name="playerNum">The player number searching for enemies</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <returns>True if at least one enemy unit is found within range, false otherwise</returns>
        </member>
        <member name="M:Map.IsMapOpenAboveCrate(System.Int32,System.Int32)">
            <summary>
                Determines if the map area above a crate position is sufficiently open for spawn
                mechanics. Checks if there are fewer than 5 solid blocks in the upper portion of the
                map above the specified position.
            </summary>
            <param name="collumn">The column index of the crate position</param>
            <param name="row">The row index of the crate position</param>
            <returns>True if the area above is considered open (less than 5 solid blocks), false if it's too enclosed</returns>
            <remarks>
                Used to determine suitable spawn locations for items or enemies from crates. Checks
                from 9 rows below the map height to the top, counting non-empty, non-ladder, and
                non-bridge ground types. Returns true if the position is out of bounds (considered
                open).
            </remarks>
        </member>
        <member name="M:Map.IsUnitInRange(Unit,System.Int32,System.Single,System.Single)">
            <summary>
                Checks if a specific unit is within range of a position using Manhattan distance.
                Adds 6 units to the unit's Y position for center-of-mass calculations.
            </summary>
            <param name="unit">The unit to check</param>
            <param name="range">Maximum allowed distance</param>
            <param name="x">X position to measure from</param>
            <param name="y">Y position to measure from</param>
            <returns>True if the unit is within range, false otherwise</returns>
        </member>
        <member name="M:Map.IsUnitNearby(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Checks if any allied unit (same player number) exists within the specified range.
                Used for proximity detection of friendly units.
            </summary>
            <param name="playerNum">The player number to check for (finds units with same player number)</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <returns>True if at least one allied unit is found within range, false otherwise</returns>
        </member>
        <member name="M:Map.IsUnitNearby(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,Unit@)">
            <summary>
                Checks for allied units within range and returns the nearest one found. Extended
                version that provides access to the found unit.
            </summary>
            <param name="playerNum">The player number to check for (finds units with same player number)</param>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="xRange">The horizontal search range</param>
            <param name="yRange">The vertical search range</param>
            <param name="includeDeadUnits">Whether to include dead units in the search</param>
            <param name="nearestUnit">Output parameter that will contain the nearest allied unit found</param>
            <returns>True if at least one allied unit is found within range, false otherwise</returns>
        </member>
        <member name="M:Map.RegisterCitizen(Citizen)">
            <summary>
                Registers a citizen NPC with the map's unit tracking system. Citizens are
                non-combatant NPCs that can be rescued by players, react to danger, and contribute
                to level objectives or scoring.
            </summary>
            <param name="citizen">The Citizen object to register for tracking.</param>
        </member>
        <member name="M:Map.RegisterDisturbedWildLife(WildLife)">
            <summary>
                Registers a wildlife creature as disturbed, indicating it has been startled or
                agitated by player actions, explosions, or other disturbances. Disturbed wildlife
                may flee, make noise, or exhibit other panic behaviors.
            </summary>
            <param name="wildLifeObject">The WildLife object to register as disturbed.</param>
        </member>
        <member name="M:Map.RegisterUnit(Unit,System.Boolean)">
            <summary>
                Registers a Unit with the map's unit tracking system. If the unit is a Mook and
                addToStatistics is true, also registers it with the StatisticsController for kill
                tracking.
            </summary>
            <param name="unit">The Unit to register.</param>
            <param name="addToStatistics">If true and the unit is a Mook, registers it with StatisticsController for kill tracking.</param>
        </member>
        <member name="M:Map.RegisterWildLife(WildLife)">
            <summary>
                Registers a wildlife creature with the map's tracking system. Wildlife includes
                passive animals like pigs, chickens, and other creatures that populate levels and
                can react to player actions or explosions.
            </summary>
            <param name="wildLifeObject">The WildLife object to register.</param>
        </member>
        <member name="M:Map.RemoveCitizen(Citizen)">
            <summary>
                Removes a citizen from the map's unit tracking system, typically when they are
                rescued, killed, or otherwise removed from gameplay. This ensures they are no longer
                considered for AI targeting or rescue objectives.
            </summary>
            <param name="citizen">The Citizen object to remove from tracking.</param>
        </member>
        <member name="M:Map.RemoveDisturbedWildLife(WildLife)">
            <summary>
                Removes a wildlife creature from the disturbed wildlife tracking list, typically
                when it has calmed down, been killed, or is no longer in a disturbed state. This
                allows the creature to return to normal behavior patterns.
            </summary>
            <param name="wildLifeObject">The WildLife object to remove from disturbed tracking.</param>
        </member>
        <member name="M:Map.RemoveUnit(Unit)">
            <summary>
                Removes a Unit from the map's unit tracking system.
            </summary>
            <param name="unit">The Unit to remove.</param>
        </member>
        <member name="M:Map.RemoveWildLife(WildLife)">
            <summary>
                Removes a wildlife creature from the map's general tracking system, typically when
                the creature is killed, leaves the level, or is no longer needed for gameplay
                purposes.
            </summary>
            <param name="wildLifeObject">The WildLife object to remove from tracking.</param>
        </member>
        <member name="M:Map.ReplaceCageWithAmmoAndRevives(Cage)">
            <summary>
                Replaces a single cage with ammunition and revival crates at the same position. This
                helper method handles the transformation of individual cages.
            </summary>
            <param name="cage">The cage to replace with crates</param>
            <remarks>
                Preserves the cage's position and column information before destroying it, then
                calls Create4AmmoAndRevives to spawn the replacement crates. The cage is properly
                collapsed and destroyed before replacement.
            </remarks>
        </member>
        <member name="M:Map.ReplaceCageWithAmmoAndRevives(Cage)">
            <summary>
                Replaces a single cage with a 2x2 arrangement of ammunition and revival crates.
            </summary>
            <param name="cage">The cage to replace with power-up crates.</param>
            <remarks>
                Called internally by ReplaceCagesWithAmmoAndRevives. Destroys the cage and creates
                four crates in its place: two ammo crates on top and one revival crate plus one
                damage boost crate on the bottom.
            </remarks>
        </member>
        <member name="M:Map.ReplaceCagesWithAmmoAndRevives">
            <summary>
                Replaces all cages in the current map with ammunition and revival crates. This is
                typically used in specific game modes or when transitioning to different gameplay
                scenarios.
            </summary>
            <remarks>
                Iterates through the cages list backwards and calls ReplaceCageWithAmmoAndRevives
                for each valid cage. This transformation affects all cages in the level
                simultaneously.
            </remarks>
        </member>
        <member name="M:Map.ReplaceCagesWithAmmoAndRevives">
            <summary>
                Replaces all existing cages in the level with ammunition and revival crates.
            </summary>
            <remarks>
                Iterates through all registered cages and replaces each one with a 2x2 arrangement
                of power-up crates. This is typically used for game modes or difficulty settings
                where prisoner rescue is replaced with resource collection.
            </remarks>
        </member>
        <member name="M:Map.SpawnFaceBaneling(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Spawns an alien baneling (face hugger variant) at the specified position with
                initial velocity. These aliens climb on walls and ceilings to ambush players.
            </summary>
            <param name="x">The x coordinate to spawn at</param>
            <param name="y">The y coordinate to spawn at</param>
            <param name="xI">The initial x velocity</param>
            <param name="yI">The initial y velocity</param>
            <returns>The spawned AlienClimber instance</returns>
        </member>
        <member name="M:Map.SpawnFaceHugger(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Spawns an alien face hugger at the specified position with initial velocity. These
                aliens jump at players and attach to their faces.
            </summary>
            <param name="x">The x coordinate to spawn at</param>
            <param name="y">The y coordinate to spawn at</param>
            <param name="xI">The initial x velocity</param>
            <param name="yI">The initial y velocity</param>
            <returns>The spawned AlienClimber instance</returns>
        </member>
        <!-- Unit Management Fields -->
        <member name="F:Map.alienEggs">
            <summary>
                Static list tracking all alien egg explosives in the current map. Used to manage
                alien spawn points that can hatch facehuggers when disturbed or destroyed by player
                actions.
            </summary>
        </member>
        <member name="F:Map.citizens">
            <summary>
                List of civilian NPCs that need rescuing or protection. Citizens are registered via
                RegisterCitizen and removed via RemoveCitizen. Used for rescue missions and civilian
                AI behavior. The registration method prevents duplicate entries. Initialized in
                Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.disturbedWildLife">
            <summary>
                Static list of wildlife that have been disturbed by explosions or player actions.
                Wildlife are added via RegisterDisturbedWildLife() when startled and removed via
                RemoveDisturbedWildLife() when calmed or killed.
            </summary>
        </member>
        <member name="F:Map.heroWatchers">
            <summary>
                List of objects that monitor or react to hero presence. Watchers are registered via
                RegisterHeroWatcher and removed via RemoveHeroWatcher. Used for triggering events,
                cinematics, or AI behaviors based on player proximity. The registration method
                prevents duplicate entries. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.nearestUnit">
            <summary>
                Temporary storage for the nearest unit found during proximity searches. Used by
                GetNearestUnit methods to track the closest unit while iterating through all units.
                This field is used for optimization to avoid allocating new variables during
                frequent proximity checks.
            </summary>
        </member>
        <member name="F:Map.units">
            <summary>
                Static list containing all active Unit objects in the map. This is the primary
                registry for all enemies, NPCs, and other unit types. Units are added during
                spawn/creation and removed when destroyed. Used for AI targeting and game state
                management.
            </summary>
        </member>
        <member name="F:Map.wildLife">
            <summary>
                Static list tracking all wildlife creatures in the map (pigs, chickens, etc).
                Wildlife are registered via RegisterWildLife() and removed via RemoveWildLife().
                Separate from the disturbed wildlife tracking.
            </summary>
        </member>
        <!-- AI & Player Management Methods -->
        <member name="M:Map.ActivateNearbyAlienTelepathyTriggers(System.Int32,System.Int32,System.Int32)">
            <summary>
                Activates alien telepathy triggers within sensing range of the specified grid
                position.
            </summary>
            <param name="collumn">The column index of the activation source</param>
            <param name="row">The row index of the activation source</param>
            <param name="chainCount">The current chain reaction count for limiting propagation</param>
            <remarks>
                This method iterates through all registered alien telepathy triggers and activates
                those within their defined sensing range. Each trigger has its own columnSenseRange
                and rowSenseRange values that determine its activation distance. When activated,
                triggers receive the source position and an incremented chain count, allowing for
                cascading activation effects. The method processes the list in reverse order for
                safe modification during iteration. This system is used for alien enemy coordination
                and environmental reactions.
            </remarks>
        </member>
        <member name="M:Map.AddBroToHeroTransport(TestVanDammeAnim)">
            <summary>
                Adds a bro (player character) to the appropriate hero transport vehicle. Determines
                transport type based on game mode and map settings, then adds the bro to either the
                helicopter, portal, or truck transport.
            </summary>
            <param name="Bro">The bro character to add to the transport</param>
        </member>
        <member name="M:Map.AlertNearbyMooks(System.Single,System.Single,System.Single,System.Single,System.Int32,GridPoint)">
            <summary>
                Fully alerts all enemy units within a rectangular range, making them aware of a
                player at the specified position. The GridPoint parameter appears to be unused in
                the implementation.
            </summary>
            <param name="x">X position of the alert source</param>
            <param name="y">Y position of the alert source</param>
            <param name="xRange">Half-width of the rectangular alert area</param>
            <param name="yRange">Half-height of the rectangular alert area</param>
            <param name="playerNum">Player number that triggered the alert</param>
            <param name="startPoint">Grid point where the alert originated (unused in implementation)</param>
        </member>
        <member name="M:Map.AlertNearbyMooks(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Fully alerts all living enemy units within a rectangular range, making them aware of
                a player at the specified position. Only affects units with negative player numbers
                and positive health.
            </summary>
            <param name="x">X position of the alert source</param>
            <param name="y">Y position of the alert source</param>
            <param name="xRange">Half-width of the rectangular alert area</param>
            <param name="yRange">Half-height of the rectangular alert area</param>
            <param name="playerNum">Player number that triggered the alert</param>
        </member>
        <member name="M:Map.AttractAliens(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attracts all alien units within a rectangular range to move toward the specified
                position. Affects units with playerNum of -2 or units that are instances of the
                Alien class.
            </summary>
            <param name="x">X position to attract aliens toward</param>
            <param name="y">Y position to attract aliens toward</param>
            <param name="xRange">Half-width of the rectangular attraction area</param>
            <param name="yRange">Half-height of the rectangular attraction area</param>
        </member>
        <member name="M:Map.AttractMooks(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attracts all enemy units (mooks) within a rectangular range to move toward the
                specified position. Only affects units with negative player numbers (enemies).
            </summary>
            <param name="x">X position to attract units toward</param>
            <param name="y">Y position to attract units toward</param>
            <param name="xRange">Half-width of the rectangular attraction area</param>
            <param name="yRange">Half-height of the rectangular attraction area</param>
        </member>
        <member name="M:Map.BotherNearbyMooks(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Makes a sound that bothers nearby enemy units, causing them to investigate. Only
                affects living enemy units that have the ability to hear (CanHear property is true).
            </summary>
            <param name="x">X position of the sound source</param>
            <param name="y">Y position of the sound source</param>
            <param name="xRange">Half-width of the rectangular sound area</param>
            <param name="yRange">Half-height of the rectangular sound area</param>
            <param name="playerNum">Player number making the sound (currently unused in implementation)</param>
        </member>
        <member name="M:Map.CallInHeroTransportAnyway">
            <summary>
                Forces the hero transport to be called in regardless of current state. Handles
                different spawn modes (Portal, Truck, Helicopter) and calls the appropriate
                transport if it hasn't already entered the level.
            </summary>
        </member>
        <member name="M:Map.CallInTransport(UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <summary>
                Initiates the hero transport arrival sequence. Sends an RPC to all clients to
                synchronize the transport arrival.
            </summary>
            <param name="startLocation">The position where the transport should arrive</param>
            <param name="ArriveByHelicopter">Whether to use helicopter transport</param>
            <param name="ArriveByPortal">Whether to use portal transport</param>
        </member>
        <member name="M:Map.CallInTransport_RPC(UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <summary>
                RPC handler that executes the transport arrival on all clients. Activates the
                appropriate transport type and initiates its entry sequence.
            </summary>
            <param name="startLocation">The position where the transport should arrive</param>
            <param name="ArriveByHelicopter">Whether to use helicopter transport</param>
            <param name="ArriveByPortal">Whether to use portal transport</param>
        </member>
        <member name="M:Map.CanSeeNPCEnemyUnit(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Single@,System.Single@)">
            <summary>
                Searches for visible enemy units within a directional sight range with no vertical
                direction preference. Wrapper that calls the full overload with yDirection set to 0.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The direction to search in (-1 for left, 1 for right)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit</param>
            <param name="seenEnemyNum">Output parameter for the seen enemy's player number</param>
            <param name="enemyX">Output parameter for the seen enemy's X position</param>
            <param name="enemyY">Output parameter for the seen enemy's Y position</param>
            <returns>True if an enemy unit was found, false otherwise</returns>
        </member>
        <member name="M:Map.CanSeeNPCEnemyUnit(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Single@,System.Single@)">
            <summary>
                Searches for visible enemy units within a directional sight range with optional
                vertical direction filtering. Full implementation that checks line of sight and
                stealth status.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The horizontal direction to search in (-1 for left, 1 for right)</param>
            <param name="yDirection">The vertical direction preference (-1 for down, 1 for up, 0 for no preference)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit</param>
            <param name="seenEnemyNum">Output parameter for the seen enemy's player number</param>
            <param name="enemyX">Output parameter for the seen enemy's X position</param>
            <param name="enemyY">Output parameter for the seen enemy's Y position</param>
            <returns>True if an enemy unit was found that meets all criteria, false otherwise</returns>
        </member>
        <member name="M:Map.CanSeeNPCEnemyUnit(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks if any enemy unit is visible within a directional sight range without
                returning position information. Simplified version for basic visibility checks.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The direction to search in (-1 for left, 1 for right)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit</param>
            <returns>True if any enemy unit is visible within range, false otherwise</returns>
        </member>
        <member name="M:Map.CanSeeNPCEnemyUnitWithPosition(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Single@,System.Single@)">
            <summary>
                Searches for visible enemy units within a directional sight range and returns the
                first found enemy's position. Used by AI to detect player units in their field of
                view.
            </summary>
            <param name="x">The X position to search from</param>
            <param name="y">The Y position to search from</param>
            <param name="FacingDirection">The direction to search in (-1 for left, 1 for right, 0 for both directions)</param>
            <param name="sightRangeX">The horizontal search range in units</param>
            <param name="sightRangeY">The vertical search range in units</param>
            <param name="playerNum">The player number of the searching unit (will find enemies of this player)</param>
            <param name="seenEnemyNum">Output parameter that will contain the player number of the seen enemy</param>
            <param name="seenPositionX">Output parameter that will contain the X position of the seen enemy</param>
            <param name="seenPositionY">Output parameter that will contain the Y position of the seen enemy</param>
            <returns>True if an enemy unit was found within the sight range, false otherwise</returns>
        </member>
        <member name="M:Map.CanSeePosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks if there is a clear line of sight between two grid positions using raycast
                collision detection. Tests visibility between the center points of two grid blocks.
            </summary>
            <param name="fromCollumn">The starting column position in the grid</param>
            <param name="fromRow">The starting row position in the grid</param>
            <param name="seenCollumn">The target column position to check visibility to</param>
            <param name="seenRow">The target row position to check visibility to</param>
            <returns>True if there is a clear line of sight between the positions (no ground or fragile terrain blocking), false otherwise</returns>
        </member>
        <member name="M:Map.CanSeePosition(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Checks if there is a clear line of sight between two world positions using raycast
                collision detection. Tests direct visibility between exact coordinates.
            </summary>
            <param name="fromPositionX">The starting X position in world coordinates</param>
            <param name="fromPositionY">The starting Y position in world coordinates</param>
            <param name="seenPositionX">The target X position to check visibility to</param>
            <param name="seenPositionY">The target Y position to check visibility to</param>
            <returns>True if there is a clear line of sight between the positions (no ground or fragile terrain blocking), false otherwise</returns>
        </member>
        <member name="M:Map.CheckHighFive(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Checks if a player can perform a high five with another player within range. Players
                must be facing each other (opposite directions) and both must be player-controlled
                units.
            </summary>
            <param name="playerNum">Player number attempting the high five</param>
            <param name="x">X position to check from</param>
            <param name="y">Y position to check from</param>
            <param name="xRange">Maximum horizontal distance for high five</param>
            <param name="yRange">Maximum vertical distance for high five</param>
            <param name="direction">Direction the initiating player is facing</param>
            <returns>True if a high five connection was successfully made, false otherwise</returns>
        </member>
        <member name="M:Map.EnemyDeathEvent(Unit)">
            <summary>
                Broadcasts an enemy death event to all registered death listeners. This method is
                called when an enemy unit dies and notifies all triggers that are monitoring for
                enemy eliminations, allowing them to evaluate their conditions.
            </summary>
            <param name="unit">The Unit that has died, passed to listeners for evaluation.</param>
        </member>
        <member name="M:Map.ForgetPlayer(System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Makes all AI units on the map forget about a specific player. Affects all units
                regardless of distance.
            </summary>
            <param name="playerNum">The player number (0-3) to forget.</param>
            <param name="confuseMooks">If true, makes AI units lose sight of the player; if false and amuseMooks is false, makes them forget the player entirely.</param>
            <param name="amuseMooks">If true, makes AI units laugh at the dead player.</param>
        </member>
        <member name="M:Map.ForgetPlayer(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Makes AI units within a circular range forget about a specific player.
            </summary>
            <param name="playerNum">The player number (0-3) to forget.</param>
            <param name="x">The X coordinate of the range center.</param>
            <param name="y">The Y coordinate of the range center.</param>
            <param name="range">The radius of the circular area of effect.</param>
            <param name="confuseMooks">If true, makes AI units lose sight of the player; if false and amuseMooks is false, makes them forget the player entirely.</param>
            <param name="amuseMooks">If true, makes AI units laugh at the dead player.</param>
        </member>
        <member name="M:Map.ForgetPlayer(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Makes AI units within a rectangular range forget about a specific player.
            </summary>
            <param name="playerNum">The player number (0-3) to forget.</param>
            <param name="x">The X coordinate of the range center.</param>
            <param name="y">The Y coordinate of the range center.</param>
            <param name="xRange">The horizontal half-width of the rectangular area of effect.</param>
            <param name="yRange">The vertical half-height of the rectangular area of effect.</param>
            <param name="confuseMooks">If true, makes AI units lose sight of the player; if false and amuseMooks is false, makes them forget the player entirely.</param>
            <param name="amuseMooks">If true, makes AI units laugh at the dead player.</param>
        </member>
        <member name="M:Map.GetNearbyUnalertedMook(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Finds and returns a nearby enemy unit (Mook) that has never been alerted. Used for
                stealth gameplay mechanics to identify unaware enemies.
            </summary>
            <param name="x">X position to search from</param>
            <param name="y">Y position to search from</param>
            <param name="xRange">Half-width of the rectangular search area</param>
            <param name="yRange">Half-height of the rectangular search area</param>
            <returns>The first unalerted Mook found in range, or null if none exist</returns>
        </member>
        <member name="M:Map.GetNearestMookDoor(System.Int32,System.Int32)">
            <summary>
                Finds the nearest intact mook door to a given grid position using Manhattan
                distance. This method uses LINQ to order all doors by distance and returns the first
                one that hasn't been destroyed, used by AI for pathfinding through door checkpoints.
            </summary>
            <param name="col">The column coordinate in the map grid to search from.</param>
            <param name="row">The row coordinate in the map grid to search from.</param>
            <returns>The nearest non-destroyed MookDoor to the specified position, or null if no intact doors exist.</returns>
        </member>
        <member name="M:Map.GetNearestMookInterestPoint(System.Int32,System.Int32)">
            <summary>
                Finds the nearest scout mook interest point to a given grid position using Manhattan
                distance calculation. This is used by scout mook AI to determine the closest point
                to investigate during patrol or alert behaviors.
            </summary>
            <param name="col">The column coordinate in the map grid to search from.</param>
            <param name="row">The row coordinate in the map grid to search from.</param>
            <returns>The nearest ScoutMookInterestPoint to the specified position, or null if no points exist.</returns>
        </member>
        <member name="M:Map.HeroTransportHasEntered">
            <summary>
                Checks whether any hero transport has entered the level and released heroes. Checks
                all three transport types (truck, helicopter, portal) to see if any have completed
                their entry sequence.
            </summary>
            <returns>True if any transport has released heroes, false otherwise</returns>
        </member>
        <member name="M:Map.MakeMooksDance(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Makes all enemy units (mooks) within a rectangular range dance for a specified
                duration. Dancing units are temporarily incapacitated.
            </summary>
            <param name="x">X position of the dance effect center</param>
            <param name="y">Y position of the dance effect center</param>
            <param name="xRange">Half-width of the rectangular dance area</param>
            <param name="yRange">Half-height of the rectangular dance area</param>
            <param name="time">Duration of the dance in seconds</param>
        </member>
        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Causes all enemy units within a circular range to panic and flee. Units will run
                away from the panic source for 0.1 seconds.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="range">Radius of the panic effect</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
        </member>
        <member name="M:Map.PanicUnits(System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Causes enemy units within range to panic and flee from a specific player. Only
                affects units that can be damaged by the specified player number. Units panic for 2
                seconds.
            </summary>
            <param name="playernum">Player number causing the panic</param>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="range">Radius of the panic effect</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
        </member>
        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Causes enemy units within range to panic for a specified duration. This overload
                converts circular range to rectangular range internally.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="range">Radius of the panic effect (used for both X and Y range)</param>
            <param name="time">Duration of the panic in seconds</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
            <param name="runRandomDirection">Whether units should run in random directions or away from the source</param>
        </member>
        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Causes enemy units within a rectangular range to panic for a specified duration.
                Units can either flee away from the source or run in random directions.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="xRange">Half-width of the rectangular panic area</param>
            <param name="yRange">Half-height of the rectangular panic area</param>
            <param name="time">Duration of the panic in seconds</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
            <param name="runRandomDirection">If true, units run in random directions; if false, they run away from the source</param>
        </member>
        <member name="M:Map.PanicUnits(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
                Causes enemy units within a rectangular range to panic in a specific direction for a
                specified duration. If direction is 0, units will flee away from the source.
            </summary>
            <param name="x">X position of the panic source</param>
            <param name="y">Y position of the panic source</param>
            <param name="xRange">Half-width of the rectangular panic area</param>
            <param name="yRange">Half-height of the rectangular panic area</param>
            <param name="direction">Forced panic direction (-1 left, 1 right, 0 for away from source)</param>
            <param name="time">Duration of the panic in seconds</param>
            <param name="forgetPlayer">Whether panicked units should forget about players they were tracking</param>
        </member>
        <member name="M:Map.RegisterEnemyDeathListener(Trigger)">
            <summary>
                Registers a trigger that responds to enemy death events. These listeners are
                notified whenever an enemy unit dies, allowing for gameplay mechanics like kill
                counters, wave completion detection, or triggered events based on eliminations.
            </summary>
            <param name="trig">The Trigger object that will listen for enemy death events.</param>
        </member>
        <member name="M:Map.RegisterFetchObject(System.Single,System.Single,System.Single,System.Single,UnityEngine.Transform)">
            <summary>
                Registers an object for nearby enemy units to fetch. Only affects living enemy units
                that can hear. Unlike other range checks, this method uses exact range comparison
                rather than accounting for unit width/height.
            </summary>
            <param name="x">X position to check from</param>
            <param name="y">Y position to check from</param>
            <param name="xRange">Maximum horizontal distance to fetch object</param>
            <param name="yRange">Maximum vertical distance to fetch object</param>
            <param name="fetchTransform">The transform of the object to fetch</param>
        </member>
        <member name="M:Map.RegisterHeroWatcher(BroforceObject)">
            <summary>
                Registers an object that monitors hero (player) activity and position. Hero watchers
                are typically used by AI systems, traps, or environmental elements that need to
                react to player presence or actions within their awareness range.
            </summary>
            <param name="watcher">The BroforceObject that will watch for hero activity.</param>
        </member>
        <member name="M:Map.RegisterMookInterestPoint(ScoutMookInterestPoint)">
            <summary>
                Registers a point of interest for scout mook AI behavior. These points represent
                locations that scout mooks will investigate, patrol to, or use as waypoints during
                their scouting patterns, often including doors or strategic positions.
            </summary>
            <param name="pointObject">The ScoutMookInterestPoint to register.</param>
        </member>
        <member name="M:Map.RemoveEnemyDeathListener(Trigger)">
            <summary>
                Removes a trigger from the enemy death listener system, typically when the trigger
                is destroyed or its conditions have been met. This prevents the trigger from
                continuing to receive death notifications.
            </summary>
            <param name="trig">The Trigger object to remove from death event listening.</param>
        </member>
        <member name="M:Map.RemoveHeroWatcher(BroforceObject)">
            <summary>
                Removes an object from the hero watcher tracking system, typically when the watcher
                is destroyed or no longer needs to monitor player activity. This prevents
                unnecessary processing of defunct watchers.
            </summary>
            <param name="watcher">The BroforceObject to remove from hero watching.</param>
        </member>
        <member name="M:Map.RemoveMookInterestPoint(ScoutMookInterestPoint)">
            <summary>
                Removes a scout mook interest point from the tracking system, typically when the
                point has been used, destroyed, or is no longer relevant for AI pathing. Some
                interest points are configured to remove themselves after first use.
            </summary>
            <param name="pointObject">The ScoutMookInterestPoint to remove from tracking.</param>
        </member>
        <member name="M:Map.StunMooks(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Stuns all enemy units (mooks) within a rectangular range for a specified duration.
                Only affects units with negative player numbers.
            </summary>
            <param name="x">X position of the stun center</param>
            <param name="y">Y position of the stun center</param>
            <param name="xRange">Half-width of the rectangular stun area</param>
            <param name="yRange">Half-height of the rectangular stun area</param>
            <param name="time">Duration of the stun in seconds</param>
        </member>
        <!-- AI & Player Management Fields -->
        <member name="F:Map.mookInterestPoints">
            <summary>
                List of points of interest for scout mook AI pathfinding. Interest points are
                registered via RegisterMookInterestPoint and removed via RemoveMookInterestPoint.
                Used by GetNearestMookInterestPoint to find the closest point based on grid
                coordinates for AI navigation decisions. Initialized in Awake() and set to null in
                OnDestroy().
            </summary>
        </member>
        <!-- Projectile & Explosive Management Methods -->
        <member name="M:Map.DamageProjectile(Projectile,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Applies damage to a projectile, potentially destroying or redirecting it. Used when
                projectiles collide with attacks or explosions.
            </summary>
            <param name="projectile">The projectile to damage</param>
            <param name="damage">The amount of damage to apply</param>
            <param name="damageType">The type of damage being applied</param>
            <param name="xI">The horizontal force to apply</param>
            <param name="yI">The vertical force to apply</param>
            <param name="delay">Delay before applying the damage</param>
            <param name="newPlayerNum">The new owner player number (for redirected projectiles)</param>
        </member>
        <member name="M:Map.DeflectProjectiles(UnityEngine.MonoBehaviour,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Deflects enemy projectiles within range back at enemies. Changes projectile
                ownership, reverses direction, adds scatter, and can trigger achievements.
            </summary>
            <param name="newOwner">The new owner of deflected projectiles</param>
            <param name="playerNum">The player number doing the deflection</param>
            <param name="range">The deflection range</param>
            <param name="x">The X coordinate of the deflection source</param>
            <param name="y">The Y coordinate of the deflection source</param>
            <param name="xI">The horizontal direction indicator for deflection</param>
            <param name="giveDeflectAchievementOnMookKill">Whether to award achievement for mook kills with deflected projectiles</param>
            <returns>True if any projectiles were deflected, false otherwise</returns>
        </member>
        <member name="M:Map.GetGrenadesInRange(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Gets all active grenades within Manhattan distance that can be damaged by the
                player. Checks game mode rules for friendly fire and filters by active state.
            </summary>
            <param name="playerNum">The player number to check damage rules for</param>
            <param name="range">The Manhattan distance range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>List of grenades within range that can be damaged</returns>
        </member>
        <member name="M:Map.GetNearbyGrenade(System.Single,System.Single,System.Single)">
            <summary>
                Finds the nearest active grenade within range using Manhattan distance. Returns the
                single closest grenade regardless of player ownership.
            </summary>
            <param name="range">The maximum search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>The nearest grenade within range, or null if none found</returns>
        </member>
        <member name="M:Map.GetNearbySachelPack(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Finds the nearest active satchel pack within range using Manhattan distance. Used
                for remote detonation and chain explosion mechanics.
            </summary>
            <param name="playerNum">The player number (unused in current implementation)</param>
            <param name="range">The maximum search range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>The nearest satchel pack within range, or null if none found</returns>
        </member>
        <member name="M:Map.GetProjectilesInRange(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Gets all projectiles within Manhattan distance that can damage the specified player.
                Respects game mode damage rules for team damage and friendly fire.
            </summary>
            <param name="playerNum">The player number to check damage rules against</param>
            <param name="range">The Manhattan distance range</param>
            <param name="x">The X coordinate to search from</param>
            <param name="y">The Y coordinate to search from</param>
            <returns>List of projectiles within range that can damage the player</returns>
        </member>
        <member name="M:Map.HitGrenades(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
                Checks for grenade hits within range and knocks the first one found. Special
                handling for coconuts with RPC synchronization for knockback.
            </summary>
            <param name="playerNum">The player number performing the hit check</param>
            <param name="range">The hit detection range</param>
            <param name="x">The X coordinate of the hit origin</param>
            <param name="y">The Y coordinate of the hit origin</param>
            <param name="xI">The horizontal force to apply</param>
            <param name="yI">The vertical force to apply</param>
            <param name="grenadeX">Output parameter for the hit grenade's X position</param>
            <param name="grenadeY">Output parameter for the hit grenade's Y position</param>
            <returns>True if a grenade was hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitProjectiles(System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Damages damageable projectiles within a square range. Simple overload that uses same
                range for both X and Y axes.
            </summary>
            <param name="playerNum">The player number dealing damage</param>
            <param name="damage">The damage amount to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="range">The damage range (used for both axes)</param>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="xI">The horizontal impact force</param>
            <param name="yI">The vertical impact force</param>
            <param name="delay">The damage delay</param>
            <returns>True if any projectiles were hit, false otherwise</returns>
        </member>
        <member name="M:Map.HitProjectiles(System.Int32,System.Int32,DamageType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Damages damageable projectiles within a rectangular range. Checks projectile size
                for precise collision and respects damage rules.
            </summary>
            <param name="playerNum">The player number dealing damage</param>
            <param name="damage">The damage amount to deal</param>
            <param name="damageType">The type of damage being dealt</param>
            <param name="xRange">The horizontal damage range</param>
            <param name="yRange">The vertical damage range</param>
            <param name="x">The X coordinate of the damage source</param>
            <param name="y">The Y coordinate of the damage source</param>
            <param name="xI">The horizontal impact force</param>
            <param name="yI">The vertical impact force</param>
            <param name="delay">The damage delay</param>
            <returns>True if any projectiles were hit, false otherwise</returns>
        </member>
        <member name="M:Map.RegisterDamageableProjectile(Projectile)">
            <summary>
                Registers a Projectile in the damageable projectiles list, marking it as a
                projectile that can take damage.
            </summary>
            <param name="projectile">The Projectile to register as damageable.</param>
        </member>
        <member name="M:Map.RegisterGrenade(Grenade)">
            <summary>
                Registers a Grenade with the map's grenade tracking system.
            </summary>
            <param name="grenade">The Grenade to register.</param>
        </member>
        <member name="M:Map.RegisterProjectile(Projectile)">
            <summary>
                Registers a Projectile with the map's projectile tracking system.
            </summary>
            <param name="projectile">The Projectile to register.</param>
        </member>
        <member name="M:Map.RegisterSachelPack(SachelPack)">
            <summary>
                Registers a SachelPack with the map's satchel pack tracking system.
            </summary>
            <param name="sachelPack">The SachelPack to register.</param>
        </member>
        <member name="M:Map.RegisterShootableGrenade(Grenade)">
            <summary>
                Registers a Grenade in the shootable grenades list, marking it as a grenade that can
                be damaged by gunfire.
            </summary>
            <param name="shootableGrenade">The Grenade to register as shootable.</param>
        </member>
        <member name="M:Map.RemoveGrenade(Grenade)">
            <summary>
                Removes a Grenade from the map's grenade tracking system.
            </summary>
            <param name="grenade">The Grenade to remove.</param>
        </member>
        <member name="M:Map.RemoveProjectile(Projectile)">
            <summary>
                Removes a Projectile from both the regular projectiles list and the damageable
                projectiles list if present.
            </summary>
            <param name="projectile">The Projectile to remove.</param>
        </member>
        <member name="M:Map.RemoveSachelPack(SachelPack)">
            <summary>
                Removes a SachelPack from the map's satchel pack tracking system.
            </summary>
            <param name="sachelPack">The SachelPack to remove.</param>
        </member>
        <member name="M:Map.RemoveShootableGrenade(Grenade)">
            <summary>
                Removes a Grenade from the shootable grenades list.
            </summary>
            <param name="shootableGrenade">The Grenade to remove from shootable tracking.</param>
        </member>
        <!-- Projectile & Explosive Management Fields -->
        <member name="F:Map.damageableProjectiles">
            <summary>
                List of projectiles that can be destroyed by damage (e.g., rockets that can be shot
                down). Projectiles are added via RegisterDamageableProjectile and removed via
                RemoveDamageableProjectile. Used for advanced projectile interaction mechanics.
                Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.grenades">
            <summary>
                Master list of all active grenades in the map. Grenades are registered via
                RegisterGrenade when thrown and removed via RemoveGrenade when they explode or are
                destroyed. Used for grenade-specific collision detection and detonation logic.
                Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.helicopterCallCount">
            <summary>
                Static counter tracking the number of helicopter calls made during gameplay. Reset
                to 0 during map initialization. Used to limit or track helicopter usage in levels.
            </summary>
        </member>
        <member name="F:Map.helicopterFake">
            <summary>
                Static reference to a fake helicopter object used for visual effects or scripted
                sequences where a full helicopter entity isn't needed. Separate from the functional
                newestHelicopter reference.
            </summary>
        </member>
        <member name="F:Map.hiddenExplosivePrefabReference">
            <summary>
                Reference to the hidden explosives prefab used for trap mechanics. Instantiated via
                hiddenExplosivePrefabReference.Asset during map generation to create explosive traps
                that trigger when players get near.
            </summary>
        </member>
        <member name="F:Map.newestHelicopter">
            <summary>
                Static reference to the most recently spawned helicopter in the game. Updated
                whenever a new helicopter is created, allowing other systems to reference the
                current active helicopter for extraction or attack sequences.
            </summary>
        </member>
        <member name="F:Map.projectiles">
            <summary>
                Master list of all active projectiles in the map. Projectiles are registered via
                RegisterProjectile when spawned and removed via RemoveProjectile when destroyed.
                Used by various systems to iterate through all projectiles for collision detection,
                updates, and cleanup. Initialized in Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.sachelPacks">
            <summary>
                List of all placed satchel pack explosives. Satchel packs are registered via
                RegisterSachelPack when placed and removed via RemoveSachelPack when detonated. Used
                for remote detonation functionality and chain explosion mechanics. Initialized in
                Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <member name="F:Map.shootableGrenades">
            <summary>
                Subset of grenades that can be detonated by shooting them. Grenades are added via
                RegisterShootableGrenade and removed via RemoveShootableGrenade. Used by projectile
                collision systems to check if a grenade should explode when hit. Initialized in
                Awake() and set to null in OnDestroy().
            </summary>
        </member>
        <!-- Core & Instance Management Methods -->
        <member name="M:Map.Awake">
            <summary>
                Initializes the Map singleton when it awakens. Sets up layer masks for collision
                detection, initializes all tracking lists for game objects, allocates network IDs
                for deterministic spawning, and prepares the level loading system.
            </summary>
        </member>
        <member name="M:Map.ClearSuperCheckpointStatus">
            <summary>
                Clears all super checkpoint related data. Resets the super checkpoint position and
                load offsets to their default values.
            </summary>
        </member>
        <member name="M:Map.ContinueLevel">
            <summary>
                Resets level continuation state after loading from a super checkpoint. Clears super
                checkpoint status to allow normal gameplay to resume.
            </summary>
        </member>
        <member name="M:Map.ExitLevel">
            <summary>
                Cleans up level data when exiting a level. Nullifies the blocks array to free up
                memory and prepare for the next level.
            </summary>
        </member>
        <member name="M:Map.IsFinished">
            <summary>
                Checks whether the current level has been completed. Used to determine when to
                trigger level end sequences and transitions.
            </summary>
            <returns>True if the level is marked as finished, false otherwise</returns>
        </member>
        <member name="M:Map.OnDestroy">
            <summary>
                Cleans up all map resources when the Map object is destroyed. Returns all pooled
                effects to their pools, clears all tracking lists to prevent memory leaks, and
                properly nullifies all references to allow garbage collection.
            </summary>
        </member>
        <member name="M:Map.SetupBlocksCoroutine">
            <summary>
                Sets up the level blocks and initializes the game world. Handles random seed
                synchronization for deterministic gameplay, loads the appropriate map data based on
                game mode, spawns parallax backgrounds and clouds, initializes wind and quicksand
                controllers, and creates hero transport vehicles based on spawn mode settings.
            </summary>
        </member>
        <member name="M:Map.ShouldTheBrosArriveByHeli(UnityEngine.Vector3)">
            <summary>
                Determines whether heroes should arrive by helicopter based on the level's starting
                area. Checks if there are solid blocks or gaps near the start location that would
                require aerial insertion.
            </summary>
            <param name="startLocation">The starting position to check from</param>
            <returns>True if helicopter arrival is needed, false if ground-based arrival is possible</returns>
        </member>
        <member name="M:Map.Start">
            <summary>
                Completes map initialization after all objects are awake. Instantiates the
                helicopter for the host, triggers FirstFrame on all blocks to initialize their
                state, and sets up any additional level-specific components.
            </summary>
        </member>
        <!-- Core & Instance Management Properties -->
        <member name="P:Map.Instance">
            <summary>
                Gets the singleton instance of the Map class using lazy initialization. If no
                instance exists, searches for a Map object in the scene using Unity's
                FindObjectOfType.
            </summary>
        </member>
        <!-- Core & Instance Management Fields -->
        <member name="F:Map.alreadyLoadedForceStartLevel">
            <summary>
                Tracks whether the editor force start level functionality has already been applied.
                Used in the editor to ensure that the startLevel field is only applied once when
                starting the game outside of the main menu. Set to true after the first application
                to prevent repeated level changes.
            </summary>
        </member>
        <member name="F:Map.hasBeenSetup">
            <summary>
                Indicates whether the map has completed its setup process. Set to true at the end of
                SetupBlocksCoroutine after all map initialization is complete, including terrain
                loading, spawn point setup, and random seed generation.
            </summary>
        </member>
        <member name="F:Map.inst">
            <summary>
                Static backing field for the singleton Map instance. Used by the Instance property
                to implement lazy initialization of the Map singleton pattern.
            </summary>
        </member>
        <member name="F:Map.startLevel">
            <summary>
                The level number to force start at when running in the editor. When set to a value
                &gt;= 0 and the game is started outside the main menu in the editor, this overrides
                the default starting level. Also supports random level selection when randomLevel is
                enabled, adding a random offset based on randomRange.
            </summary>
        </member>
        <member name="F:Map.waitingForSeed">
            <summary>
                Indicates whether the map is waiting for network seed synchronization. Set to false
                after random seeds are generated for spawn point offset, wood block count, and
                barrel block count during map setup.
            </summary>
        </member>
        <member name="F:Map.waitingForSync">
            <summary>
                Indicates whether the map is waiting for network synchronization. Used to coordinate
                map state across networked games before proceeding with initialization.
            </summary>
        </member>
        <!-- Map Data & State Methods -->
        <member name="M:Map.AssignBlock(Block,System.Int32,System.Int32)">
            <summary>
                Assigns a block to the specified grid coordinates. Will only assign if the position
                is within bounds and either empty, destroyed, or contains a ladder-type block.
            </summary>
            <param name="block">The block to assign to the grid position</param>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block was successfully assigned, false if the position is invalid or already contains a solid block</returns>
        </member>
        <member name="M:Map.CheckPersistBlocksPastLevelLoad">
            <summary>
                Checks whether blocks should be persisted after a level load and either maintains or
                destroys them accordingly. This method is called after level transitions to handle
                the persistence state.
            </summary>
            <remarks>
                Only processes persistence if loading time optimizations are active. Sets
                hasPersistedPastLevelLoad to true if persistence is enabled, otherwise calls
                DestroyPersistantBlocks to clear any persisted blocks.
            </remarks>
        </member>
        <member name="M:Map.CheckPersistBlocksPastLevelLoad">
            <summary>
                Checks and applies block persistence settings after a level load.
            </summary>
            <remarks>
                Called after level loading to determine if persistent blocks should be maintained or
                destroyed. Only applies when loading time reduction is active. Sets the
                hasPersistedPastLevelLoad flag if persistence is enabled.
            </remarks>
        </member>
        <member name="M:Map.ClearBackgroundBlock(System.Int32,System.Int32)">
            <summary>
                Destroys and removes the background block at the specified grid coordinates if it
                exists.
            </summary>
            <param name="c">The column index in the grid</param>
            <param name="r">The row index in the grid</param>
        </member>
        <member name="M:Map.ClearForegroundBlock(System.Int32,System.Int32)">
            <summary>
                Destroys and removes the foreground block at the specified grid coordinates. Also
                handles clearing the upper part of 2-unit tall blocks.
            </summary>
            <param name="c">The column index in the grid</param>
            <param name="r">The row index in the grid</param>
        </member>
        <member name="M:Map.ClearPersistenBlocksInstant">
            <summary>
                Immediately clears all persisted blocks without waiting for a level transition. This
                provides a way to force-clear persistence state during gameplay.
            </summary>
            <remarks>
                Resets the hasPersistedPastLevelLoad flag and calls DestroyPersistantBlocks to
                remove all persisted blocks immediately.
            </remarks>
        </member>
        <member name="M:Map.ClearPersistenBlocksInstant">
            <summary>
                Immediately clears all persistent blocks without waiting for level transition.
            </summary>
            <remarks>
                Resets the persistence flag and destroys all persistent blocks instantly. Used when
                an immediate cleanup is required rather than waiting for the normal level transition
                process. Note the typo in the method name.
            </remarks>
        </member>
        <member name="M:Map.CollapseTop">
            <summary>
                Collapses the top row of the map by destroying blocks and lowering the ceiling.
            </summary>
            <returns>The new highest solid block row index after collapse</returns>
            <remarks>
                This method implements a ceiling collapse mechanic by decrementing highestSolidBlock
                (minimum 11) and destroying blocks in the rows above it. For each column, it checks
                a sphere area around blocks in the collapse zone. Most block types are instantly
                destroyed with InstaGib damage, but certain types like barrels, rockets, ladders,
                and cages are preserved. Non-block objects in the area receive 15 damage. This
                creates a crushing ceiling effect often used in escape sequences.
            </remarks>
        </member>
        <member name="M:Map.CollapseTopLadders">
            <summary>
                Specifically collapses ladder blocks from the top of the map.
            </summary>
            <returns>The highest solid block value (not the ladder-specific value)</returns>
            <remarks>
                This method decrements highestSolidBlockLadder (minimum 16) and destroys only ladder
                blocks in the affected rows. Unlike CollapseTop(), this targets ladders
                specifically, useful for preventing vertical escape routes during collapse
                sequences. The method checks block types directly from the blocks array and sends
                InstaGib damage to ladder blocks. Note that it returns highestSolidBlock, not
                highestSolidBlockLadder.
            </remarks>
        </member>
        <member name="M:Map.CreateExitPortal(UnityEngine.Vector2)">
            <summary>
                Creates a hero level exit portal at the specified position. The portal is positioned
                with a vertical offset of 112 units and a horizontal offset of 16 units from the
                provided coordinates.
            </summary>
            <param name="position">The base position where the portal should be created</param>
            <remarks>
                The portal is instantiated from the exitPortalPrefabReference asset and registered
                with the game's networking system using a deterministic network ID. This ensures the
                portal is properly synchronized across all clients in multiplayer sessions.
            </remarks>
        </member>
        <member name="M:Map.DeactivateHalfTheMap">
            <summary>
                Deactivates the right half of the map by disabling all blocks beyond the midpoint.
            </summary>
            <remarks>
                This method provides a simple way to hide half the map, typically used for debugging
                or special game modes. It deactivates all blocks from the horizontal midpoint to the
                right edge of the map. Only the block GameObjects are deactivated; the block data
                remains intact. This is separate from the dynamic offscreen deactivation system and
                provides a static way to reduce the active map size.
            </remarks>
        </member>
        <member name="M:Map.DestroyPersistantBlocks">
            <summary>
                Destroys all persisted blocks and clears the persistence system. This removes both
                foreground and background persistent blocks and their container GameObject.
            </summary>
            <remarks>
                Iterates through all persistent block arrays and destroys each block's GameObject
                before clearing the arrays and destroying the persistent container. Also resets the
                hasPersistedPastLevelLoad flag.
            </remarks>
        </member>
        <member name="M:Map.DestroyPersistantBlocks">
            <summary>
                Destroys all persistent blocks and cleans up persistence-related data structures.
            </summary>
            <remarks>
                Iterates through all persistent block arrays and destroys the game objects, then
                nullifies the arrays and destroys the persistent container object. This ensures a
                complete cleanup of the persistence system. Note the typo in the method name
                (Persistant vs Persistent) is from the original code.
            </remarks>
        </member>
        <member name="M:Map.DontPersistBlocks">
            <summary>
                Disables block persistence for the next level load. This prevents blocks from being
                maintained between level transitions, ensuring a fresh map state.
            </summary>
            <remarks>
                Sets the persistPastLevelLoad flag to false. This method should be called when you
                want to ensure all blocks are cleared and recreated on the next level load,
                typically when transitioning to a completely different area.
            </remarks>
        </member>
        <member name="M:Map.DontPersistBlocks">
            <summary>
                Disables block persistence for the current level transition.
            </summary>
            <remarks>
                Prevents blocks from being carried over to the next level load. This is typically
                used when transitioning between completely different level sections or when a clean
                slate is required.
            </remarks>
        </member>
        <member name="M:Map.ExtendDisableToUnitPosition(System.Single,System.Single,System.Single)">
            <summary>
                Extends the active area bounds to include the specified unit position with a buffer.
            </summary>
            <param name="x">The x-coordinate of the unit</param>
            <param name="y">The y-coordinate of the unit</param>
            <param name="buffer">The buffer distance around the unit (default: 48 units)</param>
            <remarks>
                This method ensures important units remain in the active area even if they're
                outside the normal camera bounds. It updates the min/max unit position trackers
                which are consumed by RunDeactivationOffscreen() to extend the active area. This
                prevents important gameplay elements like bosses or objective units from being
                deactivated when slightly offscreen. The buffer parameter adds extra space around
                the unit to ensure smooth activation transitions.
            </remarks>
        </member>
        <member name="M:Map.GetBackgroundBlock(System.Int32,System.Int32)">
            <summary>
                Retrieves the background block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>The background block at the specified position, or null if the position is out of bounds or empty</returns>
        </member>
        <member name="M:Map.GetBackgroundGroundType(System.Int32,System.Int32,GroundType)">
            <summary>
                Retrieves the ground type of the background block at the specified grid coordinates,
                falling back to the foreground block if no background block exists.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <param name="currentGroundType">The default ground type to return if the position is out of bounds or both background and foreground are empty</param>
            <returns>The ground type of the background block if it exists, otherwise the foreground block's ground type, or currentGroundType if both are empty</returns>
        </member>
        <member name="M:Map.GetBlock(System.Int32,System.Int32)">
            <summary>
                Retrieves the foreground block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>The block at the specified position, or null if the position is out of bounds or empty</returns>
        </member>
        <member name="M:Map.GetBlock(UnityEngine.Vector2)">
            <summary>
                Retrieves the foreground block at the specified world coordinates. Note: This method
                incorrectly uses the y component of the Vector2 for row calculation instead of
                column.
            </summary>
            <param name="worldXY">The world coordinates to check</param>
            <returns>The block at the specified world position, or null if the position is out of bounds or empty</returns>
        </member>
        <member name="M:Map.GetBlockCenter(System.Int32,System.Int32)">
            <summary>
                Gets the 2D world position of the center of a block at the specified grid
                coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector2 representing the center position of the block</returns>
        </member>
        <member name="M:Map.GetBlockCenterX(System.Int32)">
            <summary>
                Gets the world x coordinate of the center of a block at the specified column. Each
                column is 16 units wide.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <returns>The world x coordinate of the center of the block</returns>
        </member>
        <member name="M:Map.GetBlockCenterY(System.Int32)">
            <summary>
                Gets the world y coordinate of the center of a block at the specified row. Each row
                is 16 units tall.
            </summary>
            <param name="row">The row index in the grid</param>
            <returns>The world y coordinate of the center of the block</returns>
        </member>
        <member name="M:Map.GetBlockExcludingDestroyed(UnityEngine.Vector2)">
            <summary>
                Retrieves the foreground block at the specified world coordinates, excluding blocks
                that are marked as destroyed. Note: This method incorrectly uses the y component of
                the Vector2 for row calculation instead of column.
            </summary>
            <param name="worldXY">The world coordinates to check</param>
            <returns>The block at the specified world position if it exists and is not destroyed, or null if the position is out of bounds, empty, or contains a destroyed block</returns>
        </member>
        <member name="M:Map.GetBlocksX(System.Int32)">
            <summary>
                Converts a column index to its left world x coordinate. Each column is 16 units
                wide, with an offset of -8 units.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <returns>The world x coordinate of the left edge of the block at the specified column</returns>
        </member>
        <member name="M:Map.GetBlocksY(System.Int32)">
            <summary>
                Converts a row index to its bottom world y coordinate. Each row is 16 units tall,
                with an offset of -8 units.
            </summary>
            <param name="row">The row index in the grid</param>
            <returns>The world y coordinate of the bottom edge of the block at the specified row</returns>
        </member>
        <member name="M:Map.GetCenterPosition(System.Int32,System.Int32)">
            <summary>
                Gets the world position of the center of a block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector3 representing the center position of the block (z is always 0)</returns>
        </member>
        <member name="M:Map.GetDescentOffset(System.Boolean,System.Int32)">
            <summary>
                Returns the current descent offset value without modification.
            </summary>
            <param name="forceCollapse">Whether to force a collapse (parameter is not used)</param>
            <param name="current">The current offset value to return</param>
            <returns>The current offset value unchanged</returns>
            <remarks>
                This method appears to be a placeholder or simplified version of a descent
                calculation system. Despite having parameters suggesting collapse functionality, it
                simply returns the current value without any processing. This may be used in systems
                where descent offset calculation was removed or simplified.
            </remarks>
        </member>
        <member name="M:Map.GetGridPoint(UnityEngine.Vector3)">
            <summary>
                Converts a world position to a grid coordinate point.
            </summary>
            <param name="pos">The world position to convert</param>
            <returns>A GridPoint containing the column and row indices for the given world position</returns>
        </member>
        <member name="M:Map.GetGridPoint(System.Single,System.Single)">
            <summary>
                Converts world x and y coordinates to a grid coordinate point.
            </summary>
            <param name="x">The world x coordinate</param>
            <param name="y">The world y coordinate</param>
            <returns>A GridPoint containing the column and row indices for the given coordinates</returns>
        </member>
        <member name="M:Map.GetGroundType(System.Int32,System.Int32,GroundType)">
            <summary>
                Retrieves the ground type of the foreground block at the specified grid coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <param name="currentGroundType">The default ground type to return if the position is out of bounds or empty</param>
            <returns>The ground type of the block at the specified position, or currentGroundType if no block exists</returns>
        </member>
        <member name="M:Map.GetHighestSolidBlock">
            <summary>
                Gets the row index of the highest solid block in the map.
            </summary>
            <returns>The row index of the highest solid block</returns>
            <remarks>
                This method returns the cached highestSolidBlock value which tracks the topmost row
                containing solid terrain. This value is updated when blocks are placed or destroyed
                and is used for various gameplay systems including camera bounds, enemy spawning
                limits, and collapse mechanics. The value represents a row index in the map's grid
                system.
            </remarks>
        </member>
        <member name="M:Map.GetPosition(System.Int32,System.Int32)">
            <summary>
                Gets the world position of the bottom-left corner of a block at the specified grid
                coordinates.
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>A Vector3 representing the bottom-left corner position of the block (z is always 0)</returns>
        </member>
        <member name="M:Map.HasSandStormTrigger">
            <summary>
                Checks whether the current map contains any sandstorm or sandworm trigger actions.
                This is used to determine if desert-specific environmental effects should be
                prepared.
            </summary>
            <returns>True if the map contains sandstorm or sandworm triggers, false otherwise</returns>
            <remarks>
                Iterates through all triggers in the MapData and checks their actions for Sandstorm
                or CallSandworm types. These triggers create environmental hazards specific to
                desert-themed levels.
            </remarks>
        </member>
        <member name="M:Map.HasSandStormTrigger">
            <summary>
                Checks if the current map contains any sandstorm or sandworm trigger actions.
            </summary>
            <returns>True if sandstorm or sandworm triggers exist; false otherwise.</returns>
            <remarks>
                Iterates through all trigger actions in the map data looking for Sandstorm or
                CallSandworm action types. Used to determine if desert-specific weather effects or
                enemies will appear in the level.
            </remarks>
        </member>
        <member name="M:Map.HasThisMapGotAliens">
            <summary>
                Checks whether the current map contains alien enemies. This is used to determine if
                alien-specific gameplay mechanics should be enabled.
            </summary>
            <returns>True if the map contains aliens, false otherwise</returns>
            <remarks>
                Returns the value of the hasAliens static field, which is set during map loading
                based on the presence of alien spawn points or alien-themed elements.
            </remarks>
        </member>
        <member name="M:Map.HasThisMapGotAliens">
            <summary>
                Checks if the current map contains alien enemies.
            </summary>
            <returns>True if aliens are present in the map; false otherwise.</returns>
            <remarks>
                Returns the value of the hasAliens flag, which is set during map loading based on
                the enemy types placed in the level. Used for gameplay logic that differs when
                aliens are present.
            </remarks>
        </member>
        <member name="M:Map.InitializeDeactivationOffscreen">
            <summary>
                Initializes the offscreen deactivation system to its default state covering the
                entire map.
            </summary>
            <remarks>
                This method sets up the offscreen culling system by initializing the active area to
                encompass the full map bounds (0 to width-1, 0 to height-1). It also resets the unit
                position tracking variables to zero and sets the runDeactivationOffscreenIsSetup
                flag. This system is used to optimize performance by deactivating blocks and objects
                that are far from the camera view. Must be called before RunDeactivationOffscreen()
                can function properly.
            </remarks>
        </member>
        <member name="M:Map.IsBlockInvulnerable(System.Int32,System.Int32)">
            <summary>
                Checks if a block at the specified grid coordinates is invulnerable (made of steel).
            </summary>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block exists and has a ground type of Steel, false otherwise</returns>
        </member>
        <member name="M:Map.IsBlockSolid(System.Single,System.Single)">
            <summary>
                Checks if a block at the specified world coordinates is solid. This method converts
                world coordinates to grid coordinates and checks if a solid block exists at that
                location.
            </summary>
            <param name="x">The world x coordinate to check</param>
            <param name="y">The world y coordinate to check</param>
            <returns>True if a solid block exists at the specified coordinates, false otherwise</returns>
        </member>
        <member name="M:Map.IsInvulnerableAbove(System.Single,System.Single)">
            <summary>
                Checks if there are any invulnerable blocks in the column above the specified
                position.
            </summary>
            <param name="x">The x-coordinate to check</param>
            <param name="y">The y-coordinate to start checking from</param>
            <returns>True if any invulnerable block exists above this position; false otherwise</returns>
            <remarks>
                This method scans vertically upward from the given position to the top of the map,
                checking each block in the column for invulnerability. It's useful for determining
                if attacks or effects can reach the sky, or if there's protective terrain overhead.
                The check uses IsBlockInvulnerable() for each grid position.
            </remarks>
        </member>
        <member name="M:Map.IsWithinBounds(UnityEngine.Vector3)">
            <summary>
                Checks if the specified world position is within the map boundaries.
            </summary>
            <param name="pos">The world position to check</param>
            <returns>True if the position is within the map's width and height bounds, false otherwise</returns>
        </member>
        <member name="M:Map.IsWithinBounds(System.Int32,System.Int32)">
            <summary>
                Checks if the specified grid coordinates are within the map boundaries.
            </summary>
            <param name="c">The column index to check</param>
            <param name="r">The row index to check</param>
            <returns>True if the coordinates are within the map's width and height bounds, false otherwise</returns>
        </member>
        <member name="M:Map.MakeBlockPersist(Block)">
            <summary>
                Marks a specific block for persistence by transferring it to the persistent blocks
                container. This is a helper method used by PersistBlocks to process individual
                blocks.
            </summary>
            <param name="block">The block to make persistent</param>
            <remarks>
                Simply calls the Persist method to reparent the block's GameObject to the persistent
                container.
            </remarks>
        </member>
        <member name="M:Map.MakeBlockPersist(Block)">
            <summary>
                Marks a single block to persist across level transitions.
            </summary>
            <param name="block">The block to make persistent.</param>
            <remarks>
                Simple wrapper that calls the Persist method with the block's game object. Part of
                the internal persistence system workflow.
            </remarks>
        </member>
        <member name="M:Map.Persist(UnityEngine.GameObject)">
            <summary>
                Transfers a GameObject to the persistent blocks container by changing its parent.
                This ensures the object survives scene transitions when persistence is enabled.
            </summary>
            <param name="go">The GameObject to make persistent</param>
            <remarks>
                Reparents the GameObject to the PersistentBlocks.Instance transform, which is marked
                as DontDestroyOnLoad to survive scene changes.
            </remarks>
        </member>
        <member name="M:Map.Persist(UnityEngine.GameObject)">
            <summary>
                Moves a game object to the persistent blocks container to survive level transitions.
            </summary>
            <param name="go">The game object to make persistent.</param>
            <remarks>
                Reparents the object to the PersistentBlocks singleton instance, which is configured
                to not be destroyed on level load. This is the core mechanism for block persistence.
            </remarks>
        </member>
        <member name="M:Map.PersistBlocks">
            <summary>
                Enables block persistence and transfers all current foreground and background blocks
                to the persistent storage system. This allows blocks to survive level transitions
                when loading time optimizations are active.
            </summary>
            <remarks>
                Creates a persistent GameObject container if needed and iterates through all map
                blocks, marking matching persistent blocks for retention. Respects the
                dontPersistedPastLevelLoadThisLevel flag to handle special cases where persistence
                should be skipped.
            </remarks>
        </member>
        <member name="M:Map.PersistBlocks">
            <summary>
                Enables block persistence and prepares blocks to survive the next level transition.
            </summary>
            <remarks>
                Creates a persistent game object container if needed and marks matching blocks in
                both foreground and background layers for persistence. Blocks are only persisted if
                they exist in both the current map and the persistent block arrays. Respects the
                dontPersistedPastLevelLoadThisLevel flag to allow temporary overrides.
            </remarks>
        </member>
        <member name="M:Map.RotateBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
                Rotates the foreground block at the specified grid coordinates if it exists.
            </summary>
            <param name="c">The column index in the grid</param>
            <param name="r">The row index in the grid</param>
            <param name="direction">The rotation direction to apply to the block</param>
        </member>
        <member name="M:Map.RunDeactivationOffscreen">
            <summary>
                Updates the active area of the map based on camera position and unit locations,
                deactivating distant blocks.
            </summary>
            <remarks>
                This comprehensive optimization method manages which blocks are active based on
                proximity to the camera and important units. It calculates an active area using
                screen bounds plus a 256x160 unit buffer, then extends this area to include any
                tracked unit positions. The method efficiently updates block activation states only
                for blocks entering or leaving the active area, rather than processing all blocks
                every frame. The method tracks the previously active area and only processes blocks
                in the difference between old and new bounds, significantly reducing processing
                overhead. Both foreground and background blocks are managed. This system is crucial
                for maintaining performance in large maps by keeping only nearby blocks active.
            </remarks>
        </member>
        <member name="M:Map.SetBackgroundBlockEmpty(Block,System.Int32,System.Int32)">
            <summary>
                Removes a specific block from the background grid if it matches the provided block
                reference.
            </summary>
            <param name="block">The block instance to remove (must match the block at the position)</param>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block matched and was removed, false if a different block exists at that position</returns>
        </member>
        <member name="M:Map.SetBlockEmpty(Block,System.Int32,System.Int32)">
            <summary>
                Removes a specific block from the foreground grid if it matches the provided block
                reference or if the position is already empty.
            </summary>
            <param name="block">The block instance to remove (must match the block at the position)</param>
            <param name="collumn">The column index in the grid</param>
            <param name="row">The row index in the grid</param>
            <returns>True if the block was removed or position was already empty, false if a different block exists at that position</returns>
        </member>
        <member name="M:Map.SetStartFromHorizontalSuperCheckPoint(System.Int32)">
            <summary>
                Sets up a horizontal super checkpoint with a specific X-axis load offset. This is
                used for horizontal level transitions where the map needs to load at a specific
                horizontal position.
            </summary>
            <param name="xLoadOffset">The horizontal offset for loading the level, clamped to non-negative values</param>
            <remarks>
                If the offset differs from the last load offset, persistence is disabled for this
                level to ensure a clean transition. The offset determines where in the level the
                player spawns horizontally.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromSuperCheckPoint">
            <summary>
                Marks that the next level load should start from a super checkpoint. This affects
                spawn positioning and level initialization.
            </summary>
            <remarks>
                Sets the startFromSuperCheckPoint flag to true. Super checkpoints are special
                checkpoint types that typically mark major progression points or area transitions.
            </remarks>
        </member>
        <member name="M:Map.SetStartFromVerticalSuperCheckPoint(System.Int32)">
            <summary>
                Sets up a vertical super checkpoint with a specific Y-axis load offset. This is used
                for vertical level transitions where the map needs to load at a specific vertical
                position.
            </summary>
            <param name="yLoadOffset">The vertical offset for loading the level, clamped to non-negative values</param>
            <remarks>
                If the offset differs from the last load offset, persistence is disabled for this
                level to ensure a clean transition. The offset determines where in the level the
                player spawns vertically.
            </remarks>
        </member>
        <member name="M:Map.SetTryReduceLoadingTimes(System.Boolean)">
            <summary>
                Enables or disables the loading time optimization system. When enabled, the map will
                attempt to persist certain blocks between level loads to reduce loading times.
            </summary>
            <param name="actuallyTry">True to enable loading time optimizations, false to disable them</param>
            <remarks>
                This optimization system works in conjunction with the block persistence methods
                (PersistBlocks, DontPersistBlocks) to maintain certain map elements across level
                transitions.
            </remarks>
        </member>
        <member name="M:Map.SetTryReduceLoadingTimes(System.Boolean)">
            <summary>
                Enables or disables the loading time reduction optimization system.
            </summary>
            <param name="actuallyTry">True to enable optimization; false to disable.</param>
            <remarks>
                This optimization system affects block persistence and asset pooling to reduce level
                loading times. The setting is checked in conjunction with level editor status and
                debug configuration.
            </remarks>
        </member>
        <member name="M:Map.TryingToReduceLoadingTimes">
            <summary>
                Checks whether the loading time optimization system is currently active. Returns
                true only if optimizations are enabled, the level editor is not active, and the
                asset pool is not disabled.
            </summary>
            <returns>True if loading time optimizations are active and available, false otherwise</returns>
            <remarks>
                This method verifies multiple conditions to ensure optimizations are appropriate for
                the current game state. It's used by various persistence-related methods to
                determine whether to maintain blocks between level loads.
            </remarks>
        </member>
        <member name="M:Map.TryingToReduceLoadingTimes">
            <summary>
                Checks if the loading time reduction optimization is currently active.
            </summary>
            <returns>True if optimization is enabled and conditions are met; false otherwise.</returns>
            <remarks>
                Returns true only if optimization is enabled, level editor is not active, and asset
                pooling is not disabled in debug config. This ensures optimizations don't interfere
                with editing or debugging workflows.
            </remarks>
        </member>
        <!-- Map Data & State Properties -->
        <member name="P:Map.HasBeenSetup">
            <summary>
                Gets a value indicating whether the map has completed its initialization process.
            </summary>
        </member>
        <member name="P:Map.HasSpawnedFlexPower">
            <summary>
                Gets or sets a value indicating whether flex power items have been spawned on the
                map. Used to ensure flex power items are only spawned once per map.
            </summary>
        </member>
        <member name="P:Map.MapData">
            <summary>
                Gets or sets the current map's data structure. When setting, automatically updates
                the static Map.Width and Map.Height fields based on the MapData dimensions (or sets
                them to 0 if MapData is null).
            </summary>
        </member>
        <member name="P:Map.activeTheme">
            <summary>
                Gets or sets the currently active theme holder that defines all block prefabs,
                environmental objects, and visual assets for the current level. This property is set
                based on the map's theme data during map generation and controls which set of
                prefabs are used for blocks, backgrounds, crates, vehicles, and other theme-specific
                elements. The theme determines visual appearance and available prefab types for
                elements like earth blocks, bridges, cages, and special objects. Common themes
                include jungle, city, desert, forest, hell, america, and burning jungle variations.
            </summary>
        </member>
        <!-- Map Data & State Fields -->
        <member name="F:Map.HalfTileSize">
            <summary>
                Defines half the size of a standard tile in pixels. Used for center-point
                calculations and sub-tile positioning operations. Equal to 8 pixels (half of
                TileSize).
            </summary>
        </member>
        <member name="F:Map.LevelFileName">
            <summary>
                The filename of the currently loaded level. Used by the level loading system and
                editor to track which level file is active. Referenced by various game systems
                including the level editor and selection controller.
            </summary>
        </member>
        <member name="F:Map._hasSpawnedFlexPower">
            <summary>
                Private backing field for the HasSpawnedFlexPower property. Tracks whether flex
                power items have been spawned on the current map to prevent duplicate spawning.
            </summary>
        </member>
        <member name="F:Map._mapData">
            <summary>
                Static backing field for the current map's data structure. Stores the MapData object
                that contains level layout, dimensions, and configuration. Used by the MapData
                property.
            </summary>
        </member>
        <member name="F:Map.americaThemeReference">
            <summary>
                Reference to the America/patriotic theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.America. Features American-themed decorations and
                environments.
            </summary>
        </member>
        <member name="F:Map.barrelBlockCount">
            <summary>
                A randomized counter used to determine barrel variant spawning. Initialized to a
                random value between 0 and 100 during map setup. Used in calculations to determine
                whether to spawn propane tanks, oil barrels, or acid barrels based on the map's
                configured spawn probabilities.
            </summary>
        </member>
        <member name="F:Map.burningJungleThemeReference">
            <summary>
                Reference to the burning jungle theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.BurningJungle. Features fire effects, burned vegetation,
                and destruction-themed assets.
            </summary>
        </member>
        <member name="F:Map.cagesSinceLastHardcoreCage">
            <summary>
                Counts the number of potential cage spawn locations passed since the last hardcore
                cage was placed. Defaults to 3. When this exceeds 5, forces a cage placement
                regardless of random chance.
            </summary>
        </member>
        <member name="F:Map.cityThemeReference">
            <summary>
                Reference to the city theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.City. Contains urban environment prefabs including
                buildings, streets, and city-specific enemies.
            </summary>
        </member>
        <member name="F:Map.currentBackgroundBlock">
            <summary>
                Temporary reference to the current background block being instantiated during map
                generation. Used for blocks that have both foreground and background components.
            </summary>
        </member>
        <member name="F:Map.currentBlock">
            <summary>
                Temporary reference to the current foreground block being instantiated during map
                generation. Used throughout the PlaceBlock method to hold the newly created block
                before placement.
            </summary>
        </member>
        <member name="F:Map.deathMatchHelicopterCount">
            <summary>
                Tracks the number of helicopters spawned in death match mode. Every even-numbered
                helicopter spawns at a different X position (minX + 48f).
            </summary>
        </member>
        <member name="F:Map.desertThemeReference">
            <summary>
                Reference to the desert theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.Desert. Contains sand terrain, desert structures, and
                arid environment assets.
            </summary>
        </member>
        <member name="F:Map.dontPersistedPastLevelLoadThisLevel">
            <summary>
                Prevents block persistence for the current level when set to true. Used to disable
                persistence for specific levels or game modes.
            </summary>
        </member>
        <member name="F:Map.finished">
            <summary>
                Indicates whether the current level has been completed. Set to false during map
                initialization and checked by IsFinished().
            </summary>
        </member>
        <member name="F:Map.followCameraTransform">
            <summary>
                Transform reference used by parallax background elements to follow camera movement.
                Passed to ParallaxFollow components via SetFollow() to create depth-based scrolling
                effects for clouds, fog, and background decorations.
            </summary>
        </member>
        <member name="F:Map.forceMode">
            <summary>
                Forces a specific game mode when running in the Unity editor. When set to a value
                other than GameMode.NotSet, overrides the normal game mode selection process.
                Supports modes like ExplosionRun, DeathMatch, Race, and SuicideHorde for testing.
            </summary>
        </member>
        <member name="F:Map.forceTestLevel">
            <summary>
                When true, forces the map to load the test level specified in testLevelFileName
                instead of the normal level. Instance field used for editor testing workflows.
            </summary>
        </member>
        <member name="F:Map.forceThisToBeTheDefaultCampaignScene">
            <summary>
                When true in the Unity editor, sets this scene as the default campaign scene in
                LevelSelectionController. Instance field used for development workflow to override
                the normal campaign scene selection.
            </summary>
        </member>
        <member name="F:Map.forceTryingToReduceLoadingTimes">
            <summary>
                Instance-specific override to enable loading time optimizations. When true, forces
                SetTryReduceLoadingTimes(true) during map initialization.
            </summary>
        </member>
        <member name="F:Map.forestThemeReference">
            <summary>
                Reference to the forest theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.Forest. Includes forest-specific terrain, vegetation,
                and wildlife assets.
            </summary>
        </member>
        <member name="F:Map.hasAliens">
            <summary>
                Indicates whether the current map contains alien enemies. Set to true during map
                loading when any DoodadInfo with DoodadType.Alien is found in MapData.DoodadList.
                Used by HasThisMapGotAliens() for gameplay logic.
            </summary>
        </member>
        <member name="F:Map.hasPersistedPastLevelLoad">
            <summary>
                Tracks whether blocks were actually persisted from the previous level. Used to
                determine if persistent blocks need to be handled during map generation.
            </summary>
        </member>
        <member name="F:Map.havePlacedCageForHardcore">
            <summary>
                Tracks whether a cage has been placed in the current hardcore game session. Used to
                control cage spawning frequency in hardcore mode.
            </summary>
        </member>
        <member name="F:Map.hellThemeReference">
            <summary>
                Reference to the hell theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.Hell. Contains demonic enemies, lava effects, and
                underworld environment assets.
            </summary>
        </member>
        <member name="F:Map.isEditing">
            <summary>
                Indicates whether the map is currently in editor mode. When true, enables special
                editor-only functionality and bypasses certain gameplay restrictions (such as hard
                mode requirements for specific doodads). Also affects terrain interaction behavior
                and visual feedback.
            </summary>
        </member>
        <member name="F:Map.jungleThemeReference">
            <summary>
                Reference to the jungle theme assets holder. Selected as activeTheme when
                MapData.theme is LevelTheme.Jungle. Contains prefabs for blocks, enemies, doodads,
                and environmental elements specific to jungle levels.
            </summary>
        </member>
        <member name="F:Map.lastXLoadOffset">
            <summary>
                The X coordinate offset of the currently loaded map section. Updated from
                nextXLoadOffset when loading new map sections. Used to translate between absolute
                map coordinates and local loaded section coordinates when spawning doodads and other
                map elements.
            </summary>
        </member>
        <member name="F:Map.lastYLoadOffset">
            <summary>
                The Y coordinate offset of the currently loaded map section. Updated from
                nextYLoadOffset when loading new map sections. Used to translate between absolute
                map coordinates and local loaded section coordinates when spawning doodads and other
                map elements.
            </summary>
        </member>
        <member name="F:Map.levelNum">
            <summary>
                The current level number in a sequence. Protected field used internally for level
                progression tracking, though its specific usage appears limited in the decompiled
                code.
            </summary>
        </member>
        <member name="F:Map.levelsCount">
            <summary>
                The total number of levels in the current sequence. Protected field used internally
                for level progression management, though its specific usage appears limited in the
                decompiled code.
            </summary>
        </member>
        <member name="F:Map.levelsLength">
            <summary>
                Stores the total number of levels available in the game. Currently unused in the
                decompiled code.
            </summary>
        </member>
        <member name="F:Map.maxRowActive">
            <summary>
                Maximum active row index for block visibility optimization. Used by the offscreen
                deactivation system to track the highest row that should remain active. Blocks
                beyond this row are deactivated to improve performance. Initialized to 256 and
                updated dynamically as the camera moves through the level.
            </summary>
        </member>
        <member name="F:Map.nextXLoadOffset">
            <summary>
                The X coordinate offset for the next map section to be loaded. Used in conjunction
                with streaming map loading to determine which horizontal section of the map should
                be loaded next. Reset to 0 during map initialization.
            </summary>
        </member>
        <member name="F:Map.nextYLoadOffset">
            <summary>
                The Y coordinate offset for the next map section to be loaded. Used in conjunction
                with streaming map loading to determine which vertical section of the map should be
                loaded next. Always initialized to 0.
            </summary>
        </member>
        <member name="F:Map.persistPastLevelLoad">
            <summary>
                Controls whether certain map elements should persist when loading the next level.
                Used by the block persistence system to maintain state between levels.
            </summary>
        </member>
        <member name="F:Map.persistentGameObject">
            <summary>
                The GameObject that holds persistent map elements between level loads. Created as
                "Persistent Map" when block persistence is first enabled.
            </summary>
        </member>
        <member name="F:Map.placeGroundType">
            <summary>
                Stores the ground type to be placed during map generation operations. Used as a
                temporary variable during block placement.
            </summary>
        </member>
        <member name="F:Map.randomLevel">
            <summary>
                Determines whether the map should add a random offset to the starting level number.
                When true, adds a random value between 0 and randomRange to startLevel during
                initialization.
            </summary>
        </member>
        <member name="F:Map.randomLevelSet">
            <summary>
                Tracks whether the random level offset has been applied during map initialization.
                Used to ensure the random level adjustment only happens once per session.
            </summary>
        </member>
        <member name="F:Map.randomOffset">
            <summary>
                Instance-specific random offset value used during map generation. Purpose unclear
                from available code.
            </summary>
        </member>
        <member name="F:Map.randomRange">
            <summary>
                The maximum random offset that can be added to the starting level when randomLevel
                is enabled. Defaults to 3, meaning the start level can be increased by 0-2.
            </summary>
        </member>
        <member name="F:Map.runDeactivationOffscreenIsSetup">
            <summary>
                Indicates whether the offscreen deactivation system has been initialized. Set to
                true after InitializeDeactivationOffscreen completes setup of active area
                boundaries. When false, RunDeactivationOffscreen will not execute its optimization
                logic.
            </summary>
        </member>
        <member name="F:Map.sharedObjectsReference">
            <summary>
                Reference to shared level objects that are used across multiple themes. Accessed via
                sharedObjectsReference.Asset to instantiate common objects like treasure mooks,
                special vehicles, alien bosses, and theme-agnostic gameplay elements.
            </summary>
        </member>
        <member name="F:Map.tempColor">
            <summary>
                Temporary color storage used during map texture processing. Currently unused in the
                decompiled code.
            </summary>
        </member>
        <member name="F:Map.tempEmptyColor">
            <summary>
                Temporary color value used by IsGroundEmpty to check pixel transparency. Cached to
                avoid repeated color allocations during texture parsing.
            </summary>
        </member>
        <member name="F:Map.tempGroundType">
            <summary>
                Temporary ground type storage used during map generation. Currently unused in the
                decompiled code.
            </summary>
        </member>
        <member name="F:Map.testLevelFileName">
            <summary>
                Filename for a test level that can be loaded in editor mode. Instance field used in
                conjunction with forceTestLevel to override normal level loading for testing
                purposes.
            </summary>
        </member>
        <member name="F:Map.tryingToReduceLoadingTimes">
            <summary>
                Global flag controlling whether the game should use optimizations to reduce loading
                times. Defaults to true, but disabled in level editor or when asset pooling is
                disabled.
            </summary>
        </member>
        <member name="F:Map.woodBlockCount">
            <summary>
                Counter used for procedural variation in crate spawning. Initialized to a random
                value (0-144) on map setup and incremented when placing wood blocks. Used with
                modulo operations to determine when to spawn special crates (ammo, time, airstrike)
                based on spawn chance calculations.
            </summary>
        </member>
    </members>
</doc>